{
    "name": "port",
    "displayName": "Port",
    "description": "A Pulumi package for creating and managing Port resources.",
    "keywords": [
        "pulumi",
        "port",
        "category/utility"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`port-labs` Terraform Provider](https://github.com/port-labs/terraform-provider-port-labs).",
    "repository": "https://github.com/port-labs/pulumi-port",
    "pluginDownloadURL": "github://api.github.com/port-labs/pulumi-port",
    "publisher": "port-labs",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "port_labs"
        },
        "go": {
            "importBasePath": "github.com/port-labs/pulumi-port/sdk/v2/go/port",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@port-labs/port",
            "packageDescription": "A Pulumi package for creating and managing Port resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/port-labs/terraform-provider-port-labs)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-port` repo](https://github.com/port-labs/pulumi-port/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-port-labs` repo](https://github.com/port-labs/terraform-provider-port-labs/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "port_pulumi",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/port-labs/terraform-provider-port-labs)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-port` repo](https://github.com/port-labs/pulumi-port/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-port-labs` repo](https://github.com/port-labs/terraform-provider-port-labs/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "baseUrl": {
                "type": "string"
            },
            "clientId": {
                "type": "string",
                "description": "Client ID for Port-labs\n"
            },
            "secret": {
                "type": "string",
                "description": "Client Secret for Port-labs\n",
                "secret": true
            },
            "token": {
                "type": "string",
                "description": "Token for Port-labs\n",
                "secret": true
            }
        }
    },
    "types": {
        "port:index/ActionApprovalEmailNotification:ActionApprovalEmailNotification": {
            "type": "object"
        },
        "port:index/ActionApprovalWebhookNotification:ActionApprovalWebhookNotification": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "The format to invoke the webhook\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to invoke the webhook\n"
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "port:index/ActionAutomationTrigger:ActionAutomationTrigger": {
            "properties": {
                "anyEntityChangeEvent": {
                    "$ref": "#/types/port:index/ActionAutomationTriggerAnyEntityChangeEvent:ActionAutomationTriggerAnyEntityChangeEvent",
                    "description": "Any entity change event trigger\n"
                },
                "anyRunChangeEvent": {
                    "$ref": "#/types/port:index/ActionAutomationTriggerAnyRunChangeEvent:ActionAutomationTriggerAnyRunChangeEvent",
                    "description": "Any run change event trigger\n"
                },
                "entityCreatedEvent": {
                    "$ref": "#/types/port:index/ActionAutomationTriggerEntityCreatedEvent:ActionAutomationTriggerEntityCreatedEvent",
                    "description": "Entity created event trigger\n"
                },
                "entityDeletedEvent": {
                    "$ref": "#/types/port:index/ActionAutomationTriggerEntityDeletedEvent:ActionAutomationTriggerEntityDeletedEvent",
                    "description": "Entity deleted event trigger\n"
                },
                "entityUpdatedEvent": {
                    "$ref": "#/types/port:index/ActionAutomationTriggerEntityUpdatedEvent:ActionAutomationTriggerEntityUpdatedEvent",
                    "description": "Entity updated event trigger\n"
                },
                "jqCondition": {
                    "$ref": "#/types/port:index/ActionAutomationTriggerJqCondition:ActionAutomationTriggerJqCondition",
                    "description": "JQ condition for automation trigger\n"
                },
                "runCreatedEvent": {
                    "$ref": "#/types/port:index/ActionAutomationTriggerRunCreatedEvent:ActionAutomationTriggerRunCreatedEvent",
                    "description": "Run created event trigger\n"
                },
                "runUpdatedEvent": {
                    "$ref": "#/types/port:index/ActionAutomationTriggerRunUpdatedEvent:ActionAutomationTriggerRunUpdatedEvent",
                    "description": "Run updated event trigger\n"
                },
                "timerPropertyExpiredEvent": {
                    "$ref": "#/types/port:index/ActionAutomationTriggerTimerPropertyExpiredEvent:ActionAutomationTriggerTimerPropertyExpiredEvent",
                    "description": "Timer property expired event trigger\n"
                }
            },
            "type": "object"
        },
        "port:index/ActionAutomationTriggerAnyEntityChangeEvent:ActionAutomationTriggerAnyEntityChangeEvent": {
            "properties": {
                "blueprintIdentifier": {
                    "type": "string",
                    "description": "The blueprint identifier of the changed entity\n"
                }
            },
            "type": "object",
            "required": [
                "blueprintIdentifier"
            ]
        },
        "port:index/ActionAutomationTriggerAnyRunChangeEvent:ActionAutomationTriggerAnyRunChangeEvent": {
            "properties": {
                "actionIdentifier": {
                    "type": "string",
                    "description": "The action identifier of the changed run\n"
                }
            },
            "type": "object",
            "required": [
                "actionIdentifier"
            ]
        },
        "port:index/ActionAutomationTriggerEntityCreatedEvent:ActionAutomationTriggerEntityCreatedEvent": {
            "properties": {
                "blueprintIdentifier": {
                    "type": "string",
                    "description": "The blueprint identifier of the created entity\n"
                }
            },
            "type": "object",
            "required": [
                "blueprintIdentifier"
            ]
        },
        "port:index/ActionAutomationTriggerEntityDeletedEvent:ActionAutomationTriggerEntityDeletedEvent": {
            "properties": {
                "blueprintIdentifier": {
                    "type": "string",
                    "description": "The blueprint identifier of the deleted entity\n"
                }
            },
            "type": "object",
            "required": [
                "blueprintIdentifier"
            ]
        },
        "port:index/ActionAutomationTriggerEntityUpdatedEvent:ActionAutomationTriggerEntityUpdatedEvent": {
            "properties": {
                "blueprintIdentifier": {
                    "type": "string",
                    "description": "The blueprint identifier of the updated entity\n"
                }
            },
            "type": "object",
            "required": [
                "blueprintIdentifier"
            ]
        },
        "port:index/ActionAutomationTriggerJqCondition:ActionAutomationTriggerJqCondition": {
            "properties": {
                "combinator": {
                    "type": "string",
                    "description": "The combinator of the condition\n"
                },
                "expressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The jq expressions of the condition\n"
                }
            },
            "type": "object",
            "required": [
                "expressions"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "combinator",
                        "expressions"
                    ]
                }
            }
        },
        "port:index/ActionAutomationTriggerRunCreatedEvent:ActionAutomationTriggerRunCreatedEvent": {
            "properties": {
                "actionIdentifier": {
                    "type": "string",
                    "description": "The action identifier of the created run\n"
                }
            },
            "type": "object",
            "required": [
                "actionIdentifier"
            ]
        },
        "port:index/ActionAutomationTriggerRunUpdatedEvent:ActionAutomationTriggerRunUpdatedEvent": {
            "properties": {
                "actionIdentifier": {
                    "type": "string",
                    "description": "The action identifier of the updated run\n"
                }
            },
            "type": "object",
            "required": [
                "actionIdentifier"
            ]
        },
        "port:index/ActionAutomationTriggerTimerPropertyExpiredEvent:ActionAutomationTriggerTimerPropertyExpiredEvent": {
            "properties": {
                "blueprintIdentifier": {
                    "type": "string",
                    "description": "The blueprint identifier of the expired timer property\n"
                },
                "propertyIdentifier": {
                    "type": "string",
                    "description": "The property identifier of the expired timer property\n"
                }
            },
            "type": "object",
            "required": [
                "blueprintIdentifier",
                "propertyIdentifier"
            ]
        },
        "port:index/ActionAzureMethod:ActionAzureMethod": {
            "properties": {
                "org": {
                    "type": "string",
                    "description": "Required when selecting type AZURE. The Azure org that the workflow belongs to\n"
                },
                "payload": {
                    "type": "string",
                    "description": "The Azure Devops workflow [payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).\n"
                },
                "webhook": {
                    "type": "string",
                    "description": "Required when selecting type AZURE. The Azure webhook that the workflow belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "org",
                "webhook"
            ]
        },
        "port:index/ActionGithubMethod:ActionGithubMethod": {
            "properties": {
                "org": {
                    "type": "string",
                    "description": "Required when selecting type GITHUB. The GitHub org that the workflow belongs to\n"
                },
                "repo": {
                    "type": "string",
                    "description": "Required when selecting type GITHUB. The GitHub repo that the workflow belongs to\n"
                },
                "reportWorkflowStatus": {
                    "type": "string",
                    "description": "Report the workflow status when invoking the action\n"
                },
                "workflow": {
                    "type": "string",
                    "description": "The GitHub workflow that the action belongs to\n"
                },
                "workflowInputs": {
                    "type": "string",
                    "description": "The GitHub [workflow inputs](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).\n"
                }
            },
            "type": "object",
            "required": [
                "org",
                "repo",
                "workflow"
            ]
        },
        "port:index/ActionGitlabMethod:ActionGitlabMethod": {
            "properties": {
                "defaultRef": {
                    "type": "string",
                    "description": "The default ref of the action\n"
                },
                "groupName": {
                    "type": "string",
                    "description": "Required when selecting type GITLAB. The GitLab group name that the workflow belongs to\n"
                },
                "pipelineVariables": {
                    "type": "string",
                    "description": "The Gitlab pipeline variables should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).\n"
                },
                "projectName": {
                    "type": "string",
                    "description": "Required when selecting type GITLAB. The GitLab project name that the workflow belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "groupName",
                "projectName"
            ]
        },
        "port:index/ActionKafkaMethod:ActionKafkaMethod": {
            "properties": {
                "payload": {
                    "type": "string",
                    "description": "The Kafka message [payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).\n"
                }
            },
            "type": "object"
        },
        "port:index/ActionPermissionsPermissions:ActionPermissionsPermissions": {
            "properties": {
                "approve": {
                    "$ref": "#/types/port:index/ActionPermissionsPermissionsApprove:ActionPermissionsPermissionsApprove",
                    "description": "The permission to approve the action's runs\n"
                },
                "execute": {
                    "$ref": "#/types/port:index/ActionPermissionsPermissionsExecute:ActionPermissionsPermissionsExecute",
                    "description": "The permission to execute the action\n"
                }
            },
            "type": "object",
            "required": [
                "approve",
                "execute"
            ]
        },
        "port:index/ActionPermissionsPermissionsApprove:ActionPermissionsPermissionsApprove": {
            "properties": {
                "policy": {
                    "type": "string",
                    "description": "The policy to use for approval\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The roles with approval permission\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The teams with approval permission\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The users with approval permission\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "roles",
                        "teams",
                        "users"
                    ]
                }
            }
        },
        "port:index/ActionPermissionsPermissionsExecute:ActionPermissionsPermissionsExecute": {
            "properties": {
                "ownedByTeam": {
                    "type": "boolean",
                    "description": "Give execution permission to the teams who own the entity\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The policy to use for execution\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The roles with execution permission\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The teams with execution permission\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The users with execution permission\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ownedByTeam",
                        "roles",
                        "teams",
                        "users"
                    ]
                }
            }
        },
        "port:index/ActionSelfServiceTrigger:ActionSelfServiceTrigger": {
            "properties": {
                "blueprintIdentifier": {
                    "type": "string",
                    "description": "The ID of the blueprint\n"
                },
                "condition": {
                    "type": "string",
                    "description": "The `condition` field allows you to define rules using Port's [search \u0026 query syntax](https://docs.getport.io/search-and-query/#rules) to determine which entities the action will be available for.\n"
                },
                "operation": {
                    "type": "string",
                    "description": "The operation type of the action\n"
                },
                "orderProperties": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Order properties\n"
                },
                "requiredJqQuery": {
                    "type": "string",
                    "description": "The required jq query of the property\n"
                },
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/port:index/ActionSelfServiceTriggerStep:ActionSelfServiceTriggerStep"
                    },
                    "description": "The steps of the action\n"
                },
                "userProperties": {
                    "$ref": "#/types/port:index/ActionSelfServiceTriggerUserProperties:ActionSelfServiceTriggerUserProperties",
                    "description": "User properties\n"
                }
            },
            "type": "object",
            "required": [
                "operation"
            ]
        },
        "port:index/ActionSelfServiceTriggerStep:ActionSelfServiceTriggerStep": {
            "properties": {
                "orders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The order of the properties in this step\n"
                },
                "title": {
                    "type": "string",
                    "description": "The step's title\n"
                }
            },
            "type": "object",
            "required": [
                "orders",
                "title"
            ]
        },
        "port:index/ActionSelfServiceTriggerUserProperties:ActionSelfServiceTriggerUserProperties": {
            "properties": {
                "arrayProps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/ActionSelfServiceTriggerUserPropertiesArrayProps:ActionSelfServiceTriggerUserPropertiesArrayProps"
                    },
                    "description": "The array property of the action\n"
                },
                "booleanProps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/ActionSelfServiceTriggerUserPropertiesBooleanProps:ActionSelfServiceTriggerUserPropertiesBooleanProps"
                    },
                    "description": "The boolean property of the action\n"
                },
                "numberProps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/ActionSelfServiceTriggerUserPropertiesNumberProps:ActionSelfServiceTriggerUserPropertiesNumberProps"
                    },
                    "description": "The number property of the action\n"
                },
                "objectProps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/ActionSelfServiceTriggerUserPropertiesObjectProps:ActionSelfServiceTriggerUserPropertiesObjectProps"
                    },
                    "description": "The object property of the action\n"
                },
                "stringProps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/ActionSelfServiceTriggerUserPropertiesStringProps:ActionSelfServiceTriggerUserPropertiesStringProps"
                    },
                    "description": "The string property of the action\n"
                }
            },
            "type": "object"
        },
        "port:index/ActionSelfServiceTriggerUserPropertiesArrayProps:ActionSelfServiceTriggerUserPropertiesArrayProps": {
            "properties": {
                "booleanItems": {
                    "$ref": "#/types/port:index/ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItems:ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItems",
                    "description": "An array of boolean items within the property\n"
                },
                "defaultJqQuery": {
                    "type": "string",
                    "description": "The default jq query of the array property\n"
                },
                "dependsOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The properties that this property depends on\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the property\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the property\n"
                },
                "maxItems": {
                    "type": "integer",
                    "description": "The max items of the array property\n"
                },
                "minItems": {
                    "type": "integer",
                    "description": "The min items of the array property\n"
                },
                "numberItems": {
                    "$ref": "#/types/port:index/ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItems:ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItems",
                    "description": "An array of number items within the property\n"
                },
                "objectItems": {
                    "$ref": "#/types/port:index/ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItems:ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItems",
                    "description": "An array of object items within the property\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value\n"
                },
                "sort": {
                    "$ref": "#/types/port:index/ActionSelfServiceTriggerUserPropertiesArrayPropsSort:ActionSelfServiceTriggerUserPropertiesArrayPropsSort",
                    "description": "How to sort entities when in the self service action form in the UI\n"
                },
                "stringItems": {
                    "$ref": "#/types/port:index/ActionSelfServiceTriggerUserPropertiesArrayPropsStringItems:ActionSelfServiceTriggerUserPropertiesArrayPropsStringItems",
                    "description": "An array of string items within the property\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the property\n"
                },
                "visible": {
                    "type": "boolean",
                    "description": "The visibility of the array property\n"
                },
                "visibleJqQuery": {
                    "type": "string",
                    "description": "The visibility condition jq query of the array property\n"
                }
            },
            "type": "object"
        },
        "port:index/ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItems:ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItems": {
            "properties": {
                "defaults": {
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    },
                    "description": "The default values for the boolean items\n"
                }
            },
            "type": "object"
        },
        "port:index/ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItems:ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItems": {
            "properties": {
                "defaults": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "The default values for the number items\n"
                },
                "enumJqQuery": {
                    "type": "string",
                    "description": "The jq query for the enum number items\n"
                },
                "enums": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "The enum of possible values for the number items\n"
                }
            },
            "type": "object"
        },
        "port:index/ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItems:ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItems": {
            "properties": {
                "defaults": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "The default values for the object items\n"
                }
            },
            "type": "object"
        },
        "port:index/ActionSelfServiceTriggerUserPropertiesArrayPropsSort:ActionSelfServiceTriggerUserPropertiesArrayPropsSort": {
            "properties": {
                "order": {
                    "type": "string",
                    "description": "The order to sort the entities in\n"
                },
                "property": {
                    "type": "string",
                    "description": "The property to sort the entities by\n"
                }
            },
            "type": "object",
            "required": [
                "property"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "order",
                        "property"
                    ]
                }
            }
        },
        "port:index/ActionSelfServiceTriggerUserPropertiesArrayPropsStringItems:ActionSelfServiceTriggerUserPropertiesArrayPropsStringItems": {
            "properties": {
                "blueprint": {
                    "type": "string",
                    "description": "The blueprint identifier the action relates to\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The dataset of the entity-format items\n"
                },
                "defaults": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The default value of the items\n"
                },
                "enumJqQuery": {
                    "type": "string",
                    "description": "The jq query for the enum of string items\n"
                },
                "enums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The enum of possible values for the string items\n"
                },
                "format": {
                    "type": "string",
                    "description": "The format of the string property, Accepted values include `date-time`, `url`, `email`, `ipv4`, `ipv6`, `yaml`, `entity`, `user`, `team`, `proto`, `markdown`\n"
                }
            },
            "type": "object"
        },
        "port:index/ActionSelfServiceTriggerUserPropertiesBooleanProps:ActionSelfServiceTriggerUserPropertiesBooleanProps": {
            "properties": {
                "default": {
                    "type": "boolean",
                    "description": "The default of the boolean property\n"
                },
                "defaultJqQuery": {
                    "type": "string",
                    "description": "The default jq query of the boolean property\n"
                },
                "dependsOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The properties that this property depends on\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the property\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the property\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the property\n"
                },
                "visible": {
                    "type": "boolean",
                    "description": "The visibility of the boolean property\n"
                },
                "visibleJqQuery": {
                    "type": "string",
                    "description": "The visibility condition jq query of the boolean property\n"
                }
            },
            "type": "object"
        },
        "port:index/ActionSelfServiceTriggerUserPropertiesNumberProps:ActionSelfServiceTriggerUserPropertiesNumberProps": {
            "properties": {
                "default": {
                    "type": "number",
                    "description": "The default of the number property\n"
                },
                "defaultJqQuery": {
                    "type": "string",
                    "description": "The default jq query of the number property\n"
                },
                "dependsOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The properties that this property depends on\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the property\n"
                },
                "enumColors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The enum colors of the number property\n"
                },
                "enumJqQuery": {
                    "type": "string",
                    "description": "The enum jq query of the string property\n"
                },
                "enums": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "The enum of the number property\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the property\n"
                },
                "maximum": {
                    "type": "number",
                    "description": "The min of the number property\n"
                },
                "minimum": {
                    "type": "number",
                    "description": "The max of the number property\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the property\n"
                },
                "visible": {
                    "type": "boolean",
                    "description": "The visibility of the number property\n"
                },
                "visibleJqQuery": {
                    "type": "string",
                    "description": "The visibility condition jq query of the number property\n"
                }
            },
            "type": "object"
        },
        "port:index/ActionSelfServiceTriggerUserPropertiesObjectProps:ActionSelfServiceTriggerUserPropertiesObjectProps": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "The default of the object property\n"
                },
                "defaultJqQuery": {
                    "type": "string",
                    "description": "The default jq query of the object property\n"
                },
                "dependsOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The properties that this property depends on\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the property\n"
                },
                "encryption": {
                    "type": "string",
                    "description": "The algorithm to encrypt the property with. Accepted value: `aes256-gcm`\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the property\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the property\n"
                },
                "visible": {
                    "type": "boolean",
                    "description": "The visibility of the object property\n"
                },
                "visibleJqQuery": {
                    "type": "string",
                    "description": "The visibility condition jq query of the object property\n"
                }
            },
            "type": "object"
        },
        "port:index/ActionSelfServiceTriggerUserPropertiesStringProps:ActionSelfServiceTriggerUserPropertiesStringProps": {
            "properties": {
                "blueprint": {
                    "type": "string",
                    "description": "The blueprint identifier the string property relates to\n"
                },
                "dataset": {
                    "$ref": "#/types/port:index/ActionSelfServiceTriggerUserPropertiesStringPropsDataset:ActionSelfServiceTriggerUserPropertiesStringPropsDataset",
                    "description": "The dataset of an the entity-format property\n"
                },
                "default": {
                    "type": "string",
                    "description": "The default of the string property\n"
                },
                "defaultJqQuery": {
                    "type": "string",
                    "description": "The default jq query of the string property\n"
                },
                "dependsOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The properties that this property depends on\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the property\n"
                },
                "encryption": {
                    "type": "string",
                    "description": "The algorithm to encrypt the property with. Accepted value: `aes256-gcm`\n"
                },
                "enumColors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The enum colors of the string property\n"
                },
                "enumJqQuery": {
                    "type": "string",
                    "description": "The enum jq query of the string property\n"
                },
                "enums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The enum of the string property\n"
                },
                "format": {
                    "type": "string",
                    "description": "The format of the string property, Accepted values include `date-time`, `url`, `email`, `ipv4`, `ipv6`, `yaml`, `entity`, `user`, `team`, `proto`, `markdown`\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the property\n"
                },
                "maxLength": {
                    "type": "integer",
                    "description": "The max length of the string property\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "The min length of the string property\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "The pattern of the string property\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value\n"
                },
                "sort": {
                    "$ref": "#/types/port:index/ActionSelfServiceTriggerUserPropertiesStringPropsSort:ActionSelfServiceTriggerUserPropertiesStringPropsSort",
                    "description": "How to sort entities when in the self service action form in the UI\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the property\n"
                },
                "visible": {
                    "type": "boolean",
                    "description": "The visibility of the string property\n"
                },
                "visibleJqQuery": {
                    "type": "string",
                    "description": "The visibility condition jq query of the string property\n"
                }
            },
            "type": "object"
        },
        "port:index/ActionSelfServiceTriggerUserPropertiesStringPropsDataset:ActionSelfServiceTriggerUserPropertiesStringPropsDataset": {
            "properties": {
                "combinator": {
                    "type": "string",
                    "description": "The combinator of the dataset\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/port:index/ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRule:ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRule"
                    },
                    "description": "The rules of the dataset\n"
                }
            },
            "type": "object",
            "required": [
                "combinator",
                "rules"
            ]
        },
        "port:index/ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRule:ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRule": {
            "properties": {
                "blueprint": {
                    "type": "string",
                    "description": "The blueprint identifier the action relates to\n"
                },
                "operator": {
                    "type": "string",
                    "description": "The operator of the rule\n"
                },
                "property": {
                    "type": "string",
                    "description": "The property identifier of the rule\n"
                },
                "value": {
                    "$ref": "#/types/port:index/ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValue:ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValue",
                    "description": "The value of the rule\n"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "port:index/ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValue:ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValue": {
            "properties": {
                "jqQuery": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "jqQuery"
            ]
        },
        "port:index/ActionSelfServiceTriggerUserPropertiesStringPropsSort:ActionSelfServiceTriggerUserPropertiesStringPropsSort": {
            "properties": {
                "order": {
                    "type": "string",
                    "description": "The order to sort the entities in\n"
                },
                "property": {
                    "type": "string",
                    "description": "The property to sort the entities by\n"
                }
            },
            "type": "object",
            "required": [
                "property"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "order",
                        "property"
                    ]
                }
            }
        },
        "port:index/ActionUpsertEntityMethod:ActionUpsertEntityMethod": {
            "properties": {
                "blueprintIdentifier": {
                    "type": "string",
                    "description": "Required when selecting type Upsert Entity. The blueprint identifier of the entity for the upsert\n"
                },
                "mapping": {
                    "$ref": "#/types/port:index/ActionUpsertEntityMethodMapping:ActionUpsertEntityMethodMapping",
                    "description": "Upsert Entity invocation method\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "blueprintIdentifier"
            ]
        },
        "port:index/ActionUpsertEntityMethodMapping:ActionUpsertEntityMethodMapping": {
            "properties": {
                "icon": {
                    "type": "string",
                    "description": "The icon of the entity\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Required when selecting type Upsert Entity. The entity identifier for the upsert\n"
                },
                "properties": {
                    "type": "string",
                    "description": "The properties of the entity (key-value object encoded to a string)\n"
                },
                "relations": {
                    "type": "string",
                    "description": "The relations of the entity (key-value object encoded to a string)\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The teams the entity belongs to\n"
                },
                "teamsJq": {
                    "type": "string",
                    "description": "Jq that returns the teams the entity belongs to\n"
                }
            },
            "type": "object"
        },
        "port:index/ActionWebhookMethod:ActionWebhookMethod": {
            "properties": {
                "agent": {
                    "type": "string",
                    "description": "Specifies whether to use an agent to invoke the action. This can be a boolean value (`'true''` or `'false'`) or a JQ if dynamic evaluation is needed.\n"
                },
                "body": {
                    "type": "string",
                    "description": "The Webhook body should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The HTTP headers for invoking the action. They should be encoded as a key-value object to a string using jsonencode. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).\n"
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to invoke the action\n"
                },
                "synchronized": {
                    "type": "string",
                    "description": "Synchronize the action\n"
                },
                "url": {
                    "type": "string",
                    "description": "Required when selecting type WEBHOOK. The URL to invoke the action\n"
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "port:index/AggregationPropertiesProperties:AggregationPropertiesProperties": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the aggregation property\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the aggregation property\n"
                },
                "method": {
                    "$ref": "#/types/port:index/AggregationPropertiesPropertiesMethod:AggregationPropertiesPropertiesMethod",
                    "description": "The aggregation method to perform on the target blueprint, one of count*entities, average*entities, average*by*property, aggregate*by*property\n"
                },
                "query": {
                    "type": "string",
                    "description": "Query to filter the target entities\n"
                },
                "targetBlueprintIdentifier": {
                    "type": "string",
                    "description": "The identifier of the blueprint to perform the aggregation on\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the aggregation property\n"
                }
            },
            "type": "object",
            "required": [
                "method",
                "targetBlueprintIdentifier"
            ]
        },
        "port:index/AggregationPropertiesPropertiesMethod:AggregationPropertiesPropertiesMethod": {
            "properties": {
                "aggregateByProperty": {
                    "$ref": "#/types/port:index/AggregationPropertiesPropertiesMethodAggregateByProperty:AggregationPropertiesPropertiesMethodAggregateByProperty",
                    "description": "Function to calculate the aggregate by property value of the target entities, such as sum, min, max, median\n"
                },
                "averageByProperty": {
                    "$ref": "#/types/port:index/AggregationPropertiesPropertiesMethodAverageByProperty:AggregationPropertiesPropertiesMethodAverageByProperty",
                    "description": "Function to calculate the average by property value of the target entities\n"
                },
                "averageEntities": {
                    "$ref": "#/types/port:index/AggregationPropertiesPropertiesMethodAverageEntities:AggregationPropertiesPropertiesMethodAverageEntities",
                    "description": "Function to average the entities of the target entities\n"
                },
                "countEntities": {
                    "type": "boolean",
                    "description": "Function to count the entities of the target entities\n"
                }
            },
            "type": "object"
        },
        "port:index/AggregationPropertiesPropertiesMethodAggregateByProperty:AggregationPropertiesPropertiesMethodAggregateByProperty": {
            "properties": {
                "func": {
                    "type": "string",
                    "description": "The func of the aggregate by property\n"
                },
                "property": {
                    "type": "string",
                    "description": "The property of the aggregate by property\n"
                }
            },
            "type": "object",
            "required": [
                "func",
                "property"
            ]
        },
        "port:index/AggregationPropertiesPropertiesMethodAverageByProperty:AggregationPropertiesPropertiesMethodAverageByProperty": {
            "properties": {
                "averageOf": {
                    "type": "string",
                    "description": "The time periods to calculate the average by, e.g. hour, day, week, month\n"
                },
                "measureTimeBy": {
                    "type": "string",
                    "description": "The property name on which to calculate the the time periods, e.g. $createdAt, $updated_at or any other date property\n"
                },
                "property": {
                    "type": "string",
                    "description": "The property name on which to calculate the average by\n"
                }
            },
            "type": "object",
            "required": [
                "averageOf",
                "measureTimeBy",
                "property"
            ]
        },
        "port:index/AggregationPropertiesPropertiesMethodAverageEntities:AggregationPropertiesPropertiesMethodAverageEntities": {
            "properties": {
                "averageOf": {
                    "type": "string",
                    "description": "The time periods to calculate the average of, e.g. hour, day, week, month\n"
                },
                "measureTimeBy": {
                    "type": "string",
                    "description": "The property name on which to calculate the the time periods, e.g. $createdAt, $updated_at or any other date property\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "averageOf",
                        "measureTimeBy"
                    ]
                }
            }
        },
        "port:index/BlueprintCalculationProperties:BlueprintCalculationProperties": {
            "properties": {
                "calculation": {
                    "type": "string",
                    "description": "The calculation of the calculation property\n"
                },
                "colorized": {
                    "type": "boolean",
                    "description": "The colorized of the calculation property\n"
                },
                "colors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The colors of the calculation property\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the calculation property\n"
                },
                "format": {
                    "type": "string",
                    "description": "The format of the calculation property\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the calculation property\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the calculation property\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the calculation property\n"
                }
            },
            "type": "object",
            "required": [
                "calculation",
                "type"
            ]
        },
        "port:index/BlueprintKafkaChangelogDestination:BlueprintKafkaChangelogDestination": {
            "type": "object"
        },
        "port:index/BlueprintMirrorProperties:BlueprintMirrorProperties": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "The path of the mirror property\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the mirror property\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "port:index/BlueprintOwnership:BlueprintOwnership": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path for the Inherited ownership type. Required when type is 'Inherited'. Must be a valid relation identifiers path.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Optional title for the owning teams property.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Ownership type: either 'Inherited' or 'Direct'.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "port:index/BlueprintPermissionsEntities:BlueprintPermissionsEntities": {
            "properties": {
                "register": {
                    "$ref": "#/types/port:index/BlueprintPermissionsEntitiesRegister:BlueprintPermissionsEntitiesRegister",
                    "description": "Manage permissions to register entities of the blueprint\n"
                },
                "unregister": {
                    "$ref": "#/types/port:index/BlueprintPermissionsEntitiesUnregister:BlueprintPermissionsEntitiesUnregister",
                    "description": "Manage permissions to unregister entities of the blueprint\n"
                },
                "update": {
                    "$ref": "#/types/port:index/BlueprintPermissionsEntitiesUpdate:BlueprintPermissionsEntitiesUpdate",
                    "description": "Manage permissions to update entities of the blueprint\n"
                },
                "updateMetadataProperties": {
                    "$ref": "#/types/port:index/BlueprintPermissionsEntitiesUpdateMetadataProperties:BlueprintPermissionsEntitiesUpdateMetadataProperties"
                },
                "updateProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/BlueprintPermissionsEntitiesUpdateProperties:BlueprintPermissionsEntitiesUpdateProperties"
                    },
                    "description": "Manage permissions to update the entity properties\n"
                },
                "updateRelations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/BlueprintPermissionsEntitiesUpdateRelations:BlueprintPermissionsEntitiesUpdateRelations"
                    },
                    "description": "Manage permissions to update the entity relations\n"
                }
            },
            "type": "object",
            "required": [
                "register",
                "unregister",
                "update",
                "updateMetadataProperties"
            ]
        },
        "port:index/BlueprintPermissionsEntitiesRegister:BlueprintPermissionsEntitiesRegister": {
            "properties": {
                "ownedByTeam": {
                    "type": "boolean",
                    "description": "Owned by team\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Roles with register permissions\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams with register permissions\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Users with register permissions\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ownedByTeam"
                    ]
                }
            }
        },
        "port:index/BlueprintPermissionsEntitiesUnregister:BlueprintPermissionsEntitiesUnregister": {
            "properties": {
                "ownedByTeam": {
                    "type": "boolean",
                    "description": "Owned by team\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Roles with unregister permissions\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams with unregister permissions\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Users with unregister permissions\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ownedByTeam"
                    ]
                }
            }
        },
        "port:index/BlueprintPermissionsEntitiesUpdate:BlueprintPermissionsEntitiesUpdate": {
            "properties": {
                "ownedByTeam": {
                    "type": "boolean",
                    "description": "Owned by team\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Roles with update permissions\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams with update permissions\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Users with update permissions\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ownedByTeam"
                    ]
                }
            }
        },
        "port:index/BlueprintPermissionsEntitiesUpdateMetadataProperties:BlueprintPermissionsEntitiesUpdateMetadataProperties": {
            "properties": {
                "icon": {
                    "$ref": "#/types/port:index/BlueprintPermissionsEntitiesUpdateMetadataPropertiesIcon:BlueprintPermissionsEntitiesUpdateMetadataPropertiesIcon",
                    "description": "The entity's icon\n"
                },
                "identifier": {
                    "$ref": "#/types/port:index/BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifier:BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifier",
                    "description": "Unique Entity identifier, used for API calls, programmatic access and distinguishing between different entities\n"
                },
                "team": {
                    "$ref": "#/types/port:index/BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeam:BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeam",
                    "description": "The team this entity belongs to\n"
                },
                "title": {
                    "$ref": "#/types/port:index/BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitle:BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitle",
                    "description": "A human-readable name for the entity\n"
                }
            },
            "type": "object",
            "required": [
                "icon",
                "identifier",
                "team",
                "title"
            ]
        },
        "port:index/BlueprintPermissionsEntitiesUpdateMetadataPropertiesIcon:BlueprintPermissionsEntitiesUpdateMetadataPropertiesIcon": {
            "properties": {
                "ownedByTeam": {
                    "type": "boolean",
                    "description": "Owned by team\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Roles with update `$icon` metadata permissions\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams with update `$icon` metadata permissions\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Users with update `$icon` metadata permissions\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ownedByTeam"
                    ]
                }
            }
        },
        "port:index/BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifier:BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifier": {
            "properties": {
                "ownedByTeam": {
                    "type": "boolean",
                    "description": "Owned by team\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Roles with update `$identifier` metadata permissions\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams with update `$identifier` metadata permissions\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Users with update `$identifier` metadata permissions\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ownedByTeam"
                    ]
                }
            }
        },
        "port:index/BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeam:BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeam": {
            "properties": {
                "ownedByTeam": {
                    "type": "boolean",
                    "description": "Owned by team\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Roles with update `$team` metadata permissions\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams with update `$team` metadata permissions\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Users with update `$team` metadata permissions\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ownedByTeam"
                    ]
                }
            }
        },
        "port:index/BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitle:BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitle": {
            "properties": {
                "ownedByTeam": {
                    "type": "boolean",
                    "description": "Owned by team\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Roles with update `$title` metadata permissions\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams with update `$title` metadata permissions\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Users with update `$title` metadata permissions\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ownedByTeam"
                    ]
                }
            }
        },
        "port:index/BlueprintPermissionsEntitiesUpdateProperties:BlueprintPermissionsEntitiesUpdateProperties": {
            "properties": {
                "ownedByTeam": {
                    "type": "boolean",
                    "description": "Owned by team\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Roles with update specific property permissions\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams with update specific property permissions\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Users with update specific property permissions\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ownedByTeam"
                    ]
                }
            }
        },
        "port:index/BlueprintPermissionsEntitiesUpdateRelations:BlueprintPermissionsEntitiesUpdateRelations": {
            "properties": {
                "ownedByTeam": {
                    "type": "boolean",
                    "description": "Owned by team\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Roles with update specific relation permissions\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams with update specific relation permissions\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Users with update specific relation permissions\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ownedByTeam"
                    ]
                }
            }
        },
        "port:index/BlueprintProperties:BlueprintProperties": {
            "properties": {
                "arrayProps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/BlueprintPropertiesArrayProps:BlueprintPropertiesArrayProps"
                    },
                    "description": "The array property of the blueprint\n"
                },
                "booleanProps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/BlueprintPropertiesBooleanProps:BlueprintPropertiesBooleanProps"
                    },
                    "description": "The boolean property of the blueprint\n"
                },
                "numberProps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/BlueprintPropertiesNumberProps:BlueprintPropertiesNumberProps"
                    },
                    "description": "The number property of the blueprint\n"
                },
                "objectProps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/BlueprintPropertiesObjectProps:BlueprintPropertiesObjectProps"
                    },
                    "description": "The object property of the blueprint\n"
                },
                "stringProps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/BlueprintPropertiesStringProps:BlueprintPropertiesStringProps"
                    },
                    "description": "The string property of the blueprint\n"
                }
            },
            "type": "object"
        },
        "port:index/BlueprintPropertiesArrayProps:BlueprintPropertiesArrayProps": {
            "properties": {
                "booleanItems": {
                    "$ref": "#/types/port:index/BlueprintPropertiesArrayPropsBooleanItems:BlueprintPropertiesArrayPropsBooleanItems",
                    "description": "The items of the array property\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the property\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the property\n"
                },
                "maxItems": {
                    "type": "integer",
                    "description": "The max items of the array property\n"
                },
                "minItems": {
                    "type": "integer",
                    "description": "The min items of the array property\n"
                },
                "numberItems": {
                    "$ref": "#/types/port:index/BlueprintPropertiesArrayPropsNumberItems:BlueprintPropertiesArrayPropsNumberItems",
                    "description": "The items of the array property\n"
                },
                "objectItems": {
                    "$ref": "#/types/port:index/BlueprintPropertiesArrayPropsObjectItems:BlueprintPropertiesArrayPropsObjectItems",
                    "description": "The items of the array property\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the property is required\n"
                },
                "stringItems": {
                    "$ref": "#/types/port:index/BlueprintPropertiesArrayPropsStringItems:BlueprintPropertiesArrayPropsStringItems",
                    "description": "The items of the array property\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the property\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "required"
                    ]
                }
            }
        },
        "port:index/BlueprintPropertiesArrayPropsBooleanItems:BlueprintPropertiesArrayPropsBooleanItems": {
            "properties": {
                "defaults": {
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    },
                    "description": "The default of the items\n"
                }
            },
            "type": "object"
        },
        "port:index/BlueprintPropertiesArrayPropsNumberItems:BlueprintPropertiesArrayPropsNumberItems": {
            "properties": {
                "defaults": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "The default of the items\n"
                }
            },
            "type": "object"
        },
        "port:index/BlueprintPropertiesArrayPropsObjectItems:BlueprintPropertiesArrayPropsObjectItems": {
            "properties": {
                "defaults": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The default of the items\n"
                }
            },
            "type": "object"
        },
        "port:index/BlueprintPropertiesArrayPropsStringItems:BlueprintPropertiesArrayPropsStringItems": {
            "properties": {
                "defaults": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The default of the items\n"
                },
                "format": {
                    "type": "string",
                    "description": "The format of the items\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "The pattern of the string array items\n"
                }
            },
            "type": "object"
        },
        "port:index/BlueprintPropertiesBooleanProps:BlueprintPropertiesBooleanProps": {
            "properties": {
                "default": {
                    "type": "boolean",
                    "description": "The default of the boolean property\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the property\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the property\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the property is required\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the property\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "required"
                    ]
                }
            }
        },
        "port:index/BlueprintPropertiesNumberProps:BlueprintPropertiesNumberProps": {
            "properties": {
                "default": {
                    "type": "number",
                    "description": "The default of the number property\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the property\n"
                },
                "enumColors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The enum colors of the number property\n"
                },
                "enums": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "The enum of the number property\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the property\n"
                },
                "maximum": {
                    "type": "number",
                    "description": "The min of the number property\n"
                },
                "minimum": {
                    "type": "number",
                    "description": "The max of the number property\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the property is required\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the property\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "required"
                    ]
                }
            }
        },
        "port:index/BlueprintPropertiesObjectProps:BlueprintPropertiesObjectProps": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "The default of the object property\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the property\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the property\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the property is required\n"
                },
                "spec": {
                    "type": "string",
                    "description": "The spec of the object property\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the property\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "required"
                    ]
                }
            }
        },
        "port:index/BlueprintPropertiesStringProps:BlueprintPropertiesStringProps": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "The default of the string property\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the property\n"
                },
                "enumColors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The enum colors of the string property\n"
                },
                "enums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The enum of the string property\n"
                },
                "format": {
                    "type": "string",
                    "description": "The format of the string property\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the property\n"
                },
                "maxLength": {
                    "type": "integer",
                    "description": "The max length of the string property\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "The min length of the string property\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "The pattern of the string property\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the property is required\n"
                },
                "spec": {
                    "type": "string",
                    "description": "The spec of the string property\n"
                },
                "specAuthentication": {
                    "$ref": "#/types/port:index/BlueprintPropertiesStringPropsSpecAuthentication:BlueprintPropertiesStringPropsSpecAuthentication",
                    "description": "The spec authentication of the string property\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the property\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "required"
                    ]
                }
            }
        },
        "port:index/BlueprintPropertiesStringPropsSpecAuthentication:BlueprintPropertiesStringPropsSpecAuthentication": {
            "properties": {
                "authorizationUrl": {
                    "type": "string",
                    "description": "The authorizationUrl of the spec authentication\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The clientId of the spec authentication\n"
                },
                "tokenUrl": {
                    "type": "string",
                    "description": "The tokenUrl of the spec authentication\n"
                }
            },
            "type": "object",
            "required": [
                "authorizationUrl",
                "clientId",
                "tokenUrl"
            ]
        },
        "port:index/BlueprintRelations:BlueprintRelations": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the relation\n"
                },
                "many": {
                    "type": "boolean",
                    "description": "The many of the relation\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "The required of the relation\n"
                },
                "target": {
                    "type": "string",
                    "description": "The target of the relation\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the relation\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "many",
                        "required",
                        "target"
                    ]
                }
            }
        },
        "port:index/BlueprintTeamInheritance:BlueprintTeamInheritance": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "The path of the team inheritance\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "port:index/BlueprintWebhookChangelogDestination:BlueprintWebhookChangelogDestination": {
            "properties": {
                "agent": {
                    "type": "boolean",
                    "description": "The agent of the webhook changelog destination\n"
                },
                "url": {
                    "type": "string",
                    "description": "The url of the webhook changelog destination\n"
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "port:index/EntityProperties:EntityProperties": {
            "properties": {
                "arrayProps": {
                    "$ref": "#/types/port:index/EntityPropertiesArrayProps:EntityPropertiesArrayProps",
                    "description": "The array properties of the entity\n"
                },
                "booleanProps": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "The bool properties of the entity\n"
                },
                "numberProps": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    },
                    "description": "The number properties of the entity\n"
                },
                "objectProps": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The object properties of the entity\n"
                },
                "stringProps": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The string properties of the entity\n"
                }
            },
            "type": "object"
        },
        "port:index/EntityPropertiesArrayProps:EntityPropertiesArrayProps": {
            "properties": {
                "booleanItems": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "boolean"
                        }
                    }
                },
                "numberItems": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "number"
                        }
                    }
                },
                "objectItems": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "stringItems": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "type": "object"
        },
        "port:index/EntityRelations:EntityRelations": {
            "properties": {
                "manyRelations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": "The many relation of the entity\n"
                },
                "singleRelations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The single relation of the entity\n"
                }
            },
            "type": "object"
        },
        "port:index/IntegrationKafkaChangelogDestination:IntegrationKafkaChangelogDestination": {
            "type": "object"
        },
        "port:index/IntegrationWebhookChangelogDestination:IntegrationWebhookChangelogDestination": {
            "properties": {
                "agent": {
                    "type": "boolean",
                    "description": "The agent of the webhook changelog destination\n"
                },
                "url": {
                    "type": "string",
                    "description": "The url of the webhook changelog destination\n"
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "port:index/PagePermissionsRead:PagePermissionsRead": {
            "properties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The roles with read permission\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The teams with read permission\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The users with read permission\n"
                }
            },
            "type": "object"
        },
        "port:index/ScorecardFilter:ScorecardFilter": {
            "properties": {
                "combinator": {
                    "type": "string",
                    "description": "The combinator of the filter\n"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The conditions of the filter. Each condition object should be encoded to a string\n"
                }
            },
            "type": "object",
            "required": [
                "combinator",
                "conditions"
            ]
        },
        "port:index/ScorecardLevel:ScorecardLevel": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color of the level\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the level\n"
                }
            },
            "type": "object",
            "required": [
                "color",
                "title"
            ]
        },
        "port:index/ScorecardRule:ScorecardRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the rule\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the rule\n"
                },
                "level": {
                    "type": "string",
                    "description": "The level of the rule\n"
                },
                "query": {
                    "$ref": "#/types/port:index/ScorecardRuleQuery:ScorecardRuleQuery",
                    "description": "The query of the rule\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the rule\n"
                }
            },
            "type": "object",
            "required": [
                "identifier",
                "level",
                "query",
                "title"
            ]
        },
        "port:index/ScorecardRuleQuery:ScorecardRuleQuery": {
            "properties": {
                "combinator": {
                    "type": "string",
                    "description": "The combinator of the query\n"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The conditions of the query. Each condition object should be encoded to a string\n"
                }
            },
            "type": "object",
            "required": [
                "combinator",
                "conditions"
            ]
        },
        "port:index/SystemBlueprintCalculationProperties:SystemBlueprintCalculationProperties": {
            "properties": {
                "calculation": {
                    "type": "string",
                    "description": "The calculation of the calculation property\n"
                },
                "colorized": {
                    "type": "boolean",
                    "description": "The colorized of the calculation property\n"
                },
                "colors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The colors of the calculation property\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the calculation property\n"
                },
                "format": {
                    "type": "string",
                    "description": "The format of the calculation property\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the calculation property\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the calculation property\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the calculation property\n"
                }
            },
            "type": "object",
            "required": [
                "calculation",
                "type"
            ]
        },
        "port:index/SystemBlueprintMirrorProperties:SystemBlueprintMirrorProperties": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "The path of the mirror property\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the mirror property\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "port:index/SystemBlueprintProperties:SystemBlueprintProperties": {
            "properties": {
                "arrayProps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/SystemBlueprintPropertiesArrayProps:SystemBlueprintPropertiesArrayProps"
                    },
                    "description": "The array property of the blueprint\n"
                },
                "booleanProps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/SystemBlueprintPropertiesBooleanProps:SystemBlueprintPropertiesBooleanProps"
                    },
                    "description": "The boolean property of the blueprint\n"
                },
                "numberProps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/SystemBlueprintPropertiesNumberProps:SystemBlueprintPropertiesNumberProps"
                    },
                    "description": "The number property of the blueprint\n"
                },
                "objectProps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/SystemBlueprintPropertiesObjectProps:SystemBlueprintPropertiesObjectProps"
                    },
                    "description": "The object property of the blueprint\n"
                },
                "stringProps": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/SystemBlueprintPropertiesStringProps:SystemBlueprintPropertiesStringProps"
                    },
                    "description": "The string property of the blueprint\n"
                }
            },
            "type": "object"
        },
        "port:index/SystemBlueprintPropertiesArrayProps:SystemBlueprintPropertiesArrayProps": {
            "properties": {
                "booleanItems": {
                    "$ref": "#/types/port:index/SystemBlueprintPropertiesArrayPropsBooleanItems:SystemBlueprintPropertiesArrayPropsBooleanItems",
                    "description": "The items of the array property\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the property\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the property\n"
                },
                "maxItems": {
                    "type": "integer",
                    "description": "The max items of the array property\n"
                },
                "minItems": {
                    "type": "integer",
                    "description": "The min items of the array property\n"
                },
                "numberItems": {
                    "$ref": "#/types/port:index/SystemBlueprintPropertiesArrayPropsNumberItems:SystemBlueprintPropertiesArrayPropsNumberItems",
                    "description": "The items of the array property\n"
                },
                "objectItems": {
                    "$ref": "#/types/port:index/SystemBlueprintPropertiesArrayPropsObjectItems:SystemBlueprintPropertiesArrayPropsObjectItems",
                    "description": "The items of the array property\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the property is required\n"
                },
                "stringItems": {
                    "$ref": "#/types/port:index/SystemBlueprintPropertiesArrayPropsStringItems:SystemBlueprintPropertiesArrayPropsStringItems",
                    "description": "The items of the array property\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the property\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "required"
                    ]
                }
            }
        },
        "port:index/SystemBlueprintPropertiesArrayPropsBooleanItems:SystemBlueprintPropertiesArrayPropsBooleanItems": {
            "properties": {
                "defaults": {
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    },
                    "description": "The default of the items\n"
                }
            },
            "type": "object"
        },
        "port:index/SystemBlueprintPropertiesArrayPropsNumberItems:SystemBlueprintPropertiesArrayPropsNumberItems": {
            "properties": {
                "defaults": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "The default of the items\n"
                }
            },
            "type": "object"
        },
        "port:index/SystemBlueprintPropertiesArrayPropsObjectItems:SystemBlueprintPropertiesArrayPropsObjectItems": {
            "properties": {
                "defaults": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The default of the items\n"
                }
            },
            "type": "object"
        },
        "port:index/SystemBlueprintPropertiesArrayPropsStringItems:SystemBlueprintPropertiesArrayPropsStringItems": {
            "properties": {
                "defaults": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The default of the items\n"
                },
                "format": {
                    "type": "string",
                    "description": "The format of the items\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "The pattern of the string array items\n"
                }
            },
            "type": "object"
        },
        "port:index/SystemBlueprintPropertiesBooleanProps:SystemBlueprintPropertiesBooleanProps": {
            "properties": {
                "default": {
                    "type": "boolean",
                    "description": "The default of the boolean property\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the property\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the property\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the property is required\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the property\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "required"
                    ]
                }
            }
        },
        "port:index/SystemBlueprintPropertiesNumberProps:SystemBlueprintPropertiesNumberProps": {
            "properties": {
                "default": {
                    "type": "number",
                    "description": "The default of the number property\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the property\n"
                },
                "enumColors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The enum colors of the number property\n"
                },
                "enums": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "The enum of the number property\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the property\n"
                },
                "maximum": {
                    "type": "number",
                    "description": "The min of the number property\n"
                },
                "minimum": {
                    "type": "number",
                    "description": "The max of the number property\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the property is required\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the property\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "required"
                    ]
                }
            }
        },
        "port:index/SystemBlueprintPropertiesObjectProps:SystemBlueprintPropertiesObjectProps": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "The default of the object property\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the property\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the property\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the property is required\n"
                },
                "spec": {
                    "type": "string",
                    "description": "The spec of the object property\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the property\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "required"
                    ]
                }
            }
        },
        "port:index/SystemBlueprintPropertiesStringProps:SystemBlueprintPropertiesStringProps": {
            "properties": {
                "default": {
                    "type": "string",
                    "description": "The default of the string property\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the property\n"
                },
                "enumColors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The enum colors of the string property\n"
                },
                "enums": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The enum of the string property\n"
                },
                "format": {
                    "type": "string",
                    "description": "The format of the string property\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the property\n"
                },
                "maxLength": {
                    "type": "integer",
                    "description": "The max length of the string property\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "The min length of the string property\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "The pattern of the string property\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Whether the property is required\n"
                },
                "spec": {
                    "type": "string",
                    "description": "The spec of the string property\n"
                },
                "specAuthentication": {
                    "$ref": "#/types/port:index/SystemBlueprintPropertiesStringPropsSpecAuthentication:SystemBlueprintPropertiesStringPropsSpecAuthentication",
                    "description": "The spec authentication of the string property\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the property\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "required"
                    ]
                }
            }
        },
        "port:index/SystemBlueprintPropertiesStringPropsSpecAuthentication:SystemBlueprintPropertiesStringPropsSpecAuthentication": {
            "properties": {
                "authorizationUrl": {
                    "type": "string",
                    "description": "The authorizationUrl of the spec authentication\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The clientId of the spec authentication\n"
                },
                "tokenUrl": {
                    "type": "string",
                    "description": "The tokenUrl of the spec authentication\n"
                }
            },
            "type": "object",
            "required": [
                "authorizationUrl",
                "clientId",
                "tokenUrl"
            ]
        },
        "port:index/SystemBlueprintRelations:SystemBlueprintRelations": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the relation\n"
                },
                "many": {
                    "type": "boolean",
                    "description": "The many of the relation\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "The required of the relation\n"
                },
                "target": {
                    "type": "string",
                    "description": "The target of the relation\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the relation\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "many",
                        "required",
                        "target"
                    ]
                }
            }
        },
        "port:index/WebhookMapping:WebhookMapping": {
            "properties": {
                "blueprint": {
                    "type": "string",
                    "description": "The blueprint of the mapping\n"
                },
                "entity": {
                    "$ref": "#/types/port:index/WebhookMappingEntity:WebhookMappingEntity",
                    "description": "The entity of the mapping\n"
                },
                "filter": {
                    "type": "string",
                    "description": "The filter of the mapping\n"
                },
                "itemsToParse": {
                    "type": "string",
                    "description": "The items to parser of the mapping\n"
                },
                "operation": {
                    "$ref": "#/types/port:index/WebhookMappingOperation:WebhookMappingOperation",
                    "description": "The operation of the mapping\n"
                }
            },
            "type": "object",
            "required": [
                "blueprint",
                "entity"
            ]
        },
        "port:index/WebhookMappingEntity:WebhookMappingEntity": {
            "properties": {
                "icon": {
                    "type": "string",
                    "description": "The icon of the entity\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the entity\n"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The properties of the entity\n"
                },
                "relations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The relations of the entity\n"
                },
                "team": {
                    "type": "string",
                    "description": "The team of the entity\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "identifier"
            ]
        },
        "port:index/WebhookMappingOperation:WebhookMappingOperation": {
            "properties": {
                "deleteDependents": {
                    "type": "boolean",
                    "description": "Whether to delete dependents entities, only relevant for delete operations\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the operation\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "port:index/WebhookSecurity:WebhookSecurity": {
            "properties": {
                "requestIdentifierPath": {
                    "type": "string",
                    "description": "The request identifier path of the webhook\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The secret of the webhook\n"
                },
                "signatureAlgorithm": {
                    "type": "string",
                    "description": "The signature algorithm of the webhook\n"
                },
                "signatureHeaderName": {
                    "type": "string",
                    "description": "The signature header name of the webhook\n"
                },
                "signaturePrefix": {
                    "type": "string",
                    "description": "The signature prefix of the webhook\n"
                }
            },
            "type": "object"
        },
        "port:index/getSearchEntity:getSearchEntity": {
            "properties": {
                "blueprint": {
                    "type": "string",
                    "description": "The blueprint identifier the entity relates to\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the entity\n"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The creator of the entity\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the entity\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the entity\n"
                },
                "properties": {
                    "$ref": "#/types/port:index/getSearchEntityProperties:getSearchEntityProperties",
                    "description": "The properties of the entity\n"
                },
                "relations": {
                    "$ref": "#/types/port:index/getSearchEntityRelations:getSearchEntityRelations",
                    "description": "The relations of the entity\n"
                },
                "runId": {
                    "type": "string",
                    "description": "The runID of the action run that created the entity\n"
                },
                "scorecards": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/getSearchEntityScorecards:getSearchEntityScorecards"
                    },
                    "description": "The scorecards of the entity\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The teams the entity belongs to\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the entity\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update date of the entity\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "The last updater of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "blueprint",
                "createdAt",
                "createdBy",
                "icon",
                "identifier",
                "properties",
                "relations",
                "runId",
                "scorecards",
                "teams",
                "title",
                "updatedAt",
                "updatedBy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "port:index/getSearchEntityProperties:getSearchEntityProperties": {
            "properties": {
                "arrayProps": {
                    "$ref": "#/types/port:index/getSearchEntityPropertiesArrayProps:getSearchEntityPropertiesArrayProps",
                    "description": "The array properties of the entity\n"
                },
                "booleanProps": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "The bool properties of the entity\n"
                },
                "numberProps": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    },
                    "description": "The number properties of the entity\n"
                },
                "objectProps": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The object properties of the entity\n"
                },
                "stringProps": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The string properties of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "arrayProps",
                "booleanProps",
                "numberProps",
                "objectProps",
                "stringProps"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "port:index/getSearchEntityPropertiesArrayProps:getSearchEntityPropertiesArrayProps": {
            "properties": {
                "booleanItems": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "boolean"
                        }
                    }
                },
                "numberItems": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "number"
                        }
                    }
                },
                "objectItems": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "stringItems": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "booleanItems",
                "numberItems",
                "objectItems",
                "stringItems"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "port:index/getSearchEntityRelations:getSearchEntityRelations": {
            "properties": {
                "manyRelations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": "The many relation of the entity\n"
                },
                "singleRelations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The single relation of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "manyRelations",
                "singleRelations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "port:index/getSearchEntityScorecards:getSearchEntityScorecards": {
            "properties": {
                "level": {
                    "type": "string"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/port:index/getSearchEntityScorecardsRule:getSearchEntityScorecardsRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "level",
                "rules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "port:index/getSearchEntityScorecardsRule:getSearchEntityScorecardsRule": {
            "properties": {
                "identifier": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "identifier",
                "level",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the port-labs package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "baseUrl": {
                "type": "string"
            },
            "clientId": {
                "type": "string",
                "description": "Client ID for Port-labs\n"
            },
            "secret": {
                "type": "string",
                "description": "Client Secret for Port-labs\n",
                "secret": true
            },
            "token": {
                "type": "string",
                "description": "Token for Port-labs\n",
                "secret": true
            }
        },
        "inputProperties": {
            "baseUrl": {
                "type": "string"
            },
            "clientId": {
                "type": "string",
                "description": "Client ID for Port-labs\n"
            },
            "secret": {
                "type": "string",
                "description": "Client Secret for Port-labs\n",
                "secret": true
            },
            "token": {
                "type": "string",
                "description": "Token for Port-labs\n",
                "secret": true
            }
        }
    },
    "resources": {
        "port:index/action:Action": {
            "description": "Docs for the Action resource can be found [here](https://docs.getport.io/create-self-service-experiences/).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as port from \"@pulumi/port\";\n\nconst createMicroservice = new port.index.Port_action(\"createMicroservice\", {\n    title: \"Create Microservice\",\n    identifier: \"create-microservice\",\n    icon: \"Terraform\",\n    selfServiceTrigger: {\n        operation: \"CREATE\",\n        blueprintIdentifier: port_blueprint.microservice.identifier,\n        userProperties: {\n            stringProps: {\n                myStringIdentifier: {\n                    title: \"My String Identifier\",\n                    required: true,\n                    format: \"entity\",\n                    blueprint: port_blueprint.parent.identifier,\n                    dataset: {\n                        combinator: \"and\",\n                        rules: [{\n                            property: \"$title\",\n                            operator: \"contains\",\n                            value: {\n                                jqQuery: \"\\\"specificValue\\\"\",\n                            },\n                        }],\n                    },\n                    sort: {\n                        property: \"$updatedAt\",\n                        order: \"DESC\",\n                    },\n                },\n            },\n            numberProps: {\n                myNumberIdentifier: {\n                    title: \"My Number Identifier\",\n                    required: true,\n                    maximum: 100,\n                    minimum: 0,\n                },\n            },\n            booleanProps: {\n                myBooleanIdentifier: {\n                    title: \"My Boolean Identifier\",\n                    required: true,\n                },\n            },\n            objectProps: {\n                myObjectIdentifier: {\n                    title: \"My Object Identifier\",\n                    required: true,\n                },\n            },\n            arrayProps: {\n                myArrayIdentifier: {\n                    title: \"My Array Identifier\",\n                    required: true,\n                    stringItems: {\n                        format: \"entity\",\n                        blueprint: port_blueprint.parent.identifier,\n                        dataset: JSON.stringify({\n                            combinator: \"and\",\n                            rules: [{\n                                property: \"$title\",\n                                operator: \"contains\",\n                                value: \"specificValue\",\n                            }],\n                        }),\n                    },\n                    sort: {\n                        property: \"$updatedAt\",\n                        order: \"DESC\",\n                    },\n                },\n            },\n        },\n    },\n    kafkaMethod: {\n        payload: JSON.stringify({\n            runId: \"{{.run.id}}\",\n        }),\n    },\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_port as port\n\ncreate_microservice = port.index.Port_action(\"createMicroservice\",\n    title=Create Microservice,\n    identifier=create-microservice,\n    icon=Terraform,\n    self_service_trigger={\n        operation: CREATE,\n        blueprintIdentifier: port_blueprint.microservice.identifier,\n        userProperties: {\n            stringProps: {\n                myStringIdentifier: {\n                    title: My String Identifier,\n                    required: True,\n                    format: entity,\n                    blueprint: port_blueprint.parent.identifier,\n                    dataset: {\n                        combinator: and,\n                        rules: [{\n                            property: $title,\n                            operator: contains,\n                            value: {\n                                jqQuery: \"specificValue\",\n                            },\n                        }],\n                    },\n                    sort: {\n                        property: $updatedAt,\n                        order: DESC,\n                    },\n                },\n            },\n            numberProps: {\n                myNumberIdentifier: {\n                    title: My Number Identifier,\n                    required: True,\n                    maximum: 100,\n                    minimum: 0,\n                },\n            },\n            booleanProps: {\n                myBooleanIdentifier: {\n                    title: My Boolean Identifier,\n                    required: True,\n                },\n            },\n            objectProps: {\n                myObjectIdentifier: {\n                    title: My Object Identifier,\n                    required: True,\n                },\n            },\n            arrayProps: {\n                myArrayIdentifier: {\n                    title: My Array Identifier,\n                    required: True,\n                    stringItems: {\n                        format: entity,\n                        blueprint: port_blueprint.parent.identifier,\n                        dataset: json.dumps({\n                            combinator: and,\n                            rules: [{\n                                property: $title,\n                                operator: contains,\n                                value: specificValue,\n                            }],\n                        }),\n                    },\n                    sort: {\n                        property: $updatedAt,\n                        order: DESC,\n                    },\n                },\n            },\n        },\n    },\n    kafka_method={\n        payload: json.dumps({\n            runId: {{.run.id}},\n        }),\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Port = Pulumi.Port;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var createMicroservice = new Port.Index.Port_action(\"createMicroservice\", new()\n    {\n        Title = \"Create Microservice\",\n        Identifier = \"create-microservice\",\n        Icon = \"Terraform\",\n        SelfServiceTrigger = \n        {\n            { \"operation\", \"CREATE\" },\n            { \"blueprintIdentifier\", port_blueprint.Microservice.Identifier },\n            { \"userProperties\", \n            {\n                { \"stringProps\", \n                {\n                    { \"myStringIdentifier\", \n                    {\n                        { \"title\", \"My String Identifier\" },\n                        { \"required\", true },\n                        { \"format\", \"entity\" },\n                        { \"blueprint\", port_blueprint.Parent.Identifier },\n                        { \"dataset\", \n                        {\n                            { \"combinator\", \"and\" },\n                            { \"rules\", new[]\n                            {\n                                \n                                {\n                                    { \"property\", \"$title\" },\n                                    { \"operator\", \"contains\" },\n                                    { \"value\", \n                                    {\n                                        { \"jqQuery\", \"\\\"specificValue\\\"\" },\n                                    } },\n                                },\n                            } },\n                        } },\n                        { \"sort\", \n                        {\n                            { \"property\", \"$updatedAt\" },\n                            { \"order\", \"DESC\" },\n                        } },\n                    } },\n                } },\n                { \"numberProps\", \n                {\n                    { \"myNumberIdentifier\", \n                    {\n                        { \"title\", \"My Number Identifier\" },\n                        { \"required\", true },\n                        { \"maximum\", 100 },\n                        { \"minimum\", 0 },\n                    } },\n                } },\n                { \"booleanProps\", \n                {\n                    { \"myBooleanIdentifier\", \n                    {\n                        { \"title\", \"My Boolean Identifier\" },\n                        { \"required\", true },\n                    } },\n                } },\n                { \"objectProps\", \n                {\n                    { \"myObjectIdentifier\", \n                    {\n                        { \"title\", \"My Object Identifier\" },\n                        { \"required\", true },\n                    } },\n                } },\n                { \"arrayProps\", \n                {\n                    { \"myArrayIdentifier\", \n                    {\n                        { \"title\", \"My Array Identifier\" },\n                        { \"required\", true },\n                        { \"stringItems\", \n                        {\n                            { \"format\", \"entity\" },\n                            { \"blueprint\", port_blueprint.Parent.Identifier },\n                            { \"dataset\", JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"combinator\"] = \"and\",\n                                [\"rules\"] = new[]\n                                {\n                                    new Dictionary\u003cstring, object?\u003e\n                                    {\n                                        [\"property\"] = \"$title\",\n                                        [\"operator\"] = \"contains\",\n                                        [\"value\"] = \"specificValue\",\n                                    },\n                                },\n                            }) },\n                        } },\n                        { \"sort\", \n                        {\n                            { \"property\", \"$updatedAt\" },\n                            { \"order\", \"DESC\" },\n                        } },\n                    } },\n                } },\n            } },\n        },\n        KafkaMethod = \n        {\n            { \"payload\", JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                [\"runId\"] = \"{{.run.id}}\",\n            }) },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/port-labs/pulumi-port/sdk/v2/go/port\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\n_, err := port.NewPort_action(ctx, \"createMicroservice\", \u0026port.Port_actionArgs{\nTitle: \"Create Microservice\",\nIdentifier: \"create-microservice\",\nIcon: \"Terraform\",\nSelfServiceTrigger: map[string]interface{}{\n\"operation\": \"CREATE\",\n\"blueprintIdentifier\": port_blueprint.Microservice.Identifier,\n\"userProperties\": map[string]interface{}{\n\"stringProps\": map[string]interface{}{\n\"myStringIdentifier\": map[string]interface{}{\n\"title\": \"My String Identifier\",\n\"required\": true,\n\"format\": \"entity\",\n\"blueprint\": port_blueprint.Parent.Identifier,\n\"dataset\": map[string]interface{}{\n\"combinator\": \"and\",\n\"rules\": []map[string]interface{}{\nmap[string]interface{}{\n\"property\": \"$title\",\n\"operator\": \"contains\",\n\"value\": map[string]interface{}{\n\"jqQuery\": \"\\\"specificValue\\\"\",\n},\n},\n},\n},\n\"sort\": map[string]interface{}{\n\"property\": \"$updatedAt\",\n\"order\": \"DESC\",\n},\n},\n},\n\"numberProps\": map[string]interface{}{\n\"myNumberIdentifier\": map[string]interface{}{\n\"title\": \"My Number Identifier\",\n\"required\": true,\n\"maximum\": 100,\n\"minimum\": 0,\n},\n},\n\"booleanProps\": map[string]interface{}{\n\"myBooleanIdentifier\": map[string]interface{}{\n\"title\": \"My Boolean Identifier\",\n\"required\": true,\n},\n},\n\"objectProps\": map[string]interface{}{\n\"myObjectIdentifier\": map[string]interface{}{\n\"title\": \"My Object Identifier\",\n\"required\": true,\n},\n},\n\"arrayProps\": map[string]interface{}{\n\"myArrayIdentifier\": map[string]interface{}{\n\"title\": \"My Array Identifier\",\n\"required\": true,\n\"stringItems\": map[string]interface{}{\n\"format\": \"entity\",\n\"blueprint\": port_blueprint.Parent.Identifier,\n\"dataset\": %!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n},\n\"sort\": map[string]interface{}{\n\"property\": \"$updatedAt\",\n\"order\": \"DESC\",\n},\n},\n},\n},\n},\nKafkaMethod: map[string]interface{}{\n\"payload\": %!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n},\n})\nif err != nil {\nreturn err\n}\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.port.port_action;\nimport com.pulumi.port.Port_actionArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var createMicroservice = new Port_action(\"createMicroservice\", Port_actionArgs.builder()\n            .title(\"Create Microservice\")\n            .identifier(\"create-microservice\")\n            .icon(\"Terraform\")\n            .selfServiceTrigger(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .kafkaMethod(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  createMicroservice:\n    type: port:port_action\n    properties:\n      title: Create Microservice\n      identifier: create-microservice\n      icon: Terraform\n      selfServiceTrigger:\n        operation: CREATE\n        blueprintIdentifier: ${port_blueprint.microservice.identifier}\n        userProperties:\n          stringProps:\n            myStringIdentifier:\n              title: My String Identifier\n              required: true\n              format: entity\n              blueprint: ${port_blueprint.parent.identifier}\n              dataset:\n                combinator: and\n                rules:\n                  - property: $title\n                    operator: contains\n                    value:\n                      jqQuery: '\"specificValue\"'\n              sort:\n                property: $updatedAt\n                order: DESC\n          numberProps:\n            myNumberIdentifier:\n              title: My Number Identifier\n              required: true\n              maximum: 100\n              minimum: 0\n          booleanProps:\n            myBooleanIdentifier:\n              title: My Boolean Identifier\n              required: true\n          objectProps:\n            myObjectIdentifier:\n              title: My Object Identifier\n              required: true\n          arrayProps:\n            myArrayIdentifier:\n              title: My Array Identifier\n              required: true\n              stringItems:\n                format: entity\n                blueprint: ${port_blueprint.parent.identifier}\n                dataset:\n                  fn::toJSON:\n                    combinator: and\n                    rules:\n                      - property: $title\n                        operator: contains\n                        value: specificValue\n              sort:\n                property: $updatedAt\n                order: DESC\n      kafkaMethod:\n        payload:\n          fn::toJSON:\n            runId: '{{.run.id}}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\n### With Automation Trigger\n\nPort allows setting an automation trigger to an action, for executing an action based on event occurred to an entity in Port.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as port from \"@pulumi/port\";\n\nconst deleteTemporaryMicroservice = new port.index.Port_action(\"deleteTemporaryMicroservice\", {\n    title: \"Delete Temporary Microservice\",\n    identifier: \"delete-temp-microservice\",\n    icon: \"Terraform\",\n    automationTrigger: {\n        timerPropertyExpiredEvent: {\n            blueprintIdentifier: port_blueprint.microservice.identifier,\n            propertyIdentifier: \"ttl\",\n        },\n    },\n    kafkaMethod: {\n        payload: JSON.stringify({\n            runId: \"{{.run.id}}\",\n        }),\n    },\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_port as port\n\ndelete_temporary_microservice = port.index.Port_action(\"deleteTemporaryMicroservice\",\n    title=Delete Temporary Microservice,\n    identifier=delete-temp-microservice,\n    icon=Terraform,\n    automation_trigger={\n        timerPropertyExpiredEvent: {\n            blueprintIdentifier: port_blueprint.microservice.identifier,\n            propertyIdentifier: ttl,\n        },\n    },\n    kafka_method={\n        payload: json.dumps({\n            runId: {{.run.id}},\n        }),\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Port = Pulumi.Port;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var deleteTemporaryMicroservice = new Port.Index.Port_action(\"deleteTemporaryMicroservice\", new()\n    {\n        Title = \"Delete Temporary Microservice\",\n        Identifier = \"delete-temp-microservice\",\n        Icon = \"Terraform\",\n        AutomationTrigger = \n        {\n            { \"timerPropertyExpiredEvent\", \n            {\n                { \"blueprintIdentifier\", port_blueprint.Microservice.Identifier },\n                { \"propertyIdentifier\", \"ttl\" },\n            } },\n        },\n        KafkaMethod = \n        {\n            { \"payload\", JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                [\"runId\"] = \"{{.run.id}}\",\n            }) },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/port-labs/pulumi-port/sdk/v2/go/port\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\n_, err := port.NewPort_action(ctx, \"deleteTemporaryMicroservice\", \u0026port.Port_actionArgs{\nTitle: \"Delete Temporary Microservice\",\nIdentifier: \"delete-temp-microservice\",\nIcon: \"Terraform\",\nAutomationTrigger: map[string]interface{}{\n\"timerPropertyExpiredEvent\": map[string]interface{}{\n\"blueprintIdentifier\": port_blueprint.Microservice.Identifier,\n\"propertyIdentifier\": \"ttl\",\n},\n},\nKafkaMethod: map[string]interface{}{\n\"payload\": %!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n},\n})\nif err != nil {\nreturn err\n}\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.port.port_action;\nimport com.pulumi.port.Port_actionArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var deleteTemporaryMicroservice = new Port_action(\"deleteTemporaryMicroservice\", Port_actionArgs.builder()\n            .title(\"Delete Temporary Microservice\")\n            .identifier(\"delete-temp-microservice\")\n            .icon(\"Terraform\")\n            .automationTrigger(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .kafkaMethod(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  deleteTemporaryMicroservice:\n    type: port:port_action\n    properties:\n      title: Delete Temporary Microservice\n      identifier: delete-temp-microservice\n      icon: Terraform\n      automationTrigger:\n        timerPropertyExpiredEvent:\n          blueprintIdentifier: ${port_blueprint.microservice.identifier}\n          propertyIdentifier: ttl\n      kafkaMethod:\n        payload:\n          fn::toJSON:\n            runId: '{{.run.id}}'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\n",
            "properties": {
                "approvalEmailNotification": {
                    "$ref": "#/types/port:index/ActionApprovalEmailNotification:ActionApprovalEmailNotification",
                    "description": "The email notification of the approval\n"
                },
                "approvalWebhookNotification": {
                    "$ref": "#/types/port:index/ActionApprovalWebhookNotification:ActionApprovalWebhookNotification",
                    "description": "The webhook notification of the approval\n"
                },
                "automationTrigger": {
                    "$ref": "#/types/port:index/ActionAutomationTrigger:ActionAutomationTrigger",
                    "description": "Automation trigger for the action\n"
                },
                "azureMethod": {
                    "$ref": "#/types/port:index/ActionAzureMethod:ActionAzureMethod",
                    "description": "Azure DevOps invocation method\n"
                },
                "blueprint": {
                    "type": "string",
                    "description": "The blueprint identifier the action relates to\n",
                    "deprecationMessage": "Action is not attached to blueprint anymore. This value is ignored"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "githubMethod": {
                    "$ref": "#/types/port:index/ActionGithubMethod:ActionGithubMethod",
                    "description": "GitHub invocation method\n"
                },
                "gitlabMethod": {
                    "$ref": "#/types/port:index/ActionGitlabMethod:ActionGitlabMethod",
                    "description": "Gitlab invocation method\n"
                },
                "icon": {
                    "type": "string",
                    "description": "Icon\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier\n"
                },
                "kafkaMethod": {
                    "$ref": "#/types/port:index/ActionKafkaMethod:ActionKafkaMethod",
                    "description": "Kafka invocation method\n"
                },
                "publish": {
                    "type": "boolean",
                    "description": "Publish action\n"
                },
                "requiredApproval": {
                    "type": "string",
                    "description": "Require approval before invoking the action. Can be one of \"true\", \"false\", \"ANY\" or \"ALL\"\n"
                },
                "selfServiceTrigger": {
                    "$ref": "#/types/port:index/ActionSelfServiceTrigger:ActionSelfServiceTrigger",
                    "description": "Self service trigger for the action. Note: you can define only one of `order_properties` and `steps`\n"
                },
                "title": {
                    "type": "string",
                    "description": "Title\n"
                },
                "upsertEntityMethod": {
                    "$ref": "#/types/port:index/ActionUpsertEntityMethod:ActionUpsertEntityMethod",
                    "description": "Upsert Entity invocation method\n"
                },
                "webhookMethod": {
                    "$ref": "#/types/port:index/ActionWebhookMethod:ActionWebhookMethod",
                    "description": "Webhook invocation method\n"
                }
            },
            "required": [
                "identifier",
                "publish"
            ],
            "inputProperties": {
                "approvalEmailNotification": {
                    "$ref": "#/types/port:index/ActionApprovalEmailNotification:ActionApprovalEmailNotification",
                    "description": "The email notification of the approval\n"
                },
                "approvalWebhookNotification": {
                    "$ref": "#/types/port:index/ActionApprovalWebhookNotification:ActionApprovalWebhookNotification",
                    "description": "The webhook notification of the approval\n"
                },
                "automationTrigger": {
                    "$ref": "#/types/port:index/ActionAutomationTrigger:ActionAutomationTrigger",
                    "description": "Automation trigger for the action\n"
                },
                "azureMethod": {
                    "$ref": "#/types/port:index/ActionAzureMethod:ActionAzureMethod",
                    "description": "Azure DevOps invocation method\n"
                },
                "blueprint": {
                    "type": "string",
                    "description": "The blueprint identifier the action relates to\n",
                    "deprecationMessage": "Action is not attached to blueprint anymore. This value is ignored"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "githubMethod": {
                    "$ref": "#/types/port:index/ActionGithubMethod:ActionGithubMethod",
                    "description": "GitHub invocation method\n"
                },
                "gitlabMethod": {
                    "$ref": "#/types/port:index/ActionGitlabMethod:ActionGitlabMethod",
                    "description": "Gitlab invocation method\n"
                },
                "icon": {
                    "type": "string",
                    "description": "Icon\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier\n"
                },
                "kafkaMethod": {
                    "$ref": "#/types/port:index/ActionKafkaMethod:ActionKafkaMethod",
                    "description": "Kafka invocation method\n"
                },
                "publish": {
                    "type": "boolean",
                    "description": "Publish action\n"
                },
                "requiredApproval": {
                    "type": "string",
                    "description": "Require approval before invoking the action. Can be one of \"true\", \"false\", \"ANY\" or \"ALL\"\n"
                },
                "selfServiceTrigger": {
                    "$ref": "#/types/port:index/ActionSelfServiceTrigger:ActionSelfServiceTrigger",
                    "description": "Self service trigger for the action. Note: you can define only one of `order_properties` and `steps`\n"
                },
                "title": {
                    "type": "string",
                    "description": "Title\n"
                },
                "upsertEntityMethod": {
                    "$ref": "#/types/port:index/ActionUpsertEntityMethod:ActionUpsertEntityMethod",
                    "description": "Upsert Entity invocation method\n"
                },
                "webhookMethod": {
                    "$ref": "#/types/port:index/ActionWebhookMethod:ActionWebhookMethod",
                    "description": "Webhook invocation method\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Action resources.\n",
                "properties": {
                    "approvalEmailNotification": {
                        "$ref": "#/types/port:index/ActionApprovalEmailNotification:ActionApprovalEmailNotification",
                        "description": "The email notification of the approval\n"
                    },
                    "approvalWebhookNotification": {
                        "$ref": "#/types/port:index/ActionApprovalWebhookNotification:ActionApprovalWebhookNotification",
                        "description": "The webhook notification of the approval\n"
                    },
                    "automationTrigger": {
                        "$ref": "#/types/port:index/ActionAutomationTrigger:ActionAutomationTrigger",
                        "description": "Automation trigger for the action\n"
                    },
                    "azureMethod": {
                        "$ref": "#/types/port:index/ActionAzureMethod:ActionAzureMethod",
                        "description": "Azure DevOps invocation method\n"
                    },
                    "blueprint": {
                        "type": "string",
                        "description": "The blueprint identifier the action relates to\n",
                        "deprecationMessage": "Action is not attached to blueprint anymore. This value is ignored"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "githubMethod": {
                        "$ref": "#/types/port:index/ActionGithubMethod:ActionGithubMethod",
                        "description": "GitHub invocation method\n"
                    },
                    "gitlabMethod": {
                        "$ref": "#/types/port:index/ActionGitlabMethod:ActionGitlabMethod",
                        "description": "Gitlab invocation method\n"
                    },
                    "icon": {
                        "type": "string",
                        "description": "Icon\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier\n"
                    },
                    "kafkaMethod": {
                        "$ref": "#/types/port:index/ActionKafkaMethod:ActionKafkaMethod",
                        "description": "Kafka invocation method\n"
                    },
                    "publish": {
                        "type": "boolean",
                        "description": "Publish action\n"
                    },
                    "requiredApproval": {
                        "type": "string",
                        "description": "Require approval before invoking the action. Can be one of \"true\", \"false\", \"ANY\" or \"ALL\"\n"
                    },
                    "selfServiceTrigger": {
                        "$ref": "#/types/port:index/ActionSelfServiceTrigger:ActionSelfServiceTrigger",
                        "description": "Self service trigger for the action. Note: you can define only one of `order_properties` and `steps`\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title\n"
                    },
                    "upsertEntityMethod": {
                        "$ref": "#/types/port:index/ActionUpsertEntityMethod:ActionUpsertEntityMethod",
                        "description": "Upsert Entity invocation method\n"
                    },
                    "webhookMethod": {
                        "$ref": "#/types/port:index/ActionWebhookMethod:ActionWebhookMethod",
                        "description": "Webhook invocation method\n"
                    }
                },
                "type": "object"
            }
        },
        "port:index/actionPermissions:ActionPermissions": {
            "properties": {
                "actionIdentifier": {
                    "type": "string",
                    "description": "The ID of the action\n"
                },
                "blueprintIdentifier": {
                    "type": "string",
                    "description": "The ID of the blueprint\n",
                    "deprecationMessage": "Action is not attached to blueprint anymore. This value is ignored"
                },
                "permissions": {
                    "$ref": "#/types/port:index/ActionPermissionsPermissions:ActionPermissionsPermissions",
                    "description": "The permissions for the action\n"
                }
            },
            "required": [
                "actionIdentifier",
                "permissions"
            ],
            "inputProperties": {
                "actionIdentifier": {
                    "type": "string",
                    "description": "The ID of the action\n"
                },
                "blueprintIdentifier": {
                    "type": "string",
                    "description": "The ID of the blueprint\n",
                    "deprecationMessage": "Action is not attached to blueprint anymore. This value is ignored"
                },
                "permissions": {
                    "$ref": "#/types/port:index/ActionPermissionsPermissions:ActionPermissionsPermissions",
                    "description": "The permissions for the action\n"
                }
            },
            "requiredInputs": [
                "actionIdentifier",
                "permissions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActionPermissions resources.\n",
                "properties": {
                    "actionIdentifier": {
                        "type": "string",
                        "description": "The ID of the action\n"
                    },
                    "blueprintIdentifier": {
                        "type": "string",
                        "description": "The ID of the blueprint\n",
                        "deprecationMessage": "Action is not attached to blueprint anymore. This value is ignored"
                    },
                    "permissions": {
                        "$ref": "#/types/port:index/ActionPermissionsPermissions:ActionPermissionsPermissions",
                        "description": "The permissions for the action\n"
                    }
                },
                "type": "object"
            }
        },
        "port:index/aggregationProperties:AggregationProperties": {
            "description": "This resource allows you to manage aggregation properties of a blueprint.\n\nSee the [Port documentation](https://docs.getport.io/build-your-software-catalog/customize-integrations/configure-data-model/setup-blueprint/properties/aggregation-property/) for more information about aggregation properties.\n\n\nSupported Methods:\n\n- count_entities - Count the entities of the target blueprint\n- average_entities - Average the entities of the target blueprint by time periods\n- average_by_property - Calculate the average by property value of the target entities\n- aggregate_by_property - Calculate the aggregate by property value of the target entities, such as sum, min, max, median\n\n## Example Usage\n\nCreate a parent blueprint with a child blueprint and an aggregation property to count the parent kids:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as port from \"@pulumi/port\";\n\nconst parentBlueprint = new port.index.Port_blueprint(\"parentBlueprint\", {\n    title: \"Parent Blueprint\",\n    icon: \"Terraform\",\n    identifier: \"parent\",\n    description: \"\",\n    properties: {\n        numberProps: {\n            age: {\n                title: \"Age\",\n            },\n        },\n    },\n});\nconst childBlueprint = new port.index.Port_blueprint(\"childBlueprint\", {\n    title: \"Child Blueprint\",\n    icon: \"Terraform\",\n    identifier: \"child\",\n    description: \"\",\n    properties: {\n        numberProps: {\n            age: {\n                title: \"Age\",\n            },\n        },\n    },\n    relations: {\n        parent: {\n            title: \"Parent\",\n            target: parentBlueprint.identifier,\n        },\n    },\n});\nconst parentAggregationProperties = new port.index.Port_aggregation_properties(\"parentAggregationProperties\", {\n    blueprintIdentifier: parentBlueprint.identifier,\n    properties: {\n        count_kids: {\n            targetBlueprintIdentifier: childBlueprint.identifier,\n            title: \"Count Kids\",\n            icon: \"Terraform\",\n            description: \"Count Kids\",\n            method: {\n                countEntities: true,\n            },\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_port as port\n\nparent_blueprint = port.index.Port_blueprint(\"parentBlueprint\",\n    title=Parent Blueprint,\n    icon=Terraform,\n    identifier=parent,\n    description=,\n    properties={\n        numberProps: {\n            age: {\n                title: Age,\n            },\n        },\n    })\nchild_blueprint = port.index.Port_blueprint(\"childBlueprint\",\n    title=Child Blueprint,\n    icon=Terraform,\n    identifier=child,\n    description=,\n    properties={\n        numberProps: {\n            age: {\n                title: Age,\n            },\n        },\n    },\n    relations={\n        parent: {\n            title: Parent,\n            target: parent_blueprint.identifier,\n        },\n    })\nparent_aggregation_properties = port.index.Port_aggregation_properties(\"parentAggregationProperties\",\n    blueprint_identifier=parent_blueprint.identifier,\n    properties={\n        count_kids: {\n            targetBlueprintIdentifier: child_blueprint.identifier,\n            title: Count Kids,\n            icon: Terraform,\n            description: Count Kids,\n            method: {\n                countEntities: True,\n            },\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Port = Pulumi.Port;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var parentBlueprint = new Port.Index.Port_blueprint(\"parentBlueprint\", new()\n    {\n        Title = \"Parent Blueprint\",\n        Icon = \"Terraform\",\n        Identifier = \"parent\",\n        Description = \"\",\n        Properties = \n        {\n            { \"numberProps\", \n            {\n                { \"age\", \n                {\n                    { \"title\", \"Age\" },\n                } },\n            } },\n        },\n    });\n\n    var childBlueprint = new Port.Index.Port_blueprint(\"childBlueprint\", new()\n    {\n        Title = \"Child Blueprint\",\n        Icon = \"Terraform\",\n        Identifier = \"child\",\n        Description = \"\",\n        Properties = \n        {\n            { \"numberProps\", \n            {\n                { \"age\", \n                {\n                    { \"title\", \"Age\" },\n                } },\n            } },\n        },\n        Relations = \n        {\n            { \"parent\", \n            {\n                { \"title\", \"Parent\" },\n                { \"target\", parentBlueprint.Identifier },\n            } },\n        },\n    });\n\n    var parentAggregationProperties = new Port.Index.Port_aggregation_properties(\"parentAggregationProperties\", new()\n    {\n        BlueprintIdentifier = parentBlueprint.Identifier,\n        Properties = \n        {\n            { \"count_kids\", \n            {\n                { \"targetBlueprintIdentifier\", childBlueprint.Identifier },\n                { \"title\", \"Count Kids\" },\n                { \"icon\", \"Terraform\" },\n                { \"description\", \"Count Kids\" },\n                { \"method\", \n                {\n                    { \"countEntities\", true },\n                } },\n            } },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/port-labs/pulumi-port/sdk/v2/go/port\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tparentBlueprint, err := port.NewPort_blueprint(ctx, \"parentBlueprint\", \u0026port.Port_blueprintArgs{\n\t\t\tTitle:       \"Parent Blueprint\",\n\t\t\tIcon:        \"Terraform\",\n\t\t\tIdentifier:  \"parent\",\n\t\t\tDescription: \"\",\n\t\t\tProperties: map[string]interface{}{\n\t\t\t\t\"numberProps\": map[string]interface{}{\n\t\t\t\t\t\"age\": map[string]interface{}{\n\t\t\t\t\t\t\"title\": \"Age\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tchildBlueprint, err := port.NewPort_blueprint(ctx, \"childBlueprint\", \u0026port.Port_blueprintArgs{\n\t\t\tTitle:       \"Child Blueprint\",\n\t\t\tIcon:        \"Terraform\",\n\t\t\tIdentifier:  \"child\",\n\t\t\tDescription: \"\",\n\t\t\tProperties: map[string]interface{}{\n\t\t\t\t\"numberProps\": map[string]interface{}{\n\t\t\t\t\t\"age\": map[string]interface{}{\n\t\t\t\t\t\t\"title\": \"Age\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tRelations: map[string]interface{}{\n\t\t\t\t\"parent\": map[string]interface{}{\n\t\t\t\t\t\"title\":  \"Parent\",\n\t\t\t\t\t\"target\": parentBlueprint.Identifier,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = port.NewPort_aggregation_properties(ctx, \"parentAggregationProperties\", \u0026port.Port_aggregation_propertiesArgs{\n\t\t\tBlueprintIdentifier: parentBlueprint.Identifier,\n\t\t\tProperties: map[string]interface{}{\n\t\t\t\t\"count_kids\": map[string]interface{}{\n\t\t\t\t\t\"targetBlueprintIdentifier\": childBlueprint.Identifier,\n\t\t\t\t\t\"title\":                     \"Count Kids\",\n\t\t\t\t\t\"icon\":                      \"Terraform\",\n\t\t\t\t\t\"description\":               \"Count Kids\",\n\t\t\t\t\t\"method\": map[string]interface{}{\n\t\t\t\t\t\t\"countEntities\": true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.port.port_blueprint;\nimport com.pulumi.port.Port_blueprintArgs;\nimport com.pulumi.port.port_aggregation_properties;\nimport com.pulumi.port.Port_aggregation_propertiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var parentBlueprint = new Port_blueprint(\"parentBlueprint\", Port_blueprintArgs.builder()\n            .title(\"Parent Blueprint\")\n            .icon(\"Terraform\")\n            .identifier(\"parent\")\n            .description(\"\")\n            .properties(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n        var childBlueprint = new Port_blueprint(\"childBlueprint\", Port_blueprintArgs.builder()\n            .title(\"Child Blueprint\")\n            .icon(\"Terraform\")\n            .identifier(\"child\")\n            .description(\"\")\n            .properties(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .relations(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n        var parentAggregationProperties = new Port_aggregation_properties(\"parentAggregationProperties\", Port_aggregation_propertiesArgs.builder()\n            .blueprintIdentifier(parentBlueprint.identifier())\n            .properties(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  parentBlueprint:\n    type: port:port_blueprint\n    properties:\n      title: Parent Blueprint\n      icon: Terraform\n      identifier: parent\n      description: \"\"\n      properties:\n        numberProps:\n          age:\n            title: Age\n  childBlueprint:\n    type: port:port_blueprint\n    properties:\n      title: Child Blueprint\n      icon: Terraform\n      identifier: child\n      description: \"\"\n      properties:\n        numberProps:\n          age:\n            title: Age\n      relations:\n        parent:\n          title: Parent\n          target: ${parentBlueprint.identifier}\n  parentAggregationProperties:\n    type: port:port_aggregation_properties\n    properties:\n      blueprintIdentifier: ${parentBlueprint.identifier}\n      properties:\n        count_kids:\n          targetBlueprintIdentifier: ${childBlueprint.identifier}\n          title: Count Kids\n          icon: Terraform\n          description: Count Kids\n          method:\n            countEntities: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreate a parent blueprint with a child blueprint and an aggregation property to calculate the average avg of the parent kids age:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as port from \"@pulumi/port\";\n\nconst parentBlueprint = new port.index.Port_blueprint(\"parentBlueprint\", {\n    title: \"Parent Blueprint\",\n    icon: \"Terraform\",\n    identifier: \"parent\",\n    description: \"\",\n    properties: {\n        numberProps: {\n            age: {\n                title: \"Age\",\n            },\n        },\n    },\n});\nconst childBlueprint = new port.index.Port_blueprint(\"childBlueprint\", {\n    title: \"Child Blueprint\",\n    icon: \"Terraform\",\n    identifier: \"child\",\n    description: \"\",\n    properties: {\n        numberProps: {\n            age: {\n                title: \"Age\",\n            },\n        },\n    },\n    relations: {\n        parent: {\n            title: \"Parent\",\n            target: parentBlueprint.identifier,\n        },\n    },\n});\nconst parentAggregationProperties = new port.index.Port_aggregation_properties(\"parentAggregationProperties\", {\n    blueprintIdentifier: parentBlueprint.identifier,\n    properties: {\n        averageKidsAge: {\n            targetBlueprintIdentifier: childBlueprint.identifier,\n            title: \"Average Kids Age\",\n            icon: \"Terraform\",\n            description: \"Average Kids Age\",\n            method: {\n                averageByProperty: {\n                    averageOf: \"total\",\n                    measureTimeBy: \"$createdAt\",\n                    property: \"age\",\n                },\n            },\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_port as port\n\nparent_blueprint = port.index.Port_blueprint(\"parentBlueprint\",\n    title=Parent Blueprint,\n    icon=Terraform,\n    identifier=parent,\n    description=,\n    properties={\n        numberProps: {\n            age: {\n                title: Age,\n            },\n        },\n    })\nchild_blueprint = port.index.Port_blueprint(\"childBlueprint\",\n    title=Child Blueprint,\n    icon=Terraform,\n    identifier=child,\n    description=,\n    properties={\n        numberProps: {\n            age: {\n                title: Age,\n            },\n        },\n    },\n    relations={\n        parent: {\n            title: Parent,\n            target: parent_blueprint.identifier,\n        },\n    })\nparent_aggregation_properties = port.index.Port_aggregation_properties(\"parentAggregationProperties\",\n    blueprint_identifier=parent_blueprint.identifier,\n    properties={\n        averageKidsAge: {\n            targetBlueprintIdentifier: child_blueprint.identifier,\n            title: Average Kids Age,\n            icon: Terraform,\n            description: Average Kids Age,\n            method: {\n                averageByProperty: {\n                    averageOf: total,\n                    measureTimeBy: $createdAt,\n                    property: age,\n                },\n            },\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Port = Pulumi.Port;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var parentBlueprint = new Port.Index.Port_blueprint(\"parentBlueprint\", new()\n    {\n        Title = \"Parent Blueprint\",\n        Icon = \"Terraform\",\n        Identifier = \"parent\",\n        Description = \"\",\n        Properties = \n        {\n            { \"numberProps\", \n            {\n                { \"age\", \n                {\n                    { \"title\", \"Age\" },\n                } },\n            } },\n        },\n    });\n\n    var childBlueprint = new Port.Index.Port_blueprint(\"childBlueprint\", new()\n    {\n        Title = \"Child Blueprint\",\n        Icon = \"Terraform\",\n        Identifier = \"child\",\n        Description = \"\",\n        Properties = \n        {\n            { \"numberProps\", \n            {\n                { \"age\", \n                {\n                    { \"title\", \"Age\" },\n                } },\n            } },\n        },\n        Relations = \n        {\n            { \"parent\", \n            {\n                { \"title\", \"Parent\" },\n                { \"target\", parentBlueprint.Identifier },\n            } },\n        },\n    });\n\n    var parentAggregationProperties = new Port.Index.Port_aggregation_properties(\"parentAggregationProperties\", new()\n    {\n        BlueprintIdentifier = parentBlueprint.Identifier,\n        Properties = \n        {\n            { \"averageKidsAge\", \n            {\n                { \"targetBlueprintIdentifier\", childBlueprint.Identifier },\n                { \"title\", \"Average Kids Age\" },\n                { \"icon\", \"Terraform\" },\n                { \"description\", \"Average Kids Age\" },\n                { \"method\", \n                {\n                    { \"averageByProperty\", \n                    {\n                        { \"averageOf\", \"total\" },\n                        { \"measureTimeBy\", \"$createdAt\" },\n                        { \"property\", \"age\" },\n                    } },\n                } },\n            } },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/port-labs/pulumi-port/sdk/v2/go/port\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tparentBlueprint, err := port.NewPort_blueprint(ctx, \"parentBlueprint\", \u0026port.Port_blueprintArgs{\n\t\t\tTitle:       \"Parent Blueprint\",\n\t\t\tIcon:        \"Terraform\",\n\t\t\tIdentifier:  \"parent\",\n\t\t\tDescription: \"\",\n\t\t\tProperties: map[string]interface{}{\n\t\t\t\t\"numberProps\": map[string]interface{}{\n\t\t\t\t\t\"age\": map[string]interface{}{\n\t\t\t\t\t\t\"title\": \"Age\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tchildBlueprint, err := port.NewPort_blueprint(ctx, \"childBlueprint\", \u0026port.Port_blueprintArgs{\n\t\t\tTitle:       \"Child Blueprint\",\n\t\t\tIcon:        \"Terraform\",\n\t\t\tIdentifier:  \"child\",\n\t\t\tDescription: \"\",\n\t\t\tProperties: map[string]interface{}{\n\t\t\t\t\"numberProps\": map[string]interface{}{\n\t\t\t\t\t\"age\": map[string]interface{}{\n\t\t\t\t\t\t\"title\": \"Age\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tRelations: map[string]interface{}{\n\t\t\t\t\"parent\": map[string]interface{}{\n\t\t\t\t\t\"title\":  \"Parent\",\n\t\t\t\t\t\"target\": parentBlueprint.Identifier,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = port.NewPort_aggregation_properties(ctx, \"parentAggregationProperties\", \u0026port.Port_aggregation_propertiesArgs{\n\t\t\tBlueprintIdentifier: parentBlueprint.Identifier,\n\t\t\tProperties: map[string]interface{}{\n\t\t\t\t\"averageKidsAge\": map[string]interface{}{\n\t\t\t\t\t\"targetBlueprintIdentifier\": childBlueprint.Identifier,\n\t\t\t\t\t\"title\":                     \"Average Kids Age\",\n\t\t\t\t\t\"icon\":                      \"Terraform\",\n\t\t\t\t\t\"description\":               \"Average Kids Age\",\n\t\t\t\t\t\"method\": map[string]interface{}{\n\t\t\t\t\t\t\"averageByProperty\": map[string]interface{}{\n\t\t\t\t\t\t\t\"averageOf\":     \"total\",\n\t\t\t\t\t\t\t\"measureTimeBy\": \"$createdAt\",\n\t\t\t\t\t\t\t\"property\":      \"age\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.port.port_blueprint;\nimport com.pulumi.port.Port_blueprintArgs;\nimport com.pulumi.port.port_aggregation_properties;\nimport com.pulumi.port.Port_aggregation_propertiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var parentBlueprint = new Port_blueprint(\"parentBlueprint\", Port_blueprintArgs.builder()\n            .title(\"Parent Blueprint\")\n            .icon(\"Terraform\")\n            .identifier(\"parent\")\n            .description(\"\")\n            .properties(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n        var childBlueprint = new Port_blueprint(\"childBlueprint\", Port_blueprintArgs.builder()\n            .title(\"Child Blueprint\")\n            .icon(\"Terraform\")\n            .identifier(\"child\")\n            .description(\"\")\n            .properties(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .relations(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n        var parentAggregationProperties = new Port_aggregation_properties(\"parentAggregationProperties\", Port_aggregation_propertiesArgs.builder()\n            .blueprintIdentifier(parentBlueprint.identifier())\n            .properties(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  parentBlueprint:\n    type: port:port_blueprint\n    properties:\n      title: Parent Blueprint\n      icon: Terraform\n      identifier: parent\n      description: \"\"\n      properties:\n        numberProps:\n          age:\n            title: Age\n  childBlueprint:\n    type: port:port_blueprint\n    properties:\n      title: Child Blueprint\n      icon: Terraform\n      identifier: child\n      description: \"\"\n      properties:\n        numberProps:\n          age:\n            title: Age\n      relations:\n        parent:\n          title: Parent\n          target: ${parentBlueprint.identifier}\n  parentAggregationProperties:\n    type: port:port_aggregation_properties\n    properties:\n      blueprintIdentifier: ${parentBlueprint.identifier}\n      properties:\n        averageKidsAge:\n          targetBlueprintIdentifier: ${childBlueprint.identifier}\n          title: Average Kids Age\n          icon: Terraform\n          description: Average Kids Age\n          method:\n            averageByProperty:\n              averageOf: total\n              measureTimeBy: $createdAt\n              property: age\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreate a repository blueprint and a pull request blueprint and an aggregation property to calculate the average of pull requests created per day:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as port from \"@pulumi/port\";\n\nconst repositoryBlueprint = new port.index.Port_blueprint(\"repositoryBlueprint\", {\n    title: \"Repository Blueprint\",\n    icon: \"Terraform\",\n    identifier: \"repository\",\n    description: \"\",\n});\nconst pullRequestBlueprint = new port.index.Port_blueprint(\"pullRequestBlueprint\", {\n    title: \"Pull Request Blueprint\",\n    icon: \"Terraform\",\n    identifier: \"pull_request\",\n    description: \"\",\n    properties: {\n        stringProps: {\n            status: {\n                title: \"Status\",\n            },\n        },\n    },\n    relations: {\n        repository: {\n            title: \"Repository\",\n            target: repositoryBlueprint.identifier,\n        },\n    },\n});\nconst repositoryAggregationProperties = new port.index.Port_aggregation_properties(\"repositoryAggregationProperties\", {\n    blueprintIdentifier: repositoryBlueprint.identifier,\n    properties: {\n        pull_requests_per_day: {\n            targetBlueprintIdentifier: pullRequestBlueprint.identifier,\n            title: \"Pull Requests Per Day\",\n            icon: \"Terraform\",\n            description: \"Pull Requests Per Day\",\n            method: {\n                averageEntities: {\n                    averageOf: \"day\",\n                    measureTimeBy: \"$createdAt\",\n                },\n            },\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_port as port\n\nrepository_blueprint = port.index.Port_blueprint(\"repositoryBlueprint\",\n    title=Repository Blueprint,\n    icon=Terraform,\n    identifier=repository,\n    description=)\npull_request_blueprint = port.index.Port_blueprint(\"pullRequestBlueprint\",\n    title=Pull Request Blueprint,\n    icon=Terraform,\n    identifier=pull_request,\n    description=,\n    properties={\n        stringProps: {\n            status: {\n                title: Status,\n            },\n        },\n    },\n    relations={\n        repository: {\n            title: Repository,\n            target: repository_blueprint.identifier,\n        },\n    })\nrepository_aggregation_properties = port.index.Port_aggregation_properties(\"repositoryAggregationProperties\",\n    blueprint_identifier=repository_blueprint.identifier,\n    properties={\n        pull_requests_per_day: {\n            targetBlueprintIdentifier: pull_request_blueprint.identifier,\n            title: Pull Requests Per Day,\n            icon: Terraform,\n            description: Pull Requests Per Day,\n            method: {\n                averageEntities: {\n                    averageOf: day,\n                    measureTimeBy: $createdAt,\n                },\n            },\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Port = Pulumi.Port;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repositoryBlueprint = new Port.Index.Port_blueprint(\"repositoryBlueprint\", new()\n    {\n        Title = \"Repository Blueprint\",\n        Icon = \"Terraform\",\n        Identifier = \"repository\",\n        Description = \"\",\n    });\n\n    var pullRequestBlueprint = new Port.Index.Port_blueprint(\"pullRequestBlueprint\", new()\n    {\n        Title = \"Pull Request Blueprint\",\n        Icon = \"Terraform\",\n        Identifier = \"pull_request\",\n        Description = \"\",\n        Properties = \n        {\n            { \"stringProps\", \n            {\n                { \"status\", \n                {\n                    { \"title\", \"Status\" },\n                } },\n            } },\n        },\n        Relations = \n        {\n            { \"repository\", \n            {\n                { \"title\", \"Repository\" },\n                { \"target\", repositoryBlueprint.Identifier },\n            } },\n        },\n    });\n\n    var repositoryAggregationProperties = new Port.Index.Port_aggregation_properties(\"repositoryAggregationProperties\", new()\n    {\n        BlueprintIdentifier = repositoryBlueprint.Identifier,\n        Properties = \n        {\n            { \"pull_requests_per_day\", \n            {\n                { \"targetBlueprintIdentifier\", pullRequestBlueprint.Identifier },\n                { \"title\", \"Pull Requests Per Day\" },\n                { \"icon\", \"Terraform\" },\n                { \"description\", \"Pull Requests Per Day\" },\n                { \"method\", \n                {\n                    { \"averageEntities\", \n                    {\n                        { \"averageOf\", \"day\" },\n                        { \"measureTimeBy\", \"$createdAt\" },\n                    } },\n                } },\n            } },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/port-labs/pulumi-port/sdk/v2/go/port\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepositoryBlueprint, err := port.NewPort_blueprint(ctx, \"repositoryBlueprint\", \u0026port.Port_blueprintArgs{\n\t\t\tTitle:       \"Repository Blueprint\",\n\t\t\tIcon:        \"Terraform\",\n\t\t\tIdentifier:  \"repository\",\n\t\t\tDescription: \"\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpullRequestBlueprint, err := port.NewPort_blueprint(ctx, \"pullRequestBlueprint\", \u0026port.Port_blueprintArgs{\n\t\t\tTitle:       \"Pull Request Blueprint\",\n\t\t\tIcon:        \"Terraform\",\n\t\t\tIdentifier:  \"pull_request\",\n\t\t\tDescription: \"\",\n\t\t\tProperties: map[string]interface{}{\n\t\t\t\t\"stringProps\": map[string]interface{}{\n\t\t\t\t\t\"status\": map[string]interface{}{\n\t\t\t\t\t\t\"title\": \"Status\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tRelations: map[string]interface{}{\n\t\t\t\t\"repository\": map[string]interface{}{\n\t\t\t\t\t\"title\":  \"Repository\",\n\t\t\t\t\t\"target\": repositoryBlueprint.Identifier,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = port.NewPort_aggregation_properties(ctx, \"repositoryAggregationProperties\", \u0026port.Port_aggregation_propertiesArgs{\n\t\t\tBlueprintIdentifier: repositoryBlueprint.Identifier,\n\t\t\tProperties: map[string]interface{}{\n\t\t\t\t\"pull_requests_per_day\": map[string]interface{}{\n\t\t\t\t\t\"targetBlueprintIdentifier\": pullRequestBlueprint.Identifier,\n\t\t\t\t\t\"title\":                     \"Pull Requests Per Day\",\n\t\t\t\t\t\"icon\":                      \"Terraform\",\n\t\t\t\t\t\"description\":               \"Pull Requests Per Day\",\n\t\t\t\t\t\"method\": map[string]interface{}{\n\t\t\t\t\t\t\"averageEntities\": map[string]interface{}{\n\t\t\t\t\t\t\t\"averageOf\":     \"day\",\n\t\t\t\t\t\t\t\"measureTimeBy\": \"$createdAt\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.port.port_blueprint;\nimport com.pulumi.port.Port_blueprintArgs;\nimport com.pulumi.port.port_aggregation_properties;\nimport com.pulumi.port.Port_aggregation_propertiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var repositoryBlueprint = new Port_blueprint(\"repositoryBlueprint\", Port_blueprintArgs.builder()\n            .title(\"Repository Blueprint\")\n            .icon(\"Terraform\")\n            .identifier(\"repository\")\n            .description(\"\")\n            .build());\n\n        var pullRequestBlueprint = new Port_blueprint(\"pullRequestBlueprint\", Port_blueprintArgs.builder()\n            .title(\"Pull Request Blueprint\")\n            .icon(\"Terraform\")\n            .identifier(\"pull_request\")\n            .description(\"\")\n            .properties(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .relations(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n        var repositoryAggregationProperties = new Port_aggregation_properties(\"repositoryAggregationProperties\", Port_aggregation_propertiesArgs.builder()\n            .blueprintIdentifier(repositoryBlueprint.identifier())\n            .properties(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  repositoryBlueprint:\n    type: port:port_blueprint\n    properties:\n      title: Repository Blueprint\n      icon: Terraform\n      identifier: repository\n      description: \"\"\n  pullRequestBlueprint:\n    type: port:port_blueprint\n    properties:\n      title: Pull Request Blueprint\n      icon: Terraform\n      identifier: pull_request\n      description: \"\"\n      properties:\n        stringProps:\n          status:\n            title: Status\n      relations:\n        repository:\n          title: Repository\n          target: ${repositoryBlueprint.identifier}\n  repositoryAggregationProperties:\n    type: port:port_aggregation_properties\n    properties:\n      blueprintIdentifier: ${repositoryBlueprint.identifier}\n      properties:\n        pull_requests_per_day:\n          targetBlueprintIdentifier: ${pullRequestBlueprint.identifier}\n          title: Pull Requests Per Day\n          icon: Terraform\n          description: Pull Requests Per Day\n          method:\n            averageEntities:\n              averageOf: day\n              measureTimeBy: $createdAt\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nCreate a repository blueprint and a pull request blueprint and an aggregation property to calculate the average of fix pull request per month:\n\nTo do that we will add a query to the aggregation property to filter only pull requests with fixed title:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as port from \"@pulumi/port\";\n\nconst repositoryBlueprint = new port.index.Port_blueprint(\"repositoryBlueprint\", {\n    title: \"Repository Blueprint\",\n    icon: \"Terraform\",\n    identifier: \"repository\",\n    description: \"\",\n});\nconst pullRequestBlueprint = new port.index.Port_blueprint(\"pullRequestBlueprint\", {\n    title: \"Pull Request Blueprint\",\n    icon: \"Terraform\",\n    identifier: \"pull_request\",\n    description: \"\",\n    properties: {\n        stringProps: {\n            status: {\n                title: \"Status\",\n            },\n        },\n    },\n    relations: {\n        repository: {\n            title: \"Repository\",\n            target: repositoryBlueprint.identifier,\n        },\n    },\n});\nconst repositoryAggregationProperties = new port.index.Port_aggregation_properties(\"repositoryAggregationProperties\", {\n    blueprintIdentifier: repositoryBlueprint.identifier,\n    properties: {\n        fix_pull_requests_count: {\n            targetBlueprintIdentifier: pullRequestBlueprint.identifier,\n            title: \"Pull Requests Per Day\",\n            icon: \"Terraform\",\n            description: \"Pull Requests Per Day\",\n            method: {\n                averageEntities: {\n                    averageOf: \"month\",\n                    measureTimeBy: \"$createdAt\",\n                },\n            },\n            query: JSON.stringify({\n                combinator: \"and\",\n                rules: [{\n                    property: \"$title\",\n                    operator: \"ContainsAny\",\n                    value: [\n                        \"fix\",\n                        \"fixed\",\n                        \"fixing\",\n                        \"Fix\",\n                    ],\n                }],\n            }),\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_port as port\n\nrepository_blueprint = port.index.Port_blueprint(\"repositoryBlueprint\",\n    title=Repository Blueprint,\n    icon=Terraform,\n    identifier=repository,\n    description=)\npull_request_blueprint = port.index.Port_blueprint(\"pullRequestBlueprint\",\n    title=Pull Request Blueprint,\n    icon=Terraform,\n    identifier=pull_request,\n    description=,\n    properties={\n        stringProps: {\n            status: {\n                title: Status,\n            },\n        },\n    },\n    relations={\n        repository: {\n            title: Repository,\n            target: repository_blueprint.identifier,\n        },\n    })\nrepository_aggregation_properties = port.index.Port_aggregation_properties(\"repositoryAggregationProperties\",\n    blueprint_identifier=repository_blueprint.identifier,\n    properties={\n        fix_pull_requests_count: {\n            targetBlueprintIdentifier: pull_request_blueprint.identifier,\n            title: Pull Requests Per Day,\n            icon: Terraform,\n            description: Pull Requests Per Day,\n            method: {\n                averageEntities: {\n                    averageOf: month,\n                    measureTimeBy: $createdAt,\n                },\n            },\n            query: json.dumps({\n                combinator: and,\n                rules: [{\n                    property: $title,\n                    operator: ContainsAny,\n                    value: [\n                        fix,\n                        fixed,\n                        fixing,\n                        Fix,\n                    ],\n                }],\n            }),\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Port = Pulumi.Port;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repositoryBlueprint = new Port.Index.Port_blueprint(\"repositoryBlueprint\", new()\n    {\n        Title = \"Repository Blueprint\",\n        Icon = \"Terraform\",\n        Identifier = \"repository\",\n        Description = \"\",\n    });\n\n    var pullRequestBlueprint = new Port.Index.Port_blueprint(\"pullRequestBlueprint\", new()\n    {\n        Title = \"Pull Request Blueprint\",\n        Icon = \"Terraform\",\n        Identifier = \"pull_request\",\n        Description = \"\",\n        Properties = \n        {\n            { \"stringProps\", \n            {\n                { \"status\", \n                {\n                    { \"title\", \"Status\" },\n                } },\n            } },\n        },\n        Relations = \n        {\n            { \"repository\", \n            {\n                { \"title\", \"Repository\" },\n                { \"target\", repositoryBlueprint.Identifier },\n            } },\n        },\n    });\n\n    var repositoryAggregationProperties = new Port.Index.Port_aggregation_properties(\"repositoryAggregationProperties\", new()\n    {\n        BlueprintIdentifier = repositoryBlueprint.Identifier,\n        Properties = \n        {\n            { \"fix_pull_requests_count\", \n            {\n                { \"targetBlueprintIdentifier\", pullRequestBlueprint.Identifier },\n                { \"title\", \"Pull Requests Per Day\" },\n                { \"icon\", \"Terraform\" },\n                { \"description\", \"Pull Requests Per Day\" },\n                { \"method\", \n                {\n                    { \"averageEntities\", \n                    {\n                        { \"averageOf\", \"month\" },\n                        { \"measureTimeBy\", \"$createdAt\" },\n                    } },\n                } },\n                { \"query\", JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"combinator\"] = \"and\",\n                    [\"rules\"] = new[]\n                    {\n                        new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"property\"] = \"$title\",\n                            [\"operator\"] = \"ContainsAny\",\n                            [\"value\"] = new[]\n                            {\n                                \"fix\",\n                                \"fixed\",\n                                \"fixing\",\n                                \"Fix\",\n                            },\n                        },\n                    },\n                }) },\n            } },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/port-labs/pulumi-port/sdk/v2/go/port\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nrepositoryBlueprint, err := port.NewPort_blueprint(ctx, \"repositoryBlueprint\", \u0026port.Port_blueprintArgs{\nTitle: \"Repository Blueprint\",\nIcon: \"Terraform\",\nIdentifier: \"repository\",\nDescription: \"\",\n})\nif err != nil {\nreturn err\n}\npullRequestBlueprint, err := port.NewPort_blueprint(ctx, \"pullRequestBlueprint\", \u0026port.Port_blueprintArgs{\nTitle: \"Pull Request Blueprint\",\nIcon: \"Terraform\",\nIdentifier: \"pull_request\",\nDescription: \"\",\nProperties: map[string]interface{}{\n\"stringProps\": map[string]interface{}{\n\"status\": map[string]interface{}{\n\"title\": \"Status\",\n},\n},\n},\nRelations: map[string]interface{}{\n\"repository\": map[string]interface{}{\n\"title\": \"Repository\",\n\"target\": repositoryBlueprint.Identifier,\n},\n},\n})\nif err != nil {\nreturn err\n}\n_, err = port.NewPort_aggregation_properties(ctx, \"repositoryAggregationProperties\", \u0026port.Port_aggregation_propertiesArgs{\nBlueprintIdentifier: repositoryBlueprint.Identifier,\nProperties: map[string]interface{}{\n\"fix_pull_requests_count\": map[string]interface{}{\n\"targetBlueprintIdentifier\": pullRequestBlueprint.Identifier,\n\"title\": \"Pull Requests Per Day\",\n\"icon\": \"Terraform\",\n\"description\": \"Pull Requests Per Day\",\n\"method\": map[string]interface{}{\n\"averageEntities\": map[string]interface{}{\n\"averageOf\": \"month\",\n\"measureTimeBy\": \"$createdAt\",\n},\n},\n\"query\": %!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n},\n},\n})\nif err != nil {\nreturn err\n}\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.port.port_blueprint;\nimport com.pulumi.port.Port_blueprintArgs;\nimport com.pulumi.port.port_aggregation_properties;\nimport com.pulumi.port.Port_aggregation_propertiesArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var repositoryBlueprint = new Port_blueprint(\"repositoryBlueprint\", Port_blueprintArgs.builder()\n            .title(\"Repository Blueprint\")\n            .icon(\"Terraform\")\n            .identifier(\"repository\")\n            .description(\"\")\n            .build());\n\n        var pullRequestBlueprint = new Port_blueprint(\"pullRequestBlueprint\", Port_blueprintArgs.builder()\n            .title(\"Pull Request Blueprint\")\n            .icon(\"Terraform\")\n            .identifier(\"pull_request\")\n            .description(\"\")\n            .properties(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .relations(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n        var repositoryAggregationProperties = new Port_aggregation_properties(\"repositoryAggregationProperties\", Port_aggregation_propertiesArgs.builder()\n            .blueprintIdentifier(repositoryBlueprint.identifier())\n            .properties(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  repositoryBlueprint:\n    type: port:port_blueprint\n    properties:\n      title: Repository Blueprint\n      icon: Terraform\n      identifier: repository\n      description: \"\"\n  pullRequestBlueprint:\n    type: port:port_blueprint\n    properties:\n      title: Pull Request Blueprint\n      icon: Terraform\n      identifier: pull_request\n      description: \"\"\n      properties:\n        stringProps:\n          status:\n            title: Status\n      relations:\n        repository:\n          title: Repository\n          target: ${repositoryBlueprint.identifier}\n  repositoryAggregationProperties:\n    type: port:port_aggregation_properties\n    properties:\n      blueprintIdentifier: ${repositoryBlueprint.identifier}\n      properties:\n        fix_pull_requests_count:\n          targetBlueprintIdentifier: ${pullRequestBlueprint.identifier}\n          title: Pull Requests Per Day\n          icon: Terraform\n          description: Pull Requests Per Day\n          method:\n            averageEntities:\n              averageOf: month\n              measureTimeBy: $createdAt\n          query:\n            fn::toJSON:\n              combinator: and\n              rules:\n                - property: $title\n                  operator: ContainsAny\n                  value:\n                    - fix\n                    - fixed\n                    - fixing\n                    - Fix\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\nCreate multiple aggregation properties in one resource:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as port from \"@pulumi/port\";\n\nconst repositoryBlueprint = new port.index.Port_blueprint(\"repositoryBlueprint\", {\n    title: \"Repository Blueprint\",\n    icon: \"Terraform\",\n    identifier: \"repository\",\n    description: \"\",\n});\nconst pullRequestBlueprint = new port.index.Port_blueprint(\"pullRequestBlueprint\", {\n    title: \"Pull Request Blueprint\",\n    icon: \"Terraform\",\n    identifier: \"pull_request\",\n    description: \"\",\n    properties: {\n        stringProps: {\n            status: {\n                title: \"Status\",\n            },\n        },\n    },\n    relations: {\n        repository: {\n            title: \"Repository\",\n            target: repositoryBlueprint.identifier,\n        },\n    },\n});\nconst repositoryAggregationProperties = new port.index.Port_aggregation_properties(\"repositoryAggregationProperties\", {\n    blueprintIdentifier: repositoryBlueprint.identifier,\n    properties: {\n        pull_requests_per_day: {\n            targetBlueprintIdentifier: pullRequestBlueprint.identifier,\n            title: \"Pull Requests Per Day\",\n            icon: \"Terraform\",\n            description: \"Pull Requests Per Day\",\n            method: {\n                averageEntities: {\n                    averageOf: \"day\",\n                    measureTimeBy: \"$createdAt\",\n                },\n            },\n        },\n        overall_pull_requests_count: {\n            targetBlueprintIdentifier: pullRequestBlueprint.identifier,\n            title: \"Overall Pull Requests Count\",\n            icon: \"Terraform\",\n            description: \"Overall Pull Requests Count\",\n            method: {\n                countEntities: true,\n            },\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_port as port\n\nrepository_blueprint = port.index.Port_blueprint(\"repositoryBlueprint\",\n    title=Repository Blueprint,\n    icon=Terraform,\n    identifier=repository,\n    description=)\npull_request_blueprint = port.index.Port_blueprint(\"pullRequestBlueprint\",\n    title=Pull Request Blueprint,\n    icon=Terraform,\n    identifier=pull_request,\n    description=,\n    properties={\n        stringProps: {\n            status: {\n                title: Status,\n            },\n        },\n    },\n    relations={\n        repository: {\n            title: Repository,\n            target: repository_blueprint.identifier,\n        },\n    })\nrepository_aggregation_properties = port.index.Port_aggregation_properties(\"repositoryAggregationProperties\",\n    blueprint_identifier=repository_blueprint.identifier,\n    properties={\n        pull_requests_per_day: {\n            targetBlueprintIdentifier: pull_request_blueprint.identifier,\n            title: Pull Requests Per Day,\n            icon: Terraform,\n            description: Pull Requests Per Day,\n            method: {\n                averageEntities: {\n                    averageOf: day,\n                    measureTimeBy: $createdAt,\n                },\n            },\n        },\n        overall_pull_requests_count: {\n            targetBlueprintIdentifier: pull_request_blueprint.identifier,\n            title: Overall Pull Requests Count,\n            icon: Terraform,\n            description: Overall Pull Requests Count,\n            method: {\n                countEntities: True,\n            },\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Port = Pulumi.Port;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repositoryBlueprint = new Port.Index.Port_blueprint(\"repositoryBlueprint\", new()\n    {\n        Title = \"Repository Blueprint\",\n        Icon = \"Terraform\",\n        Identifier = \"repository\",\n        Description = \"\",\n    });\n\n    var pullRequestBlueprint = new Port.Index.Port_blueprint(\"pullRequestBlueprint\", new()\n    {\n        Title = \"Pull Request Blueprint\",\n        Icon = \"Terraform\",\n        Identifier = \"pull_request\",\n        Description = \"\",\n        Properties = \n        {\n            { \"stringProps\", \n            {\n                { \"status\", \n                {\n                    { \"title\", \"Status\" },\n                } },\n            } },\n        },\n        Relations = \n        {\n            { \"repository\", \n            {\n                { \"title\", \"Repository\" },\n                { \"target\", repositoryBlueprint.Identifier },\n            } },\n        },\n    });\n\n    var repositoryAggregationProperties = new Port.Index.Port_aggregation_properties(\"repositoryAggregationProperties\", new()\n    {\n        BlueprintIdentifier = repositoryBlueprint.Identifier,\n        Properties = \n        {\n            { \"pull_requests_per_day\", \n            {\n                { \"targetBlueprintIdentifier\", pullRequestBlueprint.Identifier },\n                { \"title\", \"Pull Requests Per Day\" },\n                { \"icon\", \"Terraform\" },\n                { \"description\", \"Pull Requests Per Day\" },\n                { \"method\", \n                {\n                    { \"averageEntities\", \n                    {\n                        { \"averageOf\", \"day\" },\n                        { \"measureTimeBy\", \"$createdAt\" },\n                    } },\n                } },\n            } },\n            { \"overall_pull_requests_count\", \n            {\n                { \"targetBlueprintIdentifier\", pullRequestBlueprint.Identifier },\n                { \"title\", \"Overall Pull Requests Count\" },\n                { \"icon\", \"Terraform\" },\n                { \"description\", \"Overall Pull Requests Count\" },\n                { \"method\", \n                {\n                    { \"countEntities\", true },\n                } },\n            } },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/port-labs/pulumi-port/sdk/v2/go/port\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepositoryBlueprint, err := port.NewPort_blueprint(ctx, \"repositoryBlueprint\", \u0026port.Port_blueprintArgs{\n\t\t\tTitle:       \"Repository Blueprint\",\n\t\t\tIcon:        \"Terraform\",\n\t\t\tIdentifier:  \"repository\",\n\t\t\tDescription: \"\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpullRequestBlueprint, err := port.NewPort_blueprint(ctx, \"pullRequestBlueprint\", \u0026port.Port_blueprintArgs{\n\t\t\tTitle:       \"Pull Request Blueprint\",\n\t\t\tIcon:        \"Terraform\",\n\t\t\tIdentifier:  \"pull_request\",\n\t\t\tDescription: \"\",\n\t\t\tProperties: map[string]interface{}{\n\t\t\t\t\"stringProps\": map[string]interface{}{\n\t\t\t\t\t\"status\": map[string]interface{}{\n\t\t\t\t\t\t\"title\": \"Status\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tRelations: map[string]interface{}{\n\t\t\t\t\"repository\": map[string]interface{}{\n\t\t\t\t\t\"title\":  \"Repository\",\n\t\t\t\t\t\"target\": repositoryBlueprint.Identifier,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = port.NewPort_aggregation_properties(ctx, \"repositoryAggregationProperties\", \u0026port.Port_aggregation_propertiesArgs{\n\t\t\tBlueprintIdentifier: repositoryBlueprint.Identifier,\n\t\t\tProperties: map[string]interface{}{\n\t\t\t\t\"pull_requests_per_day\": map[string]interface{}{\n\t\t\t\t\t\"targetBlueprintIdentifier\": pullRequestBlueprint.Identifier,\n\t\t\t\t\t\"title\":                     \"Pull Requests Per Day\",\n\t\t\t\t\t\"icon\":                      \"Terraform\",\n\t\t\t\t\t\"description\":               \"Pull Requests Per Day\",\n\t\t\t\t\t\"method\": map[string]interface{}{\n\t\t\t\t\t\t\"averageEntities\": map[string]interface{}{\n\t\t\t\t\t\t\t\"averageOf\":     \"day\",\n\t\t\t\t\t\t\t\"measureTimeBy\": \"$createdAt\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\"overall_pull_requests_count\": map[string]interface{}{\n\t\t\t\t\t\"targetBlueprintIdentifier\": pullRequestBlueprint.Identifier,\n\t\t\t\t\t\"title\":                     \"Overall Pull Requests Count\",\n\t\t\t\t\t\"icon\":                      \"Terraform\",\n\t\t\t\t\t\"description\":               \"Overall Pull Requests Count\",\n\t\t\t\t\t\"method\": map[string]interface{}{\n\t\t\t\t\t\t\"countEntities\": true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.port.port_blueprint;\nimport com.pulumi.port.Port_blueprintArgs;\nimport com.pulumi.port.port_aggregation_properties;\nimport com.pulumi.port.Port_aggregation_propertiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var repositoryBlueprint = new Port_blueprint(\"repositoryBlueprint\", Port_blueprintArgs.builder()\n            .title(\"Repository Blueprint\")\n            .icon(\"Terraform\")\n            .identifier(\"repository\")\n            .description(\"\")\n            .build());\n\n        var pullRequestBlueprint = new Port_blueprint(\"pullRequestBlueprint\", Port_blueprintArgs.builder()\n            .title(\"Pull Request Blueprint\")\n            .icon(\"Terraform\")\n            .identifier(\"pull_request\")\n            .description(\"\")\n            .properties(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .relations(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n        var repositoryAggregationProperties = new Port_aggregation_properties(\"repositoryAggregationProperties\", Port_aggregation_propertiesArgs.builder()\n            .blueprintIdentifier(repositoryBlueprint.identifier())\n            .properties(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  repositoryBlueprint:\n    type: port:port_blueprint\n    properties:\n      title: Repository Blueprint\n      icon: Terraform\n      identifier: repository\n      description: \"\"\n  pullRequestBlueprint:\n    type: port:port_blueprint\n    properties:\n      title: Pull Request Blueprint\n      icon: Terraform\n      identifier: pull_request\n      description: \"\"\n      properties:\n        stringProps:\n          status:\n            title: Status\n      relations:\n        repository:\n          title: Repository\n          target: ${repositoryBlueprint.identifier}\n  repositoryAggregationProperties:\n    type: port:port_aggregation_properties\n    properties:\n      blueprintIdentifier: ${repositoryBlueprint.identifier}\n      properties:\n        pull_requests_per_day:\n          targetBlueprintIdentifier: ${pullRequestBlueprint.identifier}\n          title: Pull Requests Per Day\n          icon: Terraform\n          description: Pull Requests Per Day\n          method:\n            averageEntities:\n              averageOf: day\n              measureTimeBy: $createdAt\n        overall_pull_requests_count:\n          targetBlueprintIdentifier: ${pullRequestBlueprint.identifier}\n          title: Overall Pull Requests Count\n          icon: Terraform\n          description: Overall Pull Requests Count\n          method:\n            countEntities: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "blueprintIdentifier": {
                    "type": "string",
                    "description": "The identifier of the blueprint the aggregation property will be added to\n"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/AggregationPropertiesProperties:AggregationPropertiesProperties"
                    },
                    "description": "The aggregation property of the blueprint\n"
                }
            },
            "required": [
                "blueprintIdentifier",
                "properties"
            ],
            "inputProperties": {
                "blueprintIdentifier": {
                    "type": "string",
                    "description": "The identifier of the blueprint the aggregation property will be added to\n"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/AggregationPropertiesProperties:AggregationPropertiesProperties"
                    },
                    "description": "The aggregation property of the blueprint\n"
                }
            },
            "requiredInputs": [
                "blueprintIdentifier",
                "properties"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AggregationProperties resources.\n",
                "properties": {
                    "blueprintIdentifier": {
                        "type": "string",
                        "description": "The identifier of the blueprint the aggregation property will be added to\n"
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/port:index/AggregationPropertiesProperties:AggregationPropertiesProperties"
                        },
                        "description": "The aggregation property of the blueprint\n"
                    }
                },
                "type": "object"
            }
        },
        "port:index/blueprint:Blueprint": {
            "properties": {
                "calculationProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/BlueprintCalculationProperties:BlueprintCalculationProperties"
                    },
                    "description": "The calculation properties of the blueprint\n"
                },
                "createCatalogPage": {
                    "type": "boolean",
                    "description": "This flag is only relevant for blueprint creation, by default if not set, a catalog page will be created for the blueprint\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the blueprint\n"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The creator of the blueprint\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the blueprint\n"
                },
                "forceDeleteEntities": {
                    "type": "boolean"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the blueprint\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the blueprint\n"
                },
                "kafkaChangelogDestination": {
                    "$ref": "#/types/port:index/BlueprintKafkaChangelogDestination:BlueprintKafkaChangelogDestination",
                    "description": "The changelog destination of the blueprint\n"
                },
                "mirrorProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/BlueprintMirrorProperties:BlueprintMirrorProperties"
                    },
                    "description": "The mirror properties of the blueprint\n"
                },
                "ownership": {
                    "$ref": "#/types/port:index/BlueprintOwnership:BlueprintOwnership",
                    "description": "Optional ownership field for Blueprint. 'type' can be Inherited or Direct. If 'Inherited', then 'path' is required and must be a valid relation identifiers path.\n"
                },
                "properties": {
                    "$ref": "#/types/port:index/BlueprintProperties:BlueprintProperties",
                    "description": "The properties of the blueprint\n"
                },
                "relations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/BlueprintRelations:BlueprintRelations"
                    },
                    "description": "The relations of the blueprint\n"
                },
                "teamInheritance": {
                    "$ref": "#/types/port:index/BlueprintTeamInheritance:BlueprintTeamInheritance",
                    "description": "The team inheritance of the blueprint\n"
                },
                "title": {
                    "type": "string",
                    "description": "The display name of the blueprint\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update date of the blueprint\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "The last updater of the blueprint\n"
                },
                "webhookChangelogDestination": {
                    "$ref": "#/types/port:index/BlueprintWebhookChangelogDestination:BlueprintWebhookChangelogDestination",
                    "description": "The webhook changelog destination of the blueprint\n"
                }
            },
            "required": [
                "createCatalogPage",
                "createdAt",
                "createdBy",
                "forceDeleteEntities",
                "identifier",
                "title",
                "updatedAt",
                "updatedBy"
            ],
            "inputProperties": {
                "calculationProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/BlueprintCalculationProperties:BlueprintCalculationProperties"
                    },
                    "description": "The calculation properties of the blueprint\n"
                },
                "createCatalogPage": {
                    "type": "boolean",
                    "description": "This flag is only relevant for blueprint creation, by default if not set, a catalog page will be created for the blueprint\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the blueprint\n"
                },
                "forceDeleteEntities": {
                    "type": "boolean"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the blueprint\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the blueprint\n"
                },
                "kafkaChangelogDestination": {
                    "$ref": "#/types/port:index/BlueprintKafkaChangelogDestination:BlueprintKafkaChangelogDestination",
                    "description": "The changelog destination of the blueprint\n"
                },
                "mirrorProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/BlueprintMirrorProperties:BlueprintMirrorProperties"
                    },
                    "description": "The mirror properties of the blueprint\n"
                },
                "ownership": {
                    "$ref": "#/types/port:index/BlueprintOwnership:BlueprintOwnership",
                    "description": "Optional ownership field for Blueprint. 'type' can be Inherited or Direct. If 'Inherited', then 'path' is required and must be a valid relation identifiers path.\n"
                },
                "properties": {
                    "$ref": "#/types/port:index/BlueprintProperties:BlueprintProperties",
                    "description": "The properties of the blueprint\n"
                },
                "relations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/BlueprintRelations:BlueprintRelations"
                    },
                    "description": "The relations of the blueprint\n"
                },
                "teamInheritance": {
                    "$ref": "#/types/port:index/BlueprintTeamInheritance:BlueprintTeamInheritance",
                    "description": "The team inheritance of the blueprint\n"
                },
                "title": {
                    "type": "string",
                    "description": "The display name of the blueprint\n"
                },
                "webhookChangelogDestination": {
                    "$ref": "#/types/port:index/BlueprintWebhookChangelogDestination:BlueprintWebhookChangelogDestination",
                    "description": "The webhook changelog destination of the blueprint\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Blueprint resources.\n",
                "properties": {
                    "calculationProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/port:index/BlueprintCalculationProperties:BlueprintCalculationProperties"
                        },
                        "description": "The calculation properties of the blueprint\n"
                    },
                    "createCatalogPage": {
                        "type": "boolean",
                        "description": "This flag is only relevant for blueprint creation, by default if not set, a catalog page will be created for the blueprint\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the blueprint\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The creator of the blueprint\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the blueprint\n"
                    },
                    "forceDeleteEntities": {
                        "type": "boolean"
                    },
                    "icon": {
                        "type": "string",
                        "description": "The icon of the blueprint\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "The identifier of the blueprint\n"
                    },
                    "kafkaChangelogDestination": {
                        "$ref": "#/types/port:index/BlueprintKafkaChangelogDestination:BlueprintKafkaChangelogDestination",
                        "description": "The changelog destination of the blueprint\n"
                    },
                    "mirrorProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/port:index/BlueprintMirrorProperties:BlueprintMirrorProperties"
                        },
                        "description": "The mirror properties of the blueprint\n"
                    },
                    "ownership": {
                        "$ref": "#/types/port:index/BlueprintOwnership:BlueprintOwnership",
                        "description": "Optional ownership field for Blueprint. 'type' can be Inherited or Direct. If 'Inherited', then 'path' is required and must be a valid relation identifiers path.\n"
                    },
                    "properties": {
                        "$ref": "#/types/port:index/BlueprintProperties:BlueprintProperties",
                        "description": "The properties of the blueprint\n"
                    },
                    "relations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/port:index/BlueprintRelations:BlueprintRelations"
                        },
                        "description": "The relations of the blueprint\n"
                    },
                    "teamInheritance": {
                        "$ref": "#/types/port:index/BlueprintTeamInheritance:BlueprintTeamInheritance",
                        "description": "The team inheritance of the blueprint\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The display name of the blueprint\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the blueprint\n"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The last updater of the blueprint\n"
                    },
                    "webhookChangelogDestination": {
                        "$ref": "#/types/port:index/BlueprintWebhookChangelogDestination:BlueprintWebhookChangelogDestination",
                        "description": "The webhook changelog destination of the blueprint\n"
                    }
                },
                "type": "object"
            }
        },
        "port:index/blueprintPermissions:BlueprintPermissions": {
            "properties": {
                "blueprintIdentifier": {
                    "type": "string"
                },
                "entities": {
                    "$ref": "#/types/port:index/BlueprintPermissionsEntities:BlueprintPermissionsEntities",
                    "description": "Entities permissions to read the blueprint\n"
                }
            },
            "required": [
                "blueprintIdentifier",
                "entities"
            ],
            "inputProperties": {
                "blueprintIdentifier": {
                    "type": "string"
                },
                "entities": {
                    "$ref": "#/types/port:index/BlueprintPermissionsEntities:BlueprintPermissionsEntities",
                    "description": "Entities permissions to read the blueprint\n"
                }
            },
            "requiredInputs": [
                "blueprintIdentifier",
                "entities"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BlueprintPermissions resources.\n",
                "properties": {
                    "blueprintIdentifier": {
                        "type": "string"
                    },
                    "entities": {
                        "$ref": "#/types/port:index/BlueprintPermissionsEntities:BlueprintPermissionsEntities",
                        "description": "Entities permissions to read the blueprint\n"
                    }
                },
                "type": "object"
            }
        },
        "port:index/entity:Entity": {
            "description": "Entity resource\n",
            "properties": {
                "blueprint": {
                    "type": "string",
                    "description": "The blueprint identifier the entity relates to\n"
                },
                "createMissingRelatedEntities": {
                    "type": "boolean",
                    "description": "Whether to create missing related entities\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the entity\n"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The creator of the entity\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the entity\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the entity\n"
                },
                "properties": {
                    "$ref": "#/types/port:index/EntityProperties:EntityProperties",
                    "description": "The properties of the entity\n"
                },
                "relations": {
                    "$ref": "#/types/port:index/EntityRelations:EntityRelations",
                    "description": "The relations of the entity\n"
                },
                "runId": {
                    "type": "string",
                    "description": "The runID of the action run that created the entity\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The teams the entity belongs to\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the entity\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update date of the entity\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "The last updater of the entity\n"
                }
            },
            "required": [
                "blueprint",
                "createMissingRelatedEntities",
                "createdAt",
                "createdBy",
                "identifier",
                "updatedAt",
                "updatedBy"
            ],
            "inputProperties": {
                "blueprint": {
                    "type": "string",
                    "description": "The blueprint identifier the entity relates to\n"
                },
                "createMissingRelatedEntities": {
                    "type": "boolean",
                    "description": "Whether to create missing related entities\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the entity\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the entity\n"
                },
                "properties": {
                    "$ref": "#/types/port:index/EntityProperties:EntityProperties",
                    "description": "The properties of the entity\n"
                },
                "relations": {
                    "$ref": "#/types/port:index/EntityRelations:EntityRelations",
                    "description": "The relations of the entity\n"
                },
                "runId": {
                    "type": "string",
                    "description": "The runID of the action run that created the entity\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The teams the entity belongs to\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the entity\n"
                }
            },
            "requiredInputs": [
                "blueprint"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Entity resources.\n",
                "properties": {
                    "blueprint": {
                        "type": "string",
                        "description": "The blueprint identifier the entity relates to\n"
                    },
                    "createMissingRelatedEntities": {
                        "type": "boolean",
                        "description": "Whether to create missing related entities\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the entity\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The creator of the entity\n"
                    },
                    "icon": {
                        "type": "string",
                        "description": "The icon of the entity\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "The identifier of the entity\n"
                    },
                    "properties": {
                        "$ref": "#/types/port:index/EntityProperties:EntityProperties",
                        "description": "The properties of the entity\n"
                    },
                    "relations": {
                        "$ref": "#/types/port:index/EntityRelations:EntityRelations",
                        "description": "The relations of the entity\n"
                    },
                    "runId": {
                        "type": "string",
                        "description": "The runID of the action run that created the entity\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The teams the entity belongs to\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the entity\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the entity\n"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The last updater of the entity\n"
                    }
                },
                "type": "object"
            }
        },
        "port:index/folder:Folder": {
            "description": "A full list of the available folder types and their identifiers can be found [here](https://docs.getport.io/customize-pages-dashboards-and-plugins/folder/catalog-folder).\n\n\u003e **WARNING**\nThe folder resource is currently in beta and is subject to change in future versions.\nUse it by setting the Environment Variable `PORT_BETA_FEATURES_ENABLED=true`.\nIf this Environment Variable isn't specified, you won't be able to use the resource.\n\n## Example Usage\n\n### Basic Folder\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as port from \"@pulumi/port\";\n\nconst exampleFolder = new port.index.Port_folder(\"exampleFolder\", {\n    identifier: \"example_folder\",\n    title: \"Example Folder\",\n});\n```\n```python\nimport pulumi\nimport pulumi_port as port\n\nexample_folder = port.index.Port_folder(\"exampleFolder\",\n    identifier=example_folder,\n    title=Example Folder)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Port = Pulumi.Port;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleFolder = new Port.Index.Port_folder(\"exampleFolder\", new()\n    {\n        Identifier = \"example_folder\",\n        Title = \"Example Folder\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/port-labs/pulumi-port/sdk/v2/go/port\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := port.NewPort_folder(ctx, \"exampleFolder\", \u0026port.Port_folderArgs{\n\t\t\tIdentifier: \"example_folder\",\n\t\t\tTitle:      \"Example Folder\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.port.port_folder;\nimport com.pulumi.port.Port_folderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleFolder = new Port_folder(\"exampleFolder\", Port_folderArgs.builder()\n            .identifier(\"example_folder\")\n            .title(\"Example Folder\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleFolder:\n    type: port:port_folder\n    properties:\n      identifier: example_folder\n      title: Example Folder\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Folder with Parent\n\nCreate a folder inside another folder.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as port from \"@pulumi/port\";\n\nconst childFolder = new port.index.Port_folder(\"childFolder\", {\n    identifier: \"child_folder\",\n    parent: port_folder.example_folder.identifier,\n    title: \"Child Folder\",\n});\n```\n```python\nimport pulumi\nimport pulumi_port as port\n\nchild_folder = port.index.Port_folder(\"childFolder\",\n    identifier=child_folder,\n    parent=port_folder.example_folder.identifier,\n    title=Child Folder)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Port = Pulumi.Port;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var childFolder = new Port.Index.Port_folder(\"childFolder\", new()\n    {\n        Identifier = \"child_folder\",\n        Parent = port_folder.Example_folder.Identifier,\n        Title = \"Child Folder\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/port-labs/pulumi-port/sdk/v2/go/port\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := port.NewPort_folder(ctx, \"childFolder\", \u0026port.Port_folderArgs{\n\t\t\tIdentifier: \"child_folder\",\n\t\t\tParent:     port_folder.Example_folder.Identifier,\n\t\t\tTitle:      \"Child Folder\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.port.port_folder;\nimport com.pulumi.port.Port_folderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var childFolder = new Port_folder(\"childFolder\", Port_folderArgs.builder()\n            .identifier(\"child_folder\")\n            .parent(port_folder.example_folder().identifier())\n            .title(\"Child Folder\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  childFolder:\n    type: port:port_folder\n    properties:\n      identifier: child_folder\n      parent: ${port_folder.example_folder.identifier}\n      title: Child Folder\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Folder with After\n\nCreate a folder after another folder.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as port from \"@pulumi/port\";\n\nconst anotherFolder = new port.index.Port_folder(\"anotherFolder\", {\n    identifier: \"another_folder\",\n    after: port_folder.example_folder.identifier,\n    title: \"Another Folder\",\n});\n```\n```python\nimport pulumi\nimport pulumi_port as port\n\nanother_folder = port.index.Port_folder(\"anotherFolder\",\n    identifier=another_folder,\n    after=port_folder.example_folder.identifier,\n    title=Another Folder)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Port = Pulumi.Port;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var anotherFolder = new Port.Index.Port_folder(\"anotherFolder\", new()\n    {\n        Identifier = \"another_folder\",\n        After = port_folder.Example_folder.Identifier,\n        Title = \"Another Folder\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/port-labs/pulumi-port/sdk/v2/go/port\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := port.NewPort_folder(ctx, \"anotherFolder\", \u0026port.Port_folderArgs{\n\t\t\tIdentifier: \"another_folder\",\n\t\t\tAfter:      port_folder.Example_folder.Identifier,\n\t\t\tTitle:      \"Another Folder\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.port.port_folder;\nimport com.pulumi.port.Port_folderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var anotherFolder = new Port_folder(\"anotherFolder\", Port_folderArgs.builder()\n            .identifier(\"another_folder\")\n            .after(port_folder.example_folder().identifier())\n            .title(\"Another Folder\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  anotherFolder:\n    type: port:port_folder\n    properties:\n      identifier: another_folder\n      after: ${port_folder.example_folder.identifier}\n      title: Another Folder\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "after": {
                    "type": "string",
                    "description": "The identifier of the folder after which the folder should be placed\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the folder\n"
                },
                "parent": {
                    "type": "string",
                    "description": "The identifier of the parent folder\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the folder\n"
                }
            },
            "required": [
                "identifier"
            ],
            "inputProperties": {
                "after": {
                    "type": "string",
                    "description": "The identifier of the folder after which the folder should be placed\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the folder\n"
                },
                "parent": {
                    "type": "string",
                    "description": "The identifier of the parent folder\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the folder\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Folder resources.\n",
                "properties": {
                    "after": {
                        "type": "string",
                        "description": "The identifier of the folder after which the folder should be placed\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "The identifier of the folder\n"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The identifier of the parent folder\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the folder\n"
                    }
                },
                "type": "object"
            }
        },
        "port:index/integration:Integration": {
            "description": "**NOTE:** This resource manages existing integration and integration mappings, not for creating new integrations.\n\nDocs about integrations can be found [here](https://docs.getport.io/integrations-index/).\n\nDocs about how to import existing integrations and manage their mappings can be found [here](https://docs.getport.io/guides/all/import-and-manage-integration).\n\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as port from \"@pulumi/port\";\n\nconst myCustomIntegration = new port.index.Port_integration(\"myCustomIntegration\", {\n    installationId: \"my-custom-integration-id\",\n    title: \"My Custom Integration\",\n    config: JSON.stringify({\n        createMissingRelatedEntitiesboolean: true,\n        deleteDependentEntities: true,\n        resources: [{\n            kind: \"my-custom-kind\",\n            selector: {\n                query: \".title\",\n            },\n            port: {\n                entity: {\n                    mappings: [{\n                        identifier: \"'my-identifier'\",\n                        title: \".title\",\n                        blueprint: \"'my-blueprint'\",\n                        properties: {\n                            my_property: 123,\n                        },\n                        relations: {},\n                    }],\n                },\n            },\n        }],\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_port as port\n\nmy_custom_integration = port.index.Port_integration(\"myCustomIntegration\",\n    installation_id=my-custom-integration-id,\n    title=My Custom Integration,\n    config=json.dumps({\n        createMissingRelatedEntitiesboolean: True,\n        deleteDependentEntities: True,\n        resources: [{\n            kind: my-custom-kind,\n            selector: {\n                query: .title,\n            },\n            port: {\n                entity: {\n                    mappings: [{\n                        identifier: 'my-identifier',\n                        title: .title,\n                        blueprint: 'my-blueprint',\n                        properties: {\n                            my_property: 123,\n                        },\n                        relations: {},\n                    }],\n                },\n            },\n        }],\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Port = Pulumi.Port;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myCustomIntegration = new Port.Index.Port_integration(\"myCustomIntegration\", new()\n    {\n        InstallationId = \"my-custom-integration-id\",\n        Title = \"My Custom Integration\",\n        Config = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"createMissingRelatedEntitiesboolean\"] = true,\n            [\"deleteDependentEntities\"] = true,\n            [\"resources\"] = new[]\n            {\n                new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"kind\"] = \"my-custom-kind\",\n                    [\"selector\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"query\"] = \".title\",\n                    },\n                    [\"port\"] = new Dictionary\u003cstring, object?\u003e\n                    {\n                        [\"entity\"] = new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"mappings\"] = new[]\n                            {\n                                new Dictionary\u003cstring, object?\u003e\n                                {\n                                    [\"identifier\"] = \"'my-identifier'\",\n                                    [\"title\"] = \".title\",\n                                    [\"blueprint\"] = \"'my-blueprint'\",\n                                    [\"properties\"] = new Dictionary\u003cstring, object?\u003e\n                                    {\n                                        [\"my_property\"] = 123,\n                                    },\n                                    [\"relations\"] = new Dictionary\u003cstring, object?\u003e\n                                    {\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/port-labs/pulumi-port/sdk/v2/go/port\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\n_, err := port.NewPort_integration(ctx, \"myCustomIntegration\", \u0026port.Port_integrationArgs{\nInstallationId: \"my-custom-integration-id\",\nTitle: \"My Custom Integration\",\nConfig: %!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n})\nif err != nil {\nreturn err\n}\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.port.port_integration;\nimport com.pulumi.port.Port_integrationArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myCustomIntegration = new Port_integration(\"myCustomIntegration\", Port_integrationArgs.builder()\n            .installationId(\"my-custom-integration-id\")\n            .title(\"My Custom Integration\")\n            .config(serializeJson(\n                jsonObject(\n                    jsonProperty(\"createMissingRelatedEntitiesboolean\", true),\n                    jsonProperty(\"deleteDependentEntities\", true),\n                    jsonProperty(\"resources\", jsonArray(jsonObject(\n                        jsonProperty(\"kind\", \"my-custom-kind\"),\n                        jsonProperty(\"selector\", jsonObject(\n                            jsonProperty(\"query\", \".title\")\n                        )),\n                        jsonProperty(\"port\", jsonObject(\n                            jsonProperty(\"entity\", jsonObject(\n                                jsonProperty(\"mappings\", jsonArray(jsonObject(\n                                    jsonProperty(\"identifier\", \"'my-identifier'\"),\n                                    jsonProperty(\"title\", \".title\"),\n                                    jsonProperty(\"blueprint\", \"'my-blueprint'\"),\n                                    jsonProperty(\"properties\", jsonObject(\n                                        jsonProperty(\"my_property\", 123)\n                                    )),\n                                    jsonProperty(\"relations\", jsonObject(\n\n                                    ))\n                                )))\n                            ))\n                        ))\n                    )))\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myCustomIntegration:\n    type: port:port_integration\n    properties:\n      installationId: my-custom-integration-id\n      title: My Custom Integration\n      config:\n        fn::toJSON:\n          createMissingRelatedEntitiesboolean: true\n          deleteDependentEntities: true\n          resources:\n            - kind: my-custom-kind\n              selector:\n                query: .title\n              port:\n                entity:\n                  mappings:\n                    - identifier: '''my-identifier'''\n                      title: .title\n                      blueprint: '''my-blueprint'''\n                      properties:\n                        my_property: 123\n                      relations: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "config": {
                    "type": "string",
                    "description": "Integration Config Raw JSON string (use `jsonencode`)\n"
                },
                "installationAppType": {
                    "type": "string"
                },
                "installationId": {
                    "type": "string"
                },
                "kafkaChangelogDestination": {
                    "$ref": "#/types/port:index/IntegrationKafkaChangelogDestination:IntegrationKafkaChangelogDestination",
                    "description": "The changelog destination of the blueprint (just an empty `{}`)\n"
                },
                "title": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "webhookChangelogDestination": {
                    "$ref": "#/types/port:index/IntegrationWebhookChangelogDestination:IntegrationWebhookChangelogDestination",
                    "description": "The webhook changelog destination of the integration\n"
                }
            },
            "required": [
                "installationId",
                "version"
            ],
            "inputProperties": {
                "config": {
                    "type": "string",
                    "description": "Integration Config Raw JSON string (use `jsonencode`)\n"
                },
                "installationAppType": {
                    "type": "string"
                },
                "installationId": {
                    "type": "string"
                },
                "kafkaChangelogDestination": {
                    "$ref": "#/types/port:index/IntegrationKafkaChangelogDestination:IntegrationKafkaChangelogDestination",
                    "description": "The changelog destination of the blueprint (just an empty `{}`)\n"
                },
                "title": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "webhookChangelogDestination": {
                    "$ref": "#/types/port:index/IntegrationWebhookChangelogDestination:IntegrationWebhookChangelogDestination",
                    "description": "The webhook changelog destination of the integration\n"
                }
            },
            "requiredInputs": [
                "installationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "Integration Config Raw JSON string (use `jsonencode`)\n"
                    },
                    "installationAppType": {
                        "type": "string"
                    },
                    "installationId": {
                        "type": "string"
                    },
                    "kafkaChangelogDestination": {
                        "$ref": "#/types/port:index/IntegrationKafkaChangelogDestination:IntegrationKafkaChangelogDestination",
                        "description": "The changelog destination of the blueprint (just an empty `{}`)\n"
                    },
                    "title": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "webhookChangelogDestination": {
                        "$ref": "#/types/port:index/IntegrationWebhookChangelogDestination:IntegrationWebhookChangelogDestination",
                        "description": "The webhook changelog destination of the integration\n"
                    }
                },
                "type": "object"
            }
        },
        "port:index/page:Page": {
            "properties": {
                "after": {
                    "type": "string",
                    "description": "The identifier of the page/folder after which the page should be placed\n"
                },
                "blueprint": {
                    "type": "string",
                    "description": "The blueprint for which the page is created, relevant only for pages of type \"blueprint-entities\"\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the page\n"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The creator of the page\n"
                },
                "description": {
                    "type": "string",
                    "description": "The page description\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the page\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The Identifier of the page\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Whether the page is locked, if true, viewers will not be able to edit the page widgets and filters\n"
                },
                "parent": {
                    "type": "string",
                    "description": "The identifier of the folder in which the page is in, default is the root of the sidebar\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the page\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the page, can be one of \"blueprint-entities\", \"dashboard\" or \"home\"\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update date of the page\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "The last updater of the page\n"
                },
                "widgets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The widgets of the page\n"
                }
            },
            "required": [
                "createdAt",
                "createdBy",
                "identifier",
                "type",
                "updatedAt",
                "updatedBy"
            ],
            "inputProperties": {
                "after": {
                    "type": "string",
                    "description": "The identifier of the page/folder after which the page should be placed\n"
                },
                "blueprint": {
                    "type": "string",
                    "description": "The blueprint for which the page is created, relevant only for pages of type \"blueprint-entities\"\n"
                },
                "description": {
                    "type": "string",
                    "description": "The page description\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the page\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The Identifier of the page\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Whether the page is locked, if true, viewers will not be able to edit the page widgets and filters\n"
                },
                "parent": {
                    "type": "string",
                    "description": "The identifier of the folder in which the page is in, default is the root of the sidebar\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the page\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the page, can be one of \"blueprint-entities\", \"dashboard\" or \"home\"\n"
                },
                "widgets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The widgets of the page\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Page resources.\n",
                "properties": {
                    "after": {
                        "type": "string",
                        "description": "The identifier of the page/folder after which the page should be placed\n"
                    },
                    "blueprint": {
                        "type": "string",
                        "description": "The blueprint for which the page is created, relevant only for pages of type \"blueprint-entities\"\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the page\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The creator of the page\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The page description\n"
                    },
                    "icon": {
                        "type": "string",
                        "description": "The icon of the page\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "The Identifier of the page\n"
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Whether the page is locked, if true, viewers will not be able to edit the page widgets and filters\n"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The identifier of the folder in which the page is in, default is the root of the sidebar\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the page\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the page, can be one of \"blueprint-entities\", \"dashboard\" or \"home\"\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the page\n"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The last updater of the page\n"
                    },
                    "widgets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The widgets of the page\n"
                    }
                },
                "type": "object"
            }
        },
        "port:index/pagePermissions:PagePermissions": {
            "properties": {
                "pageIdentifier": {
                    "type": "string"
                },
                "read": {
                    "$ref": "#/types/port:index/PagePermissionsRead:PagePermissionsRead",
                    "description": "The permission to read the page\n"
                }
            },
            "required": [
                "pageIdentifier",
                "read"
            ],
            "inputProperties": {
                "pageIdentifier": {
                    "type": "string"
                },
                "read": {
                    "$ref": "#/types/port:index/PagePermissionsRead:PagePermissionsRead",
                    "description": "The permission to read the page\n"
                }
            },
            "requiredInputs": [
                "pageIdentifier",
                "read"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PagePermissions resources.\n",
                "properties": {
                    "pageIdentifier": {
                        "type": "string"
                    },
                    "read": {
                        "$ref": "#/types/port:index/PagePermissionsRead:PagePermissionsRead",
                        "description": "The permission to read the page\n"
                    }
                },
                "type": "object"
            }
        },
        "port:index/scorecard:Scorecard": {
            "description": "This resource allows you to manage a scorecard.\n\nSee the [Port documentation](https://docs.getport.io/promote-scorecards/) for more information about scorecards.\n\n## Example Usage\n\nThis will create a blueprint with a Scorecard measuring the readiness of a microservice.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as port from \"@pulumi/port\";\n\nconst microservice = new port.index.Port_blueprint(\"microservice\", {\n    title: \"microservice\",\n    icon: \"Terraform\",\n    identifier: \"microservice\",\n    properties: {\n        stringProps: {\n            author: {\n                title: \"Author\",\n            },\n            url: {\n                title: \"URL\",\n            },\n        },\n        booleanProps: {\n            required: {\n                type: \"boolean\",\n            },\n        },\n        numberProps: {\n            sum: {\n                type: \"number\",\n            },\n        },\n    },\n});\nconst readiness = new port.index.Port_scorecard(\"readiness\", {\n    identifier: \"Readiness\",\n    title: \"Readiness\",\n    blueprint: microservice.identifier,\n    rules: [\n        {\n            identifier: \"hasOwner\",\n            title: \"Has Owner\",\n            level: \"Gold\",\n            query: {\n                combinator: \"and\",\n                conditions: [\n                    JSON.stringify({\n                        property: \"$team\",\n                        operator: \"isNotEmpty\",\n                    }),\n                    JSON.stringify({\n                        property: \"author\",\n                        operator: \"=\",\n                        value: \"myValue\",\n                    }),\n                ],\n            },\n        },\n        {\n            identifier: \"hasUrl\",\n            title: \"Has URL\",\n            level: \"Silver\",\n            query: {\n                combinator: \"and\",\n                conditions: [JSON.stringify({\n                    property: \"url\",\n                    operator: \"isNotEmpty\",\n                })],\n            },\n        },\n        {\n            identifier: \"checkSumIfRequired\",\n            title: \"Check Sum If Required\",\n            level: \"Bronze\",\n            query: {\n                combinator: \"or\",\n                conditions: [\n                    JSON.stringify({\n                        property: \"required\",\n                        operator: \"=\",\n                        value: false,\n                    }),\n                    JSON.stringify({\n                        property: \"sum\",\n                        operator: \"\u003e\",\n                        value: 2,\n                    }),\n                ],\n            },\n        },\n    ],\n}, {\n    dependsOn: [microservice],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_port as port\n\nmicroservice = port.index.Port_blueprint(\"microservice\",\n    title=microservice,\n    icon=Terraform,\n    identifier=microservice,\n    properties={\n        stringProps: {\n            author: {\n                title: Author,\n            },\n            url: {\n                title: URL,\n            },\n        },\n        booleanProps: {\n            required: {\n                type: boolean,\n            },\n        },\n        numberProps: {\n            sum: {\n                type: number,\n            },\n        },\n    })\nreadiness = port.index.Port_scorecard(\"readiness\",\n    identifier=Readiness,\n    title=Readiness,\n    blueprint=microservice.identifier,\n    rules=[\n        {\n            identifier: hasOwner,\n            title: Has Owner,\n            level: Gold,\n            query: {\n                combinator: and,\n                conditions: [\n                    json.dumps({\n                        property: $team,\n                        operator: isNotEmpty,\n                    }),\n                    json.dumps({\n                        property: author,\n                        operator: =,\n                        value: myValue,\n                    }),\n                ],\n            },\n        },\n        {\n            identifier: hasUrl,\n            title: Has URL,\n            level: Silver,\n            query: {\n                combinator: and,\n                conditions: [json.dumps({\n                    property: url,\n                    operator: isNotEmpty,\n                })],\n            },\n        },\n        {\n            identifier: checkSumIfRequired,\n            title: Check Sum If Required,\n            level: Bronze,\n            query: {\n                combinator: or,\n                conditions: [\n                    json.dumps({\n                        property: required,\n                        operator: =,\n                        value: False,\n                    }),\n                    json.dumps({\n                        property: sum,\n                        operator: \u003e,\n                        value: 2,\n                    }),\n                ],\n            },\n        },\n    ],\n    opts = pulumi.ResourceOptions(depends_on=[microservice]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Port = Pulumi.Port;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var microservice = new Port.Index.Port_blueprint(\"microservice\", new()\n    {\n        Title = \"microservice\",\n        Icon = \"Terraform\",\n        Identifier = \"microservice\",\n        Properties = \n        {\n            { \"stringProps\", \n            {\n                { \"author\", \n                {\n                    { \"title\", \"Author\" },\n                } },\n                { \"url\", \n                {\n                    { \"title\", \"URL\" },\n                } },\n            } },\n            { \"booleanProps\", \n            {\n                { \"required\", \n                {\n                    { \"type\", \"boolean\" },\n                } },\n            } },\n            { \"numberProps\", \n            {\n                { \"sum\", \n                {\n                    { \"type\", \"number\" },\n                } },\n            } },\n        },\n    });\n\n    var readiness = new Port.Index.Port_scorecard(\"readiness\", new()\n    {\n        Identifier = \"Readiness\",\n        Title = \"Readiness\",\n        Blueprint = microservice.Identifier,\n        Rules = new[]\n        {\n            \n            {\n                { \"identifier\", \"hasOwner\" },\n                { \"title\", \"Has Owner\" },\n                { \"level\", \"Gold\" },\n                { \"query\", \n                {\n                    { \"combinator\", \"and\" },\n                    { \"conditions\", new[]\n                    {\n                        JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"property\"] = \"$team\",\n                            [\"operator\"] = \"isNotEmpty\",\n                        }),\n                        JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"property\"] = \"author\",\n                            [\"operator\"] = \"=\",\n                            [\"value\"] = \"myValue\",\n                        }),\n                    } },\n                } },\n            },\n            \n            {\n                { \"identifier\", \"hasUrl\" },\n                { \"title\", \"Has URL\" },\n                { \"level\", \"Silver\" },\n                { \"query\", \n                {\n                    { \"combinator\", \"and\" },\n                    { \"conditions\", new[]\n                    {\n                        JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"property\"] = \"url\",\n                            [\"operator\"] = \"isNotEmpty\",\n                        }),\n                    } },\n                } },\n            },\n            \n            {\n                { \"identifier\", \"checkSumIfRequired\" },\n                { \"title\", \"Check Sum If Required\" },\n                { \"level\", \"Bronze\" },\n                { \"query\", \n                {\n                    { \"combinator\", \"or\" },\n                    { \"conditions\", new[]\n                    {\n                        JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"property\"] = \"required\",\n                            [\"operator\"] = \"=\",\n                            [\"value\"] = false,\n                        }),\n                        JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"property\"] = \"sum\",\n                            [\"operator\"] = \"\u003e\",\n                            [\"value\"] = 2,\n                        }),\n                    } },\n                } },\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            microservice,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/port-labs/pulumi-port/sdk/v2/go/port\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nmicroservice, err := port.NewPort_blueprint(ctx, \"microservice\", \u0026port.Port_blueprintArgs{\nTitle: \"microservice\",\nIcon: \"Terraform\",\nIdentifier: \"microservice\",\nProperties: map[string]interface{}{\n\"stringProps\": map[string]interface{}{\n\"author\": map[string]interface{}{\n\"title\": \"Author\",\n},\n\"url\": map[string]interface{}{\n\"title\": \"URL\",\n},\n},\n\"booleanProps\": map[string]interface{}{\n\"required\": map[string]interface{}{\n\"type\": \"boolean\",\n},\n},\n\"numberProps\": map[string]interface{}{\n\"sum\": map[string]interface{}{\n\"type\": \"number\",\n},\n},\n},\n})\nif err != nil {\nreturn err\n}\n_, err = port.NewPort_scorecard(ctx, \"readiness\", \u0026port.Port_scorecardArgs{\nIdentifier: \"Readiness\",\nTitle: \"Readiness\",\nBlueprint: microservice.Identifier,\nRules: []interface{}{\nmap[string]interface{}{\n\"identifier\": \"hasOwner\",\n\"title\": \"Has Owner\",\n\"level\": \"Gold\",\n\"query\": map[string]interface{}{\n\"combinator\": \"and\",\n\"conditions\": []string{\n%!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n%!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n},\n},\n},\nmap[string]interface{}{\n\"identifier\": \"hasUrl\",\n\"title\": \"Has URL\",\n\"level\": \"Silver\",\n\"query\": map[string]interface{}{\n\"combinator\": \"and\",\n\"conditions\": []string{\n%!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n},\n},\n},\nmap[string]interface{}{\n\"identifier\": \"checkSumIfRequired\",\n\"title\": \"Check Sum If Required\",\n\"level\": \"Bronze\",\n\"query\": map[string]interface{}{\n\"combinator\": \"or\",\n\"conditions\": []string{\n%!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n%!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n},\n},\n},\n},\n}, pulumi.DependsOn([]pulumi.Resource{\nmicroservice,\n}))\nif err != nil {\nreturn err\n}\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.port.port_blueprint;\nimport com.pulumi.port.Port_blueprintArgs;\nimport com.pulumi.port.port_scorecard;\nimport com.pulumi.port.Port_scorecardArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var microservice = new Port_blueprint(\"microservice\", Port_blueprintArgs.builder()\n            .title(\"microservice\")\n            .icon(\"Terraform\")\n            .identifier(\"microservice\")\n            .properties(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n        var readiness = new Port_scorecard(\"readiness\", Port_scorecardArgs.builder()\n            .identifier(\"Readiness\")\n            .title(\"Readiness\")\n            .blueprint(microservice.identifier())\n            .rules(            \n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(microservice)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  microservice:\n    type: port:port_blueprint\n    properties:\n      title: microservice\n      icon: Terraform\n      identifier: microservice\n      properties:\n        stringProps:\n          author:\n            title: Author\n          url:\n            title: URL\n        booleanProps:\n          required:\n            type: boolean\n        numberProps:\n          sum:\n            type: number\n  readiness:\n    type: port:port_scorecard\n    properties:\n      identifier: Readiness\n      title: Readiness\n      blueprint: ${microservice.identifier}\n      rules:\n        - identifier: hasOwner\n          title: Has Owner\n          level: Gold\n          query:\n            combinator: and\n            conditions:\n              - fn::toJSON:\n                  property: $team\n                  operator: isNotEmpty\n              - fn::toJSON:\n                  property: author\n                  operator: =\n                  value: myValue\n        - identifier: hasUrl\n          title: Has URL\n          level: Silver\n          query:\n            combinator: and\n            conditions:\n              - fn::toJSON:\n                  property: url\n                  operator: isNotEmpty\n        - identifier: checkSumIfRequired\n          title: Check Sum If Required\n          level: Bronze\n          query:\n            combinator: or\n            conditions:\n              - fn::toJSON:\n                  property: required\n                  operator: =\n                  value: false\n              - fn::toJSON:\n                  property: sum\n                  operator: '\u003e'\n                  value: 2\n    options:\n      dependsOn:\n        - ${microservice}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\n### With Levels And Filter\n\nThis will override the default levels (Basic, Bronze, Silver, Gold) with the provided levels: Not Ready, Partially Ready, Ready.\n\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as port from \"@pulumi/port\";\n\nconst microservice = new port.index.Port_blueprint(\"microservice\", {\n    title: \"microservice\",\n    icon: \"Terraform\",\n    identifier: \"microservice\",\n    properties: {\n        stringProps: {\n            author: {\n                title: \"Author\",\n            },\n            url: {\n                title: \"URL\",\n            },\n        },\n        booleanProps: {\n            required: {\n                type: \"boolean\",\n            },\n        },\n        numberProps: {\n            sum: {\n                type: \"number\",\n            },\n        },\n    },\n});\nconst readiness = new port.index.Port_scorecard(\"readiness\", {\n    identifier: \"Readiness\",\n    title: \"Readiness\",\n    blueprint: microservice.identifier,\n    filter: {\n        combinator: \"and\",\n        conditions: [JSON.stringify({\n            property: \"sum\",\n            operator: \"\u003e\",\n            value: 0,\n        })],\n    },\n    levels: [\n        {\n            color: \"red\",\n            title: \"No Ready\",\n        },\n        {\n            color: \"yellow\",\n            title: \"Partially Ready\",\n        },\n        {\n            color: \"green\",\n            title: \"Ready\",\n        },\n    ],\n    rules: [\n        {\n            identifier: \"hasOwner\",\n            title: \"Has Owner\",\n            level: \"Ready\",\n            query: {\n                combinator: \"and\",\n                conditions: [\n                    JSON.stringify({\n                        property: \"$team\",\n                        operator: \"isNotEmpty\",\n                    }),\n                    JSON.stringify({\n                        property: \"author\",\n                        operator: \"=\",\n                        value: \"myValue\",\n                    }),\n                ],\n            },\n        },\n        {\n            identifier: \"hasUrl\",\n            title: \"Has URL\",\n            level: \"Partially Ready\",\n            query: {\n                combinator: \"and\",\n                conditions: [JSON.stringify({\n                    property: \"url\",\n                    operator: \"isNotEmpty\",\n                })],\n            },\n        },\n        {\n            identifier: \"checkSumIfRequired\",\n            title: \"Check Sum If Required\",\n            level: \"Partially Ready\",\n            query: {\n                combinator: \"or\",\n                conditions: [\n                    JSON.stringify({\n                        property: \"required\",\n                        operator: \"=\",\n                        value: false,\n                    }),\n                    JSON.stringify({\n                        property: \"sum\",\n                        operator: \"\u003e\",\n                        value: 2,\n                    }),\n                ],\n            },\n        },\n    ],\n}, {\n    dependsOn: [microservice],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_port as port\n\nmicroservice = port.index.Port_blueprint(\"microservice\",\n    title=microservice,\n    icon=Terraform,\n    identifier=microservice,\n    properties={\n        stringProps: {\n            author: {\n                title: Author,\n            },\n            url: {\n                title: URL,\n            },\n        },\n        booleanProps: {\n            required: {\n                type: boolean,\n            },\n        },\n        numberProps: {\n            sum: {\n                type: number,\n            },\n        },\n    })\nreadiness = port.index.Port_scorecard(\"readiness\",\n    identifier=Readiness,\n    title=Readiness,\n    blueprint=microservice.identifier,\n    filter={\n        combinator: and,\n        conditions: [json.dumps({\n            property: sum,\n            operator: \u003e,\n            value: 0,\n        })],\n    },\n    levels=[\n        {\n            color: red,\n            title: No Ready,\n        },\n        {\n            color: yellow,\n            title: Partially Ready,\n        },\n        {\n            color: green,\n            title: Ready,\n        },\n    ],\n    rules=[\n        {\n            identifier: hasOwner,\n            title: Has Owner,\n            level: Ready,\n            query: {\n                combinator: and,\n                conditions: [\n                    json.dumps({\n                        property: $team,\n                        operator: isNotEmpty,\n                    }),\n                    json.dumps({\n                        property: author,\n                        operator: =,\n                        value: myValue,\n                    }),\n                ],\n            },\n        },\n        {\n            identifier: hasUrl,\n            title: Has URL,\n            level: Partially Ready,\n            query: {\n                combinator: and,\n                conditions: [json.dumps({\n                    property: url,\n                    operator: isNotEmpty,\n                })],\n            },\n        },\n        {\n            identifier: checkSumIfRequired,\n            title: Check Sum If Required,\n            level: Partially Ready,\n            query: {\n                combinator: or,\n                conditions: [\n                    json.dumps({\n                        property: required,\n                        operator: =,\n                        value: False,\n                    }),\n                    json.dumps({\n                        property: sum,\n                        operator: \u003e,\n                        value: 2,\n                    }),\n                ],\n            },\n        },\n    ],\n    opts = pulumi.ResourceOptions(depends_on=[microservice]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Port = Pulumi.Port;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var microservice = new Port.Index.Port_blueprint(\"microservice\", new()\n    {\n        Title = \"microservice\",\n        Icon = \"Terraform\",\n        Identifier = \"microservice\",\n        Properties = \n        {\n            { \"stringProps\", \n            {\n                { \"author\", \n                {\n                    { \"title\", \"Author\" },\n                } },\n                { \"url\", \n                {\n                    { \"title\", \"URL\" },\n                } },\n            } },\n            { \"booleanProps\", \n            {\n                { \"required\", \n                {\n                    { \"type\", \"boolean\" },\n                } },\n            } },\n            { \"numberProps\", \n            {\n                { \"sum\", \n                {\n                    { \"type\", \"number\" },\n                } },\n            } },\n        },\n    });\n\n    var readiness = new Port.Index.Port_scorecard(\"readiness\", new()\n    {\n        Identifier = \"Readiness\",\n        Title = \"Readiness\",\n        Blueprint = microservice.Identifier,\n        Filter = \n        {\n            { \"combinator\", \"and\" },\n            { \"conditions\", new[]\n            {\n                JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                {\n                    [\"property\"] = \"sum\",\n                    [\"operator\"] = \"\u003e\",\n                    [\"value\"] = 0,\n                }),\n            } },\n        },\n        Levels = new[]\n        {\n            \n            {\n                { \"color\", \"red\" },\n                { \"title\", \"No Ready\" },\n            },\n            \n            {\n                { \"color\", \"yellow\" },\n                { \"title\", \"Partially Ready\" },\n            },\n            \n            {\n                { \"color\", \"green\" },\n                { \"title\", \"Ready\" },\n            },\n        },\n        Rules = new[]\n        {\n            \n            {\n                { \"identifier\", \"hasOwner\" },\n                { \"title\", \"Has Owner\" },\n                { \"level\", \"Ready\" },\n                { \"query\", \n                {\n                    { \"combinator\", \"and\" },\n                    { \"conditions\", new[]\n                    {\n                        JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"property\"] = \"$team\",\n                            [\"operator\"] = \"isNotEmpty\",\n                        }),\n                        JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"property\"] = \"author\",\n                            [\"operator\"] = \"=\",\n                            [\"value\"] = \"myValue\",\n                        }),\n                    } },\n                } },\n            },\n            \n            {\n                { \"identifier\", \"hasUrl\" },\n                { \"title\", \"Has URL\" },\n                { \"level\", \"Partially Ready\" },\n                { \"query\", \n                {\n                    { \"combinator\", \"and\" },\n                    { \"conditions\", new[]\n                    {\n                        JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"property\"] = \"url\",\n                            [\"operator\"] = \"isNotEmpty\",\n                        }),\n                    } },\n                } },\n            },\n            \n            {\n                { \"identifier\", \"checkSumIfRequired\" },\n                { \"title\", \"Check Sum If Required\" },\n                { \"level\", \"Partially Ready\" },\n                { \"query\", \n                {\n                    { \"combinator\", \"or\" },\n                    { \"conditions\", new[]\n                    {\n                        JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"property\"] = \"required\",\n                            [\"operator\"] = \"=\",\n                            [\"value\"] = false,\n                        }),\n                        JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"property\"] = \"sum\",\n                            [\"operator\"] = \"\u003e\",\n                            [\"value\"] = 2,\n                        }),\n                    } },\n                } },\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            microservice,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/port-labs/pulumi-port/sdk/v2/go/port\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\nmicroservice, err := port.NewPort_blueprint(ctx, \"microservice\", \u0026port.Port_blueprintArgs{\nTitle: \"microservice\",\nIcon: \"Terraform\",\nIdentifier: \"microservice\",\nProperties: map[string]interface{}{\n\"stringProps\": map[string]interface{}{\n\"author\": map[string]interface{}{\n\"title\": \"Author\",\n},\n\"url\": map[string]interface{}{\n\"title\": \"URL\",\n},\n},\n\"booleanProps\": map[string]interface{}{\n\"required\": map[string]interface{}{\n\"type\": \"boolean\",\n},\n},\n\"numberProps\": map[string]interface{}{\n\"sum\": map[string]interface{}{\n\"type\": \"number\",\n},\n},\n},\n})\nif err != nil {\nreturn err\n}\n_, err = port.NewPort_scorecard(ctx, \"readiness\", \u0026port.Port_scorecardArgs{\nIdentifier: \"Readiness\",\nTitle: \"Readiness\",\nBlueprint: microservice.Identifier,\nFilter: map[string]interface{}{\n\"combinator\": \"and\",\n\"conditions\": []string{\n%!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n},\n},\nLevels: []map[string]interface{}{\nmap[string]interface{}{\n\"color\": \"red\",\n\"title\": \"No Ready\",\n},\nmap[string]interface{}{\n\"color\": \"yellow\",\n\"title\": \"Partially Ready\",\n},\nmap[string]interface{}{\n\"color\": \"green\",\n\"title\": \"Ready\",\n},\n},\nRules: []interface{}{\nmap[string]interface{}{\n\"identifier\": \"hasOwner\",\n\"title\": \"Has Owner\",\n\"level\": \"Ready\",\n\"query\": map[string]interface{}{\n\"combinator\": \"and\",\n\"conditions\": []string{\n%!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n%!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n},\n},\n},\nmap[string]interface{}{\n\"identifier\": \"hasUrl\",\n\"title\": \"Has URL\",\n\"level\": \"Partially Ready\",\n\"query\": map[string]interface{}{\n\"combinator\": \"and\",\n\"conditions\": []string{\n%!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n},\n},\n},\nmap[string]interface{}{\n\"identifier\": \"checkSumIfRequired\",\n\"title\": \"Check Sum If Required\",\n\"level\": \"Partially Ready\",\n\"query\": map[string]interface{}{\n\"combinator\": \"or\",\n\"conditions\": []string{\n%!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n%!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),\n},\n},\n},\n},\n}, pulumi.DependsOn([]pulumi.Resource{\nmicroservice,\n}))\nif err != nil {\nreturn err\n}\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.port.port_blueprint;\nimport com.pulumi.port.Port_blueprintArgs;\nimport com.pulumi.port.port_scorecard;\nimport com.pulumi.port.Port_scorecardArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var microservice = new Port_blueprint(\"microservice\", Port_blueprintArgs.builder()\n            .title(\"microservice\")\n            .icon(\"Terraform\")\n            .identifier(\"microservice\")\n            .properties(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n        var readiness = new Port_scorecard(\"readiness\", Port_scorecardArgs.builder()\n            .identifier(\"Readiness\")\n            .title(\"Readiness\")\n            .blueprint(microservice.identifier())\n            .filter(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .levels(            \n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .rules(            \n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(microservice)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  microservice:\n    type: port:port_blueprint\n    properties:\n      title: microservice\n      icon: Terraform\n      identifier: microservice\n      properties:\n        stringProps:\n          author:\n            title: Author\n          url:\n            title: URL\n        booleanProps:\n          required:\n            type: boolean\n        numberProps:\n          sum:\n            type: number\n  readiness:\n    type: port:port_scorecard\n    properties:\n      identifier: Readiness\n      title: Readiness\n      blueprint: ${microservice.identifier}\n      filter:\n        combinator: and\n        conditions:\n          - fn::toJSON:\n              property: sum\n              operator: '\u003e'\n              value: 0\n      levels:\n        - color: red\n          title: No Ready\n        - color: yellow\n          title: Partially Ready\n        - color: green\n          title: Ready\n      rules:\n        - identifier: hasOwner\n          title: Has Owner\n          level: Ready\n          query:\n            combinator: and\n            conditions:\n              - fn::toJSON:\n                  property: $team\n                  operator: isNotEmpty\n              - fn::toJSON:\n                  property: author\n                  operator: =\n                  value: myValue\n        - identifier: hasUrl\n          title: Has URL\n          level: Partially Ready\n          query:\n            combinator: and\n            conditions:\n              - fn::toJSON:\n                  property: url\n                  operator: isNotEmpty\n        - identifier: checkSumIfRequired\n          title: Check Sum If Required\n          level: Partially Ready\n          query:\n            combinator: or\n            conditions:\n              - fn::toJSON:\n                  property: required\n                  operator: =\n                  value: false\n              - fn::toJSON:\n                  property: sum\n                  operator: '\u003e'\n                  value: 2\n    options:\n      dependsOn:\n        - ${microservice}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "blueprint": {
                    "type": "string",
                    "description": "The blueprint of the scorecard\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the scorecard\n"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The creator of the scorecard\n"
                },
                "filter": {
                    "$ref": "#/types/port:index/ScorecardFilter:ScorecardFilter",
                    "description": "The filter to apply on the entities before calculating the scorecard\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the scorecard\n"
                },
                "levels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/port:index/ScorecardLevel:ScorecardLevel"
                    },
                    "description": "The levels of the scorecard. This overrides the default levels (Basic, Bronze, Silver, Gold) if provided\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/port:index/ScorecardRule:ScorecardRule"
                    },
                    "description": "The rules of the scorecard\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the scorecard\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update date of the scorecard\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "The last updater of the scorecard\n"
                }
            },
            "required": [
                "blueprint",
                "createdAt",
                "createdBy",
                "identifier",
                "rules",
                "title",
                "updatedAt",
                "updatedBy"
            ],
            "inputProperties": {
                "blueprint": {
                    "type": "string",
                    "description": "The blueprint of the scorecard\n"
                },
                "filter": {
                    "$ref": "#/types/port:index/ScorecardFilter:ScorecardFilter",
                    "description": "The filter to apply on the entities before calculating the scorecard\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the scorecard\n"
                },
                "levels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/port:index/ScorecardLevel:ScorecardLevel"
                    },
                    "description": "The levels of the scorecard. This overrides the default levels (Basic, Bronze, Silver, Gold) if provided\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/port:index/ScorecardRule:ScorecardRule"
                    },
                    "description": "The rules of the scorecard\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the scorecard\n"
                }
            },
            "requiredInputs": [
                "blueprint",
                "identifier",
                "rules",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Scorecard resources.\n",
                "properties": {
                    "blueprint": {
                        "type": "string",
                        "description": "The blueprint of the scorecard\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the scorecard\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The creator of the scorecard\n"
                    },
                    "filter": {
                        "$ref": "#/types/port:index/ScorecardFilter:ScorecardFilter",
                        "description": "The filter to apply on the entities before calculating the scorecard\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "The identifier of the scorecard\n"
                    },
                    "levels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/port:index/ScorecardLevel:ScorecardLevel"
                        },
                        "description": "The levels of the scorecard. This overrides the default levels (Basic, Bronze, Silver, Gold) if provided\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/port:index/ScorecardRule:ScorecardRule"
                        },
                        "description": "The rules of the scorecard\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the scorecard\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the scorecard\n"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The last updater of the scorecard\n"
                    }
                },
                "type": "object"
            }
        },
        "port:index/systemBlueprint:SystemBlueprint": {
            "description": "Port System Blueprint Resource. This resource is used to extend system blueprints with additional properties and relations.\n",
            "properties": {
                "calculationProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/SystemBlueprintCalculationProperties:SystemBlueprintCalculationProperties"
                    },
                    "description": "The calculation properties of the blueprint\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the system blueprint.\n"
                },
                "mirrorProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/SystemBlueprintMirrorProperties:SystemBlueprintMirrorProperties"
                    },
                    "description": "The mirror properties of the blueprint\n"
                },
                "properties": {
                    "$ref": "#/types/port:index/SystemBlueprintProperties:SystemBlueprintProperties",
                    "description": "The properties of the blueprint\n"
                },
                "relations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/SystemBlueprintRelations:SystemBlueprintRelations"
                    },
                    "description": "The relations of the blueprint\n"
                }
            },
            "required": [
                "identifier"
            ],
            "inputProperties": {
                "calculationProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/SystemBlueprintCalculationProperties:SystemBlueprintCalculationProperties"
                    },
                    "description": "The calculation properties of the blueprint\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "Identifier of the system blueprint.\n"
                },
                "mirrorProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/SystemBlueprintMirrorProperties:SystemBlueprintMirrorProperties"
                    },
                    "description": "The mirror properties of the blueprint\n"
                },
                "properties": {
                    "$ref": "#/types/port:index/SystemBlueprintProperties:SystemBlueprintProperties",
                    "description": "The properties of the blueprint\n"
                },
                "relations": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/types/port:index/SystemBlueprintRelations:SystemBlueprintRelations"
                    },
                    "description": "The relations of the blueprint\n"
                }
            },
            "requiredInputs": [
                "identifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SystemBlueprint resources.\n",
                "properties": {
                    "calculationProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/port:index/SystemBlueprintCalculationProperties:SystemBlueprintCalculationProperties"
                        },
                        "description": "The calculation properties of the blueprint\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Identifier of the system blueprint.\n"
                    },
                    "mirrorProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/port:index/SystemBlueprintMirrorProperties:SystemBlueprintMirrorProperties"
                        },
                        "description": "The mirror properties of the blueprint\n"
                    },
                    "properties": {
                        "$ref": "#/types/port:index/SystemBlueprintProperties:SystemBlueprintProperties",
                        "description": "The properties of the blueprint\n"
                    },
                    "relations": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/types/port:index/SystemBlueprintRelations:SystemBlueprintRelations"
                        },
                        "description": "The relations of the blueprint\n"
                    }
                },
                "type": "object"
            }
        },
        "port:index/team:Team": {
            "description": "Team resource\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the team\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the team\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team\n"
                },
                "providerName": {
                    "type": "string",
                    "description": "The provider of the team\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update date of the team\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The users of the team\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "providerName",
                "updatedAt"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the team\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The users of the team\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the team\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the team\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the team\n"
                    },
                    "providerName": {
                        "type": "string",
                        "description": "The provider of the team\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the team\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The users of the team\n"
                    }
                },
                "type": "object"
            }
        },
        "port:index/webhook:Webhook": {
            "description": "Webhook resource\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The creation date of the webhook\n"
                },
                "createdBy": {
                    "type": "string",
                    "description": "The creator of the webhook\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the webhook\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the webhook is enabled\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the webhook\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the webhook\n"
                },
                "mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/port:index/WebhookMapping:WebhookMapping"
                    },
                    "description": "The mappings of the webhook\n"
                },
                "security": {
                    "$ref": "#/types/port:index/WebhookSecurity:WebhookSecurity",
                    "description": "The security of the webhook\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the webhook\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "The last update date of the webhook\n"
                },
                "updatedBy": {
                    "type": "string",
                    "description": "The last updater of the webhook\n"
                },
                "url": {
                    "type": "string",
                    "description": "The url of the webhook\n"
                },
                "webhookKey": {
                    "type": "string",
                    "description": "The webhook key of the webhook\n"
                }
            },
            "required": [
                "createdAt",
                "createdBy",
                "enabled",
                "identifier",
                "updatedAt",
                "updatedBy",
                "url",
                "webhookKey"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the webhook\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the webhook is enabled\n"
                },
                "icon": {
                    "type": "string",
                    "description": "The icon of the webhook\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the webhook\n"
                },
                "mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/port:index/WebhookMapping:WebhookMapping"
                    },
                    "description": "The mappings of the webhook\n"
                },
                "security": {
                    "$ref": "#/types/port:index/WebhookSecurity:WebhookSecurity",
                    "description": "The security of the webhook\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the webhook\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Webhook resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The creation date of the webhook\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "The creator of the webhook\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the webhook\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the webhook is enabled\n"
                    },
                    "icon": {
                        "type": "string",
                        "description": "The icon of the webhook\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "The identifier of the webhook\n"
                    },
                    "mappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/port:index/WebhookMapping:WebhookMapping"
                        },
                        "description": "The mappings of the webhook\n"
                    },
                    "security": {
                        "$ref": "#/types/port:index/WebhookSecurity:WebhookSecurity",
                        "description": "The security of the webhook\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the webhook\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "The last update date of the webhook\n"
                    },
                    "updatedBy": {
                        "type": "string",
                        "description": "The last updater of the webhook\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The url of the webhook\n"
                    },
                    "webhookKey": {
                        "type": "string",
                        "description": "The webhook key of the webhook\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "port:index/getSearch:getSearch": {
            "description": "The search data source allows you to search for entities in Port.\n\nSee the [Port documentation](https://docs.getport.io/search-and-query/) for more information about the search capabilities in Port.\n\n## Example Usage\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSearch.\n",
                "properties": {
                    "attachTitleToRelation": {
                        "type": "boolean",
                        "description": "Attach title to relation\n"
                    },
                    "excludeCalculatedProperties": {
                        "type": "boolean",
                        "description": "Exclude calculated properties\n"
                    },
                    "excludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Properties to exclude from the results\n"
                    },
                    "includes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Properties to include in the results\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "The search query\n"
                    }
                },
                "type": "object",
                "required": [
                    "query"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSearch.\n",
                "properties": {
                    "attachTitleToRelation": {
                        "type": "boolean",
                        "description": "Attach title to relation\n"
                    },
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/port:index/getSearchEntity:getSearchEntity"
                        },
                        "description": "A list of entities matching the search query\n"
                    },
                    "excludeCalculatedProperties": {
                        "type": "boolean",
                        "description": "Exclude calculated properties\n"
                    },
                    "excludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Properties to exclude from the results\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "includes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Properties to include in the results\n"
                    },
                    "matchingBlueprints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The matching blueprints for the search query\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "The search query\n"
                    }
                },
                "type": "object",
                "required": [
                    "entities",
                    "id",
                    "matchingBlueprints",
                    "query"
                ]
            }
        }
    }
}