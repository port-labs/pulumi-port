// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package port

import (
	"context"
	"reflect"

	"errors"
	"github.com/port-labs/pulumi-port/sdk/v2/go/port/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Port System Blueprint Resource. This resource is used to extend system blueprints with additional properties and relations.
type SystemBlueprint struct {
	pulumi.CustomResourceState

	// The calculation properties of the blueprint
	CalculationProperties SystemBlueprintCalculationPropertiesMapOutput `pulumi:"calculationProperties"`
	// Identifier of the system blueprint.
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// The mirror properties of the blueprint
	MirrorProperties SystemBlueprintMirrorPropertiesMapOutput `pulumi:"mirrorProperties"`
	// The properties of the blueprint
	Properties SystemBlueprintPropertiesPtrOutput `pulumi:"properties"`
	// The relations of the blueprint
	Relations SystemBlueprintRelationsMapOutput `pulumi:"relations"`
}

// NewSystemBlueprint registers a new resource with the given unique name, arguments, and options.
func NewSystemBlueprint(ctx *pulumi.Context,
	name string, args *SystemBlueprintArgs, opts ...pulumi.ResourceOption) (*SystemBlueprint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Identifier == nil {
		return nil, errors.New("invalid value for required argument 'Identifier'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemBlueprint
	err := ctx.RegisterResource("port:index/systemBlueprint:SystemBlueprint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemBlueprint gets an existing SystemBlueprint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemBlueprint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemBlueprintState, opts ...pulumi.ResourceOption) (*SystemBlueprint, error) {
	var resource SystemBlueprint
	err := ctx.ReadResource("port:index/systemBlueprint:SystemBlueprint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemBlueprint resources.
type systemBlueprintState struct {
	// The calculation properties of the blueprint
	CalculationProperties map[string]SystemBlueprintCalculationProperties `pulumi:"calculationProperties"`
	// Identifier of the system blueprint.
	Identifier *string `pulumi:"identifier"`
	// The mirror properties of the blueprint
	MirrorProperties map[string]SystemBlueprintMirrorProperties `pulumi:"mirrorProperties"`
	// The properties of the blueprint
	Properties *SystemBlueprintProperties `pulumi:"properties"`
	// The relations of the blueprint
	Relations map[string]SystemBlueprintRelations `pulumi:"relations"`
}

type SystemBlueprintState struct {
	// The calculation properties of the blueprint
	CalculationProperties SystemBlueprintCalculationPropertiesMapInput
	// Identifier of the system blueprint.
	Identifier pulumi.StringPtrInput
	// The mirror properties of the blueprint
	MirrorProperties SystemBlueprintMirrorPropertiesMapInput
	// The properties of the blueprint
	Properties SystemBlueprintPropertiesPtrInput
	// The relations of the blueprint
	Relations SystemBlueprintRelationsMapInput
}

func (SystemBlueprintState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemBlueprintState)(nil)).Elem()
}

type systemBlueprintArgs struct {
	// The calculation properties of the blueprint
	CalculationProperties map[string]SystemBlueprintCalculationProperties `pulumi:"calculationProperties"`
	// Identifier of the system blueprint.
	Identifier string `pulumi:"identifier"`
	// The mirror properties of the blueprint
	MirrorProperties map[string]SystemBlueprintMirrorProperties `pulumi:"mirrorProperties"`
	// The properties of the blueprint
	Properties *SystemBlueprintProperties `pulumi:"properties"`
	// The relations of the blueprint
	Relations map[string]SystemBlueprintRelations `pulumi:"relations"`
}

// The set of arguments for constructing a SystemBlueprint resource.
type SystemBlueprintArgs struct {
	// The calculation properties of the blueprint
	CalculationProperties SystemBlueprintCalculationPropertiesMapInput
	// Identifier of the system blueprint.
	Identifier pulumi.StringInput
	// The mirror properties of the blueprint
	MirrorProperties SystemBlueprintMirrorPropertiesMapInput
	// The properties of the blueprint
	Properties SystemBlueprintPropertiesPtrInput
	// The relations of the blueprint
	Relations SystemBlueprintRelationsMapInput
}

func (SystemBlueprintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemBlueprintArgs)(nil)).Elem()
}

type SystemBlueprintInput interface {
	pulumi.Input

	ToSystemBlueprintOutput() SystemBlueprintOutput
	ToSystemBlueprintOutputWithContext(ctx context.Context) SystemBlueprintOutput
}

func (*SystemBlueprint) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemBlueprint)(nil)).Elem()
}

func (i *SystemBlueprint) ToSystemBlueprintOutput() SystemBlueprintOutput {
	return i.ToSystemBlueprintOutputWithContext(context.Background())
}

func (i *SystemBlueprint) ToSystemBlueprintOutputWithContext(ctx context.Context) SystemBlueprintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemBlueprintOutput)
}

// SystemBlueprintArrayInput is an input type that accepts SystemBlueprintArray and SystemBlueprintArrayOutput values.
// You can construct a concrete instance of `SystemBlueprintArrayInput` via:
//
//	SystemBlueprintArray{ SystemBlueprintArgs{...} }
type SystemBlueprintArrayInput interface {
	pulumi.Input

	ToSystemBlueprintArrayOutput() SystemBlueprintArrayOutput
	ToSystemBlueprintArrayOutputWithContext(context.Context) SystemBlueprintArrayOutput
}

type SystemBlueprintArray []SystemBlueprintInput

func (SystemBlueprintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemBlueprint)(nil)).Elem()
}

func (i SystemBlueprintArray) ToSystemBlueprintArrayOutput() SystemBlueprintArrayOutput {
	return i.ToSystemBlueprintArrayOutputWithContext(context.Background())
}

func (i SystemBlueprintArray) ToSystemBlueprintArrayOutputWithContext(ctx context.Context) SystemBlueprintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemBlueprintArrayOutput)
}

// SystemBlueprintMapInput is an input type that accepts SystemBlueprintMap and SystemBlueprintMapOutput values.
// You can construct a concrete instance of `SystemBlueprintMapInput` via:
//
//	SystemBlueprintMap{ "key": SystemBlueprintArgs{...} }
type SystemBlueprintMapInput interface {
	pulumi.Input

	ToSystemBlueprintMapOutput() SystemBlueprintMapOutput
	ToSystemBlueprintMapOutputWithContext(context.Context) SystemBlueprintMapOutput
}

type SystemBlueprintMap map[string]SystemBlueprintInput

func (SystemBlueprintMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemBlueprint)(nil)).Elem()
}

func (i SystemBlueprintMap) ToSystemBlueprintMapOutput() SystemBlueprintMapOutput {
	return i.ToSystemBlueprintMapOutputWithContext(context.Background())
}

func (i SystemBlueprintMap) ToSystemBlueprintMapOutputWithContext(ctx context.Context) SystemBlueprintMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemBlueprintMapOutput)
}

type SystemBlueprintOutput struct{ *pulumi.OutputState }

func (SystemBlueprintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemBlueprint)(nil)).Elem()
}

func (o SystemBlueprintOutput) ToSystemBlueprintOutput() SystemBlueprintOutput {
	return o
}

func (o SystemBlueprintOutput) ToSystemBlueprintOutputWithContext(ctx context.Context) SystemBlueprintOutput {
	return o
}

// The calculation properties of the blueprint
func (o SystemBlueprintOutput) CalculationProperties() SystemBlueprintCalculationPropertiesMapOutput {
	return o.ApplyT(func(v *SystemBlueprint) SystemBlueprintCalculationPropertiesMapOutput { return v.CalculationProperties }).(SystemBlueprintCalculationPropertiesMapOutput)
}

// Identifier of the system blueprint.
func (o SystemBlueprintOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemBlueprint) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// The mirror properties of the blueprint
func (o SystemBlueprintOutput) MirrorProperties() SystemBlueprintMirrorPropertiesMapOutput {
	return o.ApplyT(func(v *SystemBlueprint) SystemBlueprintMirrorPropertiesMapOutput { return v.MirrorProperties }).(SystemBlueprintMirrorPropertiesMapOutput)
}

// The properties of the blueprint
func (o SystemBlueprintOutput) Properties() SystemBlueprintPropertiesPtrOutput {
	return o.ApplyT(func(v *SystemBlueprint) SystemBlueprintPropertiesPtrOutput { return v.Properties }).(SystemBlueprintPropertiesPtrOutput)
}

// The relations of the blueprint
func (o SystemBlueprintOutput) Relations() SystemBlueprintRelationsMapOutput {
	return o.ApplyT(func(v *SystemBlueprint) SystemBlueprintRelationsMapOutput { return v.Relations }).(SystemBlueprintRelationsMapOutput)
}

type SystemBlueprintArrayOutput struct{ *pulumi.OutputState }

func (SystemBlueprintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemBlueprint)(nil)).Elem()
}

func (o SystemBlueprintArrayOutput) ToSystemBlueprintArrayOutput() SystemBlueprintArrayOutput {
	return o
}

func (o SystemBlueprintArrayOutput) ToSystemBlueprintArrayOutputWithContext(ctx context.Context) SystemBlueprintArrayOutput {
	return o
}

func (o SystemBlueprintArrayOutput) Index(i pulumi.IntInput) SystemBlueprintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemBlueprint {
		return vs[0].([]*SystemBlueprint)[vs[1].(int)]
	}).(SystemBlueprintOutput)
}

type SystemBlueprintMapOutput struct{ *pulumi.OutputState }

func (SystemBlueprintMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemBlueprint)(nil)).Elem()
}

func (o SystemBlueprintMapOutput) ToSystemBlueprintMapOutput() SystemBlueprintMapOutput {
	return o
}

func (o SystemBlueprintMapOutput) ToSystemBlueprintMapOutputWithContext(ctx context.Context) SystemBlueprintMapOutput {
	return o
}

func (o SystemBlueprintMapOutput) MapIndex(k pulumi.StringInput) SystemBlueprintOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemBlueprint {
		return vs[0].(map[string]*SystemBlueprint)[vs[1].(string)]
	}).(SystemBlueprintOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemBlueprintInput)(nil)).Elem(), &SystemBlueprint{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemBlueprintArrayInput)(nil)).Elem(), SystemBlueprintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemBlueprintMapInput)(nil)).Elem(), SystemBlueprintMap{})
	pulumi.RegisterOutputType(SystemBlueprintOutput{})
	pulumi.RegisterOutputType(SystemBlueprintArrayOutput{})
	pulumi.RegisterOutputType(SystemBlueprintMapOutput{})
}
