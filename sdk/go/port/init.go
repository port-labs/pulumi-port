// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package port

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/port-labs/pulumi-port/sdk/v2/go/port/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "port:index/action:Action":
		r = &Action{}
	case "port:index/actionPermissions:ActionPermissions":
		r = &ActionPermissions{}
	case "port:index/aggregationProperties:AggregationProperties":
		r = &AggregationProperties{}
	case "port:index/blueprint:Blueprint":
		r = &Blueprint{}
	case "port:index/blueprintPermissions:BlueprintPermissions":
		r = &BlueprintPermissions{}
	case "port:index/entity:Entity":
		r = &Entity{}
	case "port:index/folder:Folder":
		r = &Folder{}
	case "port:index/integration:Integration":
		r = &Integration{}
	case "port:index/organizationSecret:OrganizationSecret":
		r = &OrganizationSecret{}
	case "port:index/page:Page":
		r = &Page{}
	case "port:index/pagePermissions:PagePermissions":
		r = &PagePermissions{}
	case "port:index/scorecard:Scorecard":
		r = &Scorecard{}
	case "port:index/systemBlueprint:SystemBlueprint":
		r = &SystemBlueprint{}
	case "port:index/team:Team":
		r = &Team{}
	case "port:index/webhook:Webhook":
		r = &Webhook{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:port" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"port",
		"index/action",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"port",
		"index/actionPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"port",
		"index/aggregationProperties",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"port",
		"index/blueprint",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"port",
		"index/blueprintPermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"port",
		"index/entity",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"port",
		"index/folder",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"port",
		"index/integration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"port",
		"index/organizationSecret",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"port",
		"index/page",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"port",
		"index/pagePermissions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"port",
		"index/scorecard",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"port",
		"index/systemBlueprint",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"port",
		"index/team",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"port",
		"index/webhook",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"port",
		&pkg{version},
	)
}
