// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package port

import (
	"context"
	"reflect"

	"github.com/port-labs/pulumi-port/sdk/v2/go/port/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Webhook resource can be used to create webhooks integrations in Port.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/port-labs/pulumi-port/sdk/v2/go/port"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// author, err := port.NewPort_blueprint(ctx, "author", &port.Port_blueprintArgs{
// Title: "Author",
// Icon: "User",
// Identifier: "author",
// Properties: map[string]interface{}{
// "stringProps": map[string]interface{}{
// "name": map[string]interface{}{
// "type": "string",
// "title": "Name",
// },
// },
// },
// })
// if err != nil {
// return err
// }
// team, err := port.NewPort_blueprint(ctx, "team", &port.Port_blueprintArgs{
// Title: "Team",
// Icon: "Team",
// Identifier: "team",
// Properties: map[string]interface{}{
// "stringProps": map[string]interface{}{
// "name": map[string]interface{}{
// "type": "string",
// "title": "Team Name",
// },
// },
// },
// })
// if err != nil {
// return err
// }
// microservice, err := port.NewPort_blueprint(ctx, "microservice", &port.Port_blueprintArgs{
// Title: "TF test microservice",
// Icon: "Terraform",
// Identifier: "microservice",
// Properties: map[string]interface{}{
// "stringProps": map[string]interface{}{
// "url": map[string]interface{}{
// "type": "string",
// "title": "URL",
// },
// },
// },
// Relations: map[string]interface{}{
// "author": map[string]interface{}{
// "title": "Author",
// "target": author.Identifier,
// },
// "team": map[string]interface{}{
// "title": "Team",
// "target": team.Identifier,
// },
// },
// })
// if err != nil {
// return err
// }
// _, err = port.NewPort_webhook(ctx, "createPr", &port.Port_webhookArgs{
// Identifier: "pr_webhook",
// Title: "Webhook with mixed relations",
// Icon: "Terraform",
// Enabled: true,
// Mappings: []map[string]interface{}{
// map[string]interface{}{
// "blueprint": microservice.Identifier,
// "operation": map[string]interface{}{
// "type": "create",
// },
// "filter": ".headers.\"x-github-event\" == \"pull_request\"",
// "entity": map[string]interface{}{
// "identifier": ".body.pull_request.id | tostring",
// "title": ".body.pull_request.title",
// "properties": map[string]interface{}{
// "url": ".body.pull_request.html_url",
// },
// "relations": map[string]interface{}{
// "author": %!v(PANIC=Format method: fatal: An assertion has failed: unlowered function toJSON),
// "team": ".body.repository.owner.login | tostring",
// },
// },
// },
// },
// }, pulumi.DependsOn([]pulumi.Resource{
// microservice,
// author,
// team,
// }))
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Notes
//
// - When using object format for relations, `combinator`, `property` and `operator` fields should be enclosed in single quotes, while `value` should not have quotes as it's a JQ expression. The single quotes are required because these fields contain literal string values that must be passed as-is to the Port API, whereas `value` contains a JQ expression that should be evaluated dynamically.
// - For all available operators, see the [Port comparison operators documentation](https://docs.port.io/search-and-query/comparison-operators).
type Webhook struct {
	pulumi.CustomResourceState

	// The creation date of the webhook
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The creator of the webhook
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// The description of the webhook
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the webhook is enabled
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The icon of the webhook
	Icon pulumi.StringPtrOutput `pulumi:"icon"`
	// The identifier of the webhook
	Identifier pulumi.StringOutput `pulumi:"identifier"`
	// The mappings of the webhook
	Mappings WebhookMappingArrayOutput `pulumi:"mappings"`
	// The security of the webhook
	Security WebhookSecurityPtrOutput `pulumi:"security"`
	// The title of the webhook
	Title pulumi.StringPtrOutput `pulumi:"title"`
	// The last update date of the webhook
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The last updater of the webhook
	UpdatedBy pulumi.StringOutput `pulumi:"updatedBy"`
	// The url of the webhook
	Url pulumi.StringOutput `pulumi:"url"`
	// The webhook key of the webhook
	WebhookKey pulumi.StringOutput `pulumi:"webhookKey"`
}

// NewWebhook registers a new resource with the given unique name, arguments, and options.
func NewWebhook(ctx *pulumi.Context,
	name string, args *WebhookArgs, opts ...pulumi.ResourceOption) (*Webhook, error) {
	if args == nil {
		args = &WebhookArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Webhook
	err := ctx.RegisterResource("port:index/webhook:Webhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebhook gets an existing Webhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebhookState, opts ...pulumi.ResourceOption) (*Webhook, error) {
	var resource Webhook
	err := ctx.ReadResource("port:index/webhook:Webhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Webhook resources.
type webhookState struct {
	// The creation date of the webhook
	CreatedAt *string `pulumi:"createdAt"`
	// The creator of the webhook
	CreatedBy *string `pulumi:"createdBy"`
	// The description of the webhook
	Description *string `pulumi:"description"`
	// Whether the webhook is enabled
	Enabled *bool `pulumi:"enabled"`
	// The icon of the webhook
	Icon *string `pulumi:"icon"`
	// The identifier of the webhook
	Identifier *string `pulumi:"identifier"`
	// The mappings of the webhook
	Mappings []WebhookMapping `pulumi:"mappings"`
	// The security of the webhook
	Security *WebhookSecurity `pulumi:"security"`
	// The title of the webhook
	Title *string `pulumi:"title"`
	// The last update date of the webhook
	UpdatedAt *string `pulumi:"updatedAt"`
	// The last updater of the webhook
	UpdatedBy *string `pulumi:"updatedBy"`
	// The url of the webhook
	Url *string `pulumi:"url"`
	// The webhook key of the webhook
	WebhookKey *string `pulumi:"webhookKey"`
}

type WebhookState struct {
	// The creation date of the webhook
	CreatedAt pulumi.StringPtrInput
	// The creator of the webhook
	CreatedBy pulumi.StringPtrInput
	// The description of the webhook
	Description pulumi.StringPtrInput
	// Whether the webhook is enabled
	Enabled pulumi.BoolPtrInput
	// The icon of the webhook
	Icon pulumi.StringPtrInput
	// The identifier of the webhook
	Identifier pulumi.StringPtrInput
	// The mappings of the webhook
	Mappings WebhookMappingArrayInput
	// The security of the webhook
	Security WebhookSecurityPtrInput
	// The title of the webhook
	Title pulumi.StringPtrInput
	// The last update date of the webhook
	UpdatedAt pulumi.StringPtrInput
	// The last updater of the webhook
	UpdatedBy pulumi.StringPtrInput
	// The url of the webhook
	Url pulumi.StringPtrInput
	// The webhook key of the webhook
	WebhookKey pulumi.StringPtrInput
}

func (WebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookState)(nil)).Elem()
}

type webhookArgs struct {
	// The description of the webhook
	Description *string `pulumi:"description"`
	// Whether the webhook is enabled
	Enabled *bool `pulumi:"enabled"`
	// The icon of the webhook
	Icon *string `pulumi:"icon"`
	// The identifier of the webhook
	Identifier *string `pulumi:"identifier"`
	// The mappings of the webhook
	Mappings []WebhookMapping `pulumi:"mappings"`
	// The security of the webhook
	Security *WebhookSecurity `pulumi:"security"`
	// The title of the webhook
	Title *string `pulumi:"title"`
}

// The set of arguments for constructing a Webhook resource.
type WebhookArgs struct {
	// The description of the webhook
	Description pulumi.StringPtrInput
	// Whether the webhook is enabled
	Enabled pulumi.BoolPtrInput
	// The icon of the webhook
	Icon pulumi.StringPtrInput
	// The identifier of the webhook
	Identifier pulumi.StringPtrInput
	// The mappings of the webhook
	Mappings WebhookMappingArrayInput
	// The security of the webhook
	Security WebhookSecurityPtrInput
	// The title of the webhook
	Title pulumi.StringPtrInput
}

func (WebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookArgs)(nil)).Elem()
}

type WebhookInput interface {
	pulumi.Input

	ToWebhookOutput() WebhookOutput
	ToWebhookOutputWithContext(ctx context.Context) WebhookOutput
}

func (*Webhook) ElementType() reflect.Type {
	return reflect.TypeOf((**Webhook)(nil)).Elem()
}

func (i *Webhook) ToWebhookOutput() WebhookOutput {
	return i.ToWebhookOutputWithContext(context.Background())
}

func (i *Webhook) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookOutput)
}

// WebhookArrayInput is an input type that accepts WebhookArray and WebhookArrayOutput values.
// You can construct a concrete instance of `WebhookArrayInput` via:
//
//	WebhookArray{ WebhookArgs{...} }
type WebhookArrayInput interface {
	pulumi.Input

	ToWebhookArrayOutput() WebhookArrayOutput
	ToWebhookArrayOutputWithContext(context.Context) WebhookArrayOutput
}

type WebhookArray []WebhookInput

func (WebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Webhook)(nil)).Elem()
}

func (i WebhookArray) ToWebhookArrayOutput() WebhookArrayOutput {
	return i.ToWebhookArrayOutputWithContext(context.Background())
}

func (i WebhookArray) ToWebhookArrayOutputWithContext(ctx context.Context) WebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookArrayOutput)
}

// WebhookMapInput is an input type that accepts WebhookMap and WebhookMapOutput values.
// You can construct a concrete instance of `WebhookMapInput` via:
//
//	WebhookMap{ "key": WebhookArgs{...} }
type WebhookMapInput interface {
	pulumi.Input

	ToWebhookMapOutput() WebhookMapOutput
	ToWebhookMapOutputWithContext(context.Context) WebhookMapOutput
}

type WebhookMap map[string]WebhookInput

func (WebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Webhook)(nil)).Elem()
}

func (i WebhookMap) ToWebhookMapOutput() WebhookMapOutput {
	return i.ToWebhookMapOutputWithContext(context.Background())
}

func (i WebhookMap) ToWebhookMapOutputWithContext(ctx context.Context) WebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookMapOutput)
}

type WebhookOutput struct{ *pulumi.OutputState }

func (WebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Webhook)(nil)).Elem()
}

func (o WebhookOutput) ToWebhookOutput() WebhookOutput {
	return o
}

func (o WebhookOutput) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return o
}

// The creation date of the webhook
func (o WebhookOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The creator of the webhook
func (o WebhookOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// The description of the webhook
func (o WebhookOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the webhook is enabled
func (o WebhookOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Webhook) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The icon of the webhook
func (o WebhookOutput) Icon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringPtrOutput { return v.Icon }).(pulumi.StringPtrOutput)
}

// The identifier of the webhook
func (o WebhookOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.Identifier }).(pulumi.StringOutput)
}

// The mappings of the webhook
func (o WebhookOutput) Mappings() WebhookMappingArrayOutput {
	return o.ApplyT(func(v *Webhook) WebhookMappingArrayOutput { return v.Mappings }).(WebhookMappingArrayOutput)
}

// The security of the webhook
func (o WebhookOutput) Security() WebhookSecurityPtrOutput {
	return o.ApplyT(func(v *Webhook) WebhookSecurityPtrOutput { return v.Security }).(WebhookSecurityPtrOutput)
}

// The title of the webhook
func (o WebhookOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringPtrOutput { return v.Title }).(pulumi.StringPtrOutput)
}

// The last update date of the webhook
func (o WebhookOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The last updater of the webhook
func (o WebhookOutput) UpdatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.UpdatedBy }).(pulumi.StringOutput)
}

// The url of the webhook
func (o WebhookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The webhook key of the webhook
func (o WebhookOutput) WebhookKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.WebhookKey }).(pulumi.StringOutput)
}

type WebhookArrayOutput struct{ *pulumi.OutputState }

func (WebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Webhook)(nil)).Elem()
}

func (o WebhookArrayOutput) ToWebhookArrayOutput() WebhookArrayOutput {
	return o
}

func (o WebhookArrayOutput) ToWebhookArrayOutputWithContext(ctx context.Context) WebhookArrayOutput {
	return o
}

func (o WebhookArrayOutput) Index(i pulumi.IntInput) WebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Webhook {
		return vs[0].([]*Webhook)[vs[1].(int)]
	}).(WebhookOutput)
}

type WebhookMapOutput struct{ *pulumi.OutputState }

func (WebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Webhook)(nil)).Elem()
}

func (o WebhookMapOutput) ToWebhookMapOutput() WebhookMapOutput {
	return o
}

func (o WebhookMapOutput) ToWebhookMapOutputWithContext(ctx context.Context) WebhookMapOutput {
	return o
}

func (o WebhookMapOutput) MapIndex(k pulumi.StringInput) WebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Webhook {
		return vs[0].(map[string]*Webhook)[vs[1].(string)]
	}).(WebhookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookInput)(nil)).Elem(), &Webhook{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookArrayInput)(nil)).Elem(), WebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookMapInput)(nil)).Elem(), WebhookMap{})
	pulumi.RegisterOutputType(WebhookOutput{})
	pulumi.RegisterOutputType(WebhookArrayOutput{})
	pulumi.RegisterOutputType(WebhookMapOutput{})
}
