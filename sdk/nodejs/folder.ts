// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A full list of the available folder types and their identifiers can be found [here](https://docs.getport.io/customize-pages-dashboards-and-plugins/folder/catalog-folder).
 *
 * > **WARNING**
 * The folder resource is currently in beta and is subject to change in future versions.
 * Use it by setting the Environment Variable `PORT_BETA_FEATURES_ENABLED=true`.
 * If this Environment Variable isn't specified, you won't be able to use the resource.
 *
 * ## Example Usage
 *
 * ### Basic Folder
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as port from "@pulumi/port";
 *
 * const exampleFolder = new port.index.Port_folder("exampleFolder", {
 *     identifier: "example_folder",
 *     title: "Example Folder",
 * });
 * ```
 *
 * ### Folder with Parent
 *
 * Create a folder inside another folder.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as port from "@pulumi/port";
 *
 * const childFolder = new port.index.Port_folder("childFolder", {
 *     identifier: "child_folder",
 *     parent: port_folder.example_folder.identifier,
 *     title: "Child Folder",
 * });
 * ```
 *
 * ### Folder with After
 *
 * Create a folder after another folder.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as port from "@pulumi/port";
 *
 * const anotherFolder = new port.index.Port_folder("anotherFolder", {
 *     identifier: "another_folder",
 *     after: port_folder.example_folder.identifier,
 *     title: "Another Folder",
 * });
 * ```
 */
export class Folder extends pulumi.CustomResource {
    /**
     * Get an existing Folder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FolderState, opts?: pulumi.CustomResourceOptions): Folder {
        return new Folder(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'port:index/folder:Folder';

    /**
     * Returns true if the given object is an instance of Folder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Folder {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Folder.__pulumiType;
    }

    /**
     * The identifier of the folder after which the folder should be placed
     */
    public readonly after!: pulumi.Output<string | undefined>;
    /**
     * The identifier of the folder
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * The identifier of the parent folder
     */
    public readonly parent!: pulumi.Output<string | undefined>;
    /**
     * The title of the folder
     */
    public readonly title!: pulumi.Output<string | undefined>;

    /**
     * Create a Folder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FolderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FolderArgs | FolderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FolderState | undefined;
            resourceInputs["after"] = state ? state.after : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as FolderArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            resourceInputs["after"] = args ? args.after : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Folder.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Folder resources.
 */
export interface FolderState {
    /**
     * The identifier of the folder after which the folder should be placed
     */
    after?: pulumi.Input<string>;
    /**
     * The identifier of the folder
     */
    identifier?: pulumi.Input<string>;
    /**
     * The identifier of the parent folder
     */
    parent?: pulumi.Input<string>;
    /**
     * The title of the folder
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Folder resource.
 */
export interface FolderArgs {
    /**
     * The identifier of the folder after which the folder should be placed
     */
    after?: pulumi.Input<string>;
    /**
     * The identifier of the folder
     */
    identifier: pulumi.Input<string>;
    /**
     * The identifier of the parent folder
     */
    parent?: pulumi.Input<string>;
    /**
     * The title of the folder
     */
    title?: pulumi.Input<string>;
}
