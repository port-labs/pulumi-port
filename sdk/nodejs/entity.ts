// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Entity resource
 */
export class Entity extends pulumi.CustomResource {
    /**
     * Get an existing Entity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EntityState, opts?: pulumi.CustomResourceOptions): Entity {
        return new Entity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'port:index/entity:Entity';

    /**
     * Returns true if the given object is an instance of Entity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Entity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Entity.__pulumiType;
    }

    /**
     * The blueprint identifier the entity relates to
     */
    public readonly blueprint!: pulumi.Output<string>;
    /**
     * Whether to create missing related entities
     */
    public readonly createMissingRelatedEntities!: pulumi.Output<boolean>;
    /**
     * The creation date of the entity
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The creator of the entity
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * The icon of the entity
     */
    public readonly icon!: pulumi.Output<string | undefined>;
    /**
     * The identifier of the entity
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * The properties of the entity
     */
    public readonly properties!: pulumi.Output<outputs.EntityProperties | undefined>;
    /**
     * The relations of the entity
     */
    public readonly relations!: pulumi.Output<outputs.EntityRelations | undefined>;
    /**
     * The runID of the action run that created the entity
     */
    public readonly runId!: pulumi.Output<string | undefined>;
    /**
     * The teams the entity belongs to
     */
    public readonly teams!: pulumi.Output<string[] | undefined>;
    /**
     * The title of the entity
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * The last update date of the entity
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The last updater of the entity
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<string>;

    /**
     * Create a Entity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EntityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EntityArgs | EntityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EntityState | undefined;
            resourceInputs["blueprint"] = state ? state.blueprint : undefined;
            resourceInputs["createMissingRelatedEntities"] = state ? state.createMissingRelatedEntities : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["icon"] = state ? state.icon : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["relations"] = state ? state.relations : undefined;
            resourceInputs["runId"] = state ? state.runId : undefined;
            resourceInputs["teams"] = state ? state.teams : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
        } else {
            const args = argsOrState as EntityArgs | undefined;
            if ((!args || args.blueprint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprint'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["blueprint"] = args ? args.blueprint : undefined;
            resourceInputs["createMissingRelatedEntities"] = args ? args.createMissingRelatedEntities : undefined;
            resourceInputs["icon"] = args ? args.icon : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["relations"] = args ? args.relations : undefined;
            resourceInputs["runId"] = args ? args.runId : undefined;
            resourceInputs["teams"] = args ? args.teams : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Entity.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Entity resources.
 */
export interface EntityState {
    /**
     * The blueprint identifier the entity relates to
     */
    blueprint?: pulumi.Input<string>;
    /**
     * Whether to create missing related entities
     */
    createMissingRelatedEntities?: pulumi.Input<boolean>;
    /**
     * The creation date of the entity
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The creator of the entity
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The icon of the entity
     */
    icon?: pulumi.Input<string>;
    /**
     * The identifier of the entity
     */
    identifier?: pulumi.Input<string>;
    /**
     * The properties of the entity
     */
    properties?: pulumi.Input<inputs.EntityProperties>;
    /**
     * The relations of the entity
     */
    relations?: pulumi.Input<inputs.EntityRelations>;
    /**
     * The runID of the action run that created the entity
     */
    runId?: pulumi.Input<string>;
    /**
     * The teams the entity belongs to
     */
    teams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The title of the entity
     */
    title?: pulumi.Input<string>;
    /**
     * The last update date of the entity
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The last updater of the entity
     */
    updatedBy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Entity resource.
 */
export interface EntityArgs {
    /**
     * The blueprint identifier the entity relates to
     */
    blueprint: pulumi.Input<string>;
    /**
     * Whether to create missing related entities
     */
    createMissingRelatedEntities?: pulumi.Input<boolean>;
    /**
     * The icon of the entity
     */
    icon?: pulumi.Input<string>;
    /**
     * The identifier of the entity
     */
    identifier?: pulumi.Input<string>;
    /**
     * The properties of the entity
     */
    properties?: pulumi.Input<inputs.EntityProperties>;
    /**
     * The relations of the entity
     */
    relations?: pulumi.Input<inputs.EntityRelations>;
    /**
     * The runID of the action run that created the entity
     */
    runId?: pulumi.Input<string>;
    /**
     * The teams the entity belongs to
     */
    teams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The title of the entity
     */
    title: pulumi.Input<string>;
}
