# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ActionApprovalEmailNotificationArgs',
    'ActionApprovalEmailNotificationArgsDict',
    'ActionApprovalWebhookNotificationArgs',
    'ActionApprovalWebhookNotificationArgsDict',
    'ActionAutomationTriggerArgs',
    'ActionAutomationTriggerArgsDict',
    'ActionAutomationTriggerAnyEntityChangeEventArgs',
    'ActionAutomationTriggerAnyEntityChangeEventArgsDict',
    'ActionAutomationTriggerAnyRunChangeEventArgs',
    'ActionAutomationTriggerAnyRunChangeEventArgsDict',
    'ActionAutomationTriggerEntityCreatedEventArgs',
    'ActionAutomationTriggerEntityCreatedEventArgsDict',
    'ActionAutomationTriggerEntityDeletedEventArgs',
    'ActionAutomationTriggerEntityDeletedEventArgsDict',
    'ActionAutomationTriggerEntityUpdatedEventArgs',
    'ActionAutomationTriggerEntityUpdatedEventArgsDict',
    'ActionAutomationTriggerJqConditionArgs',
    'ActionAutomationTriggerJqConditionArgsDict',
    'ActionAutomationTriggerRunCreatedEventArgs',
    'ActionAutomationTriggerRunCreatedEventArgsDict',
    'ActionAutomationTriggerRunUpdatedEventArgs',
    'ActionAutomationTriggerRunUpdatedEventArgsDict',
    'ActionAutomationTriggerTimerPropertyExpiredEventArgs',
    'ActionAutomationTriggerTimerPropertyExpiredEventArgsDict',
    'ActionAzureMethodArgs',
    'ActionAzureMethodArgsDict',
    'ActionGithubMethodArgs',
    'ActionGithubMethodArgsDict',
    'ActionGitlabMethodArgs',
    'ActionGitlabMethodArgsDict',
    'ActionKafkaMethodArgs',
    'ActionKafkaMethodArgsDict',
    'ActionPermissionsPermissionsArgs',
    'ActionPermissionsPermissionsArgsDict',
    'ActionPermissionsPermissionsApproveArgs',
    'ActionPermissionsPermissionsApproveArgsDict',
    'ActionPermissionsPermissionsExecuteArgs',
    'ActionPermissionsPermissionsExecuteArgsDict',
    'ActionSelfServiceTriggerArgs',
    'ActionSelfServiceTriggerArgsDict',
    'ActionSelfServiceTriggerStepArgs',
    'ActionSelfServiceTriggerStepArgsDict',
    'ActionSelfServiceTriggerUserPropertiesArgs',
    'ActionSelfServiceTriggerUserPropertiesArgsDict',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsArgs',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsArgsDict',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItemsArgs',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItemsArgsDict',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItemsArgs',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItemsArgsDict',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItemsArgs',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItemsArgsDict',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsSortArgs',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsSortArgsDict',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsStringItemsArgs',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsStringItemsArgsDict',
    'ActionSelfServiceTriggerUserPropertiesBooleanPropsArgs',
    'ActionSelfServiceTriggerUserPropertiesBooleanPropsArgsDict',
    'ActionSelfServiceTriggerUserPropertiesNumberPropsArgs',
    'ActionSelfServiceTriggerUserPropertiesNumberPropsArgsDict',
    'ActionSelfServiceTriggerUserPropertiesObjectPropsArgs',
    'ActionSelfServiceTriggerUserPropertiesObjectPropsArgsDict',
    'ActionSelfServiceTriggerUserPropertiesStringPropsArgs',
    'ActionSelfServiceTriggerUserPropertiesStringPropsArgsDict',
    'ActionSelfServiceTriggerUserPropertiesStringPropsDatasetArgs',
    'ActionSelfServiceTriggerUserPropertiesStringPropsDatasetArgsDict',
    'ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleArgs',
    'ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleArgsDict',
    'ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValueArgs',
    'ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValueArgsDict',
    'ActionSelfServiceTriggerUserPropertiesStringPropsSortArgs',
    'ActionSelfServiceTriggerUserPropertiesStringPropsSortArgsDict',
    'ActionUpsertEntityMethodArgs',
    'ActionUpsertEntityMethodArgsDict',
    'ActionUpsertEntityMethodMappingArgs',
    'ActionUpsertEntityMethodMappingArgsDict',
    'ActionWebhookMethodArgs',
    'ActionWebhookMethodArgsDict',
    'AggregationPropertiesPropertiesArgs',
    'AggregationPropertiesPropertiesArgsDict',
    'AggregationPropertiesPropertiesMethodArgs',
    'AggregationPropertiesPropertiesMethodArgsDict',
    'AggregationPropertiesPropertiesMethodAggregateByPropertyArgs',
    'AggregationPropertiesPropertiesMethodAggregateByPropertyArgsDict',
    'AggregationPropertiesPropertiesMethodAverageByPropertyArgs',
    'AggregationPropertiesPropertiesMethodAverageByPropertyArgsDict',
    'AggregationPropertiesPropertiesMethodAverageEntitiesArgs',
    'AggregationPropertiesPropertiesMethodAverageEntitiesArgsDict',
    'BlueprintCalculationPropertiesArgs',
    'BlueprintCalculationPropertiesArgsDict',
    'BlueprintKafkaChangelogDestinationArgs',
    'BlueprintKafkaChangelogDestinationArgsDict',
    'BlueprintMirrorPropertiesArgs',
    'BlueprintMirrorPropertiesArgsDict',
    'BlueprintOwnershipArgs',
    'BlueprintOwnershipArgsDict',
    'BlueprintPermissionsEntitiesArgs',
    'BlueprintPermissionsEntitiesArgsDict',
    'BlueprintPermissionsEntitiesRegisterArgs',
    'BlueprintPermissionsEntitiesRegisterArgsDict',
    'BlueprintPermissionsEntitiesUnregisterArgs',
    'BlueprintPermissionsEntitiesUnregisterArgsDict',
    'BlueprintPermissionsEntitiesUpdateArgs',
    'BlueprintPermissionsEntitiesUpdateArgsDict',
    'BlueprintPermissionsEntitiesUpdateMetadataPropertiesArgs',
    'BlueprintPermissionsEntitiesUpdateMetadataPropertiesArgsDict',
    'BlueprintPermissionsEntitiesUpdateMetadataPropertiesIconArgs',
    'BlueprintPermissionsEntitiesUpdateMetadataPropertiesIconArgsDict',
    'BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifierArgs',
    'BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifierArgsDict',
    'BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeamArgs',
    'BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeamArgsDict',
    'BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitleArgs',
    'BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitleArgsDict',
    'BlueprintPermissionsEntitiesUpdatePropertiesArgs',
    'BlueprintPermissionsEntitiesUpdatePropertiesArgsDict',
    'BlueprintPermissionsEntitiesUpdateRelationsArgs',
    'BlueprintPermissionsEntitiesUpdateRelationsArgsDict',
    'BlueprintPropertiesArgs',
    'BlueprintPropertiesArgsDict',
    'BlueprintPropertiesArrayPropsArgs',
    'BlueprintPropertiesArrayPropsArgsDict',
    'BlueprintPropertiesArrayPropsBooleanItemsArgs',
    'BlueprintPropertiesArrayPropsBooleanItemsArgsDict',
    'BlueprintPropertiesArrayPropsNumberItemsArgs',
    'BlueprintPropertiesArrayPropsNumberItemsArgsDict',
    'BlueprintPropertiesArrayPropsObjectItemsArgs',
    'BlueprintPropertiesArrayPropsObjectItemsArgsDict',
    'BlueprintPropertiesArrayPropsStringItemsArgs',
    'BlueprintPropertiesArrayPropsStringItemsArgsDict',
    'BlueprintPropertiesBooleanPropsArgs',
    'BlueprintPropertiesBooleanPropsArgsDict',
    'BlueprintPropertiesNumberPropsArgs',
    'BlueprintPropertiesNumberPropsArgsDict',
    'BlueprintPropertiesObjectPropsArgs',
    'BlueprintPropertiesObjectPropsArgsDict',
    'BlueprintPropertiesStringPropsArgs',
    'BlueprintPropertiesStringPropsArgsDict',
    'BlueprintPropertiesStringPropsSpecAuthenticationArgs',
    'BlueprintPropertiesStringPropsSpecAuthenticationArgsDict',
    'BlueprintRelationsArgs',
    'BlueprintRelationsArgsDict',
    'BlueprintTeamInheritanceArgs',
    'BlueprintTeamInheritanceArgsDict',
    'BlueprintWebhookChangelogDestinationArgs',
    'BlueprintWebhookChangelogDestinationArgsDict',
    'EntityPropertiesArgs',
    'EntityPropertiesArgsDict',
    'EntityPropertiesArrayPropsArgs',
    'EntityPropertiesArrayPropsArgsDict',
    'EntityRelationsArgs',
    'EntityRelationsArgsDict',
    'IntegrationKafkaChangelogDestinationArgs',
    'IntegrationKafkaChangelogDestinationArgsDict',
    'IntegrationWebhookChangelogDestinationArgs',
    'IntegrationWebhookChangelogDestinationArgsDict',
    'PagePermissionsReadArgs',
    'PagePermissionsReadArgsDict',
    'ScorecardFilterArgs',
    'ScorecardFilterArgsDict',
    'ScorecardLevelArgs',
    'ScorecardLevelArgsDict',
    'ScorecardRuleArgs',
    'ScorecardRuleArgsDict',
    'ScorecardRuleQueryArgs',
    'ScorecardRuleQueryArgsDict',
    'SystemBlueprintCalculationPropertiesArgs',
    'SystemBlueprintCalculationPropertiesArgsDict',
    'SystemBlueprintMirrorPropertiesArgs',
    'SystemBlueprintMirrorPropertiesArgsDict',
    'SystemBlueprintPropertiesArgs',
    'SystemBlueprintPropertiesArgsDict',
    'SystemBlueprintPropertiesArrayPropsArgs',
    'SystemBlueprintPropertiesArrayPropsArgsDict',
    'SystemBlueprintPropertiesArrayPropsBooleanItemsArgs',
    'SystemBlueprintPropertiesArrayPropsBooleanItemsArgsDict',
    'SystemBlueprintPropertiesArrayPropsNumberItemsArgs',
    'SystemBlueprintPropertiesArrayPropsNumberItemsArgsDict',
    'SystemBlueprintPropertiesArrayPropsObjectItemsArgs',
    'SystemBlueprintPropertiesArrayPropsObjectItemsArgsDict',
    'SystemBlueprintPropertiesArrayPropsStringItemsArgs',
    'SystemBlueprintPropertiesArrayPropsStringItemsArgsDict',
    'SystemBlueprintPropertiesBooleanPropsArgs',
    'SystemBlueprintPropertiesBooleanPropsArgsDict',
    'SystemBlueprintPropertiesNumberPropsArgs',
    'SystemBlueprintPropertiesNumberPropsArgsDict',
    'SystemBlueprintPropertiesObjectPropsArgs',
    'SystemBlueprintPropertiesObjectPropsArgsDict',
    'SystemBlueprintPropertiesStringPropsArgs',
    'SystemBlueprintPropertiesStringPropsArgsDict',
    'SystemBlueprintPropertiesStringPropsSpecAuthenticationArgs',
    'SystemBlueprintPropertiesStringPropsSpecAuthenticationArgsDict',
    'SystemBlueprintRelationsArgs',
    'SystemBlueprintRelationsArgsDict',
    'WebhookMappingArgs',
    'WebhookMappingArgsDict',
    'WebhookMappingEntityArgs',
    'WebhookMappingEntityArgsDict',
    'WebhookSecurityArgs',
    'WebhookSecurityArgsDict',
]

MYPY = False

if not MYPY:
    class ActionApprovalEmailNotificationArgsDict(TypedDict):
        pass
elif False:
    ActionApprovalEmailNotificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionApprovalEmailNotificationArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class ActionApprovalWebhookNotificationArgsDict(TypedDict):
        url: pulumi.Input[str]
        """
        The URL to invoke the webhook
        """
        format: NotRequired[pulumi.Input[str]]
        """
        The format to invoke the webhook
        """
elif False:
    ActionApprovalWebhookNotificationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionApprovalWebhookNotificationArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 format: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] url: The URL to invoke the webhook
        :param pulumi.Input[str] format: The format to invoke the webhook
        """
        pulumi.set(__self__, "url", url)
        if format is not None:
            pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL to invoke the webhook
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        The format to invoke the webhook
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)


if not MYPY:
    class ActionAutomationTriggerArgsDict(TypedDict):
        any_entity_change_event: NotRequired[pulumi.Input['ActionAutomationTriggerAnyEntityChangeEventArgsDict']]
        """
        Any entity change event trigger
        """
        any_run_change_event: NotRequired[pulumi.Input['ActionAutomationTriggerAnyRunChangeEventArgsDict']]
        """
        Any run change event trigger
        """
        entity_created_event: NotRequired[pulumi.Input['ActionAutomationTriggerEntityCreatedEventArgsDict']]
        """
        Entity created event trigger
        """
        entity_deleted_event: NotRequired[pulumi.Input['ActionAutomationTriggerEntityDeletedEventArgsDict']]
        """
        Entity deleted event trigger
        """
        entity_updated_event: NotRequired[pulumi.Input['ActionAutomationTriggerEntityUpdatedEventArgsDict']]
        """
        Entity updated event trigger
        """
        jq_condition: NotRequired[pulumi.Input['ActionAutomationTriggerJqConditionArgsDict']]
        """
        JQ condition for automation trigger
        """
        run_created_event: NotRequired[pulumi.Input['ActionAutomationTriggerRunCreatedEventArgsDict']]
        """
        Run created event trigger
        """
        run_updated_event: NotRequired[pulumi.Input['ActionAutomationTriggerRunUpdatedEventArgsDict']]
        """
        Run updated event trigger
        """
        timer_property_expired_event: NotRequired[pulumi.Input['ActionAutomationTriggerTimerPropertyExpiredEventArgsDict']]
        """
        Timer property expired event trigger
        """
elif False:
    ActionAutomationTriggerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionAutomationTriggerArgs:
    def __init__(__self__, *,
                 any_entity_change_event: Optional[pulumi.Input['ActionAutomationTriggerAnyEntityChangeEventArgs']] = None,
                 any_run_change_event: Optional[pulumi.Input['ActionAutomationTriggerAnyRunChangeEventArgs']] = None,
                 entity_created_event: Optional[pulumi.Input['ActionAutomationTriggerEntityCreatedEventArgs']] = None,
                 entity_deleted_event: Optional[pulumi.Input['ActionAutomationTriggerEntityDeletedEventArgs']] = None,
                 entity_updated_event: Optional[pulumi.Input['ActionAutomationTriggerEntityUpdatedEventArgs']] = None,
                 jq_condition: Optional[pulumi.Input['ActionAutomationTriggerJqConditionArgs']] = None,
                 run_created_event: Optional[pulumi.Input['ActionAutomationTriggerRunCreatedEventArgs']] = None,
                 run_updated_event: Optional[pulumi.Input['ActionAutomationTriggerRunUpdatedEventArgs']] = None,
                 timer_property_expired_event: Optional[pulumi.Input['ActionAutomationTriggerTimerPropertyExpiredEventArgs']] = None):
        """
        :param pulumi.Input['ActionAutomationTriggerAnyEntityChangeEventArgs'] any_entity_change_event: Any entity change event trigger
        :param pulumi.Input['ActionAutomationTriggerAnyRunChangeEventArgs'] any_run_change_event: Any run change event trigger
        :param pulumi.Input['ActionAutomationTriggerEntityCreatedEventArgs'] entity_created_event: Entity created event trigger
        :param pulumi.Input['ActionAutomationTriggerEntityDeletedEventArgs'] entity_deleted_event: Entity deleted event trigger
        :param pulumi.Input['ActionAutomationTriggerEntityUpdatedEventArgs'] entity_updated_event: Entity updated event trigger
        :param pulumi.Input['ActionAutomationTriggerJqConditionArgs'] jq_condition: JQ condition for automation trigger
        :param pulumi.Input['ActionAutomationTriggerRunCreatedEventArgs'] run_created_event: Run created event trigger
        :param pulumi.Input['ActionAutomationTriggerRunUpdatedEventArgs'] run_updated_event: Run updated event trigger
        :param pulumi.Input['ActionAutomationTriggerTimerPropertyExpiredEventArgs'] timer_property_expired_event: Timer property expired event trigger
        """
        if any_entity_change_event is not None:
            pulumi.set(__self__, "any_entity_change_event", any_entity_change_event)
        if any_run_change_event is not None:
            pulumi.set(__self__, "any_run_change_event", any_run_change_event)
        if entity_created_event is not None:
            pulumi.set(__self__, "entity_created_event", entity_created_event)
        if entity_deleted_event is not None:
            pulumi.set(__self__, "entity_deleted_event", entity_deleted_event)
        if entity_updated_event is not None:
            pulumi.set(__self__, "entity_updated_event", entity_updated_event)
        if jq_condition is not None:
            pulumi.set(__self__, "jq_condition", jq_condition)
        if run_created_event is not None:
            pulumi.set(__self__, "run_created_event", run_created_event)
        if run_updated_event is not None:
            pulumi.set(__self__, "run_updated_event", run_updated_event)
        if timer_property_expired_event is not None:
            pulumi.set(__self__, "timer_property_expired_event", timer_property_expired_event)

    @property
    @pulumi.getter(name="anyEntityChangeEvent")
    def any_entity_change_event(self) -> Optional[pulumi.Input['ActionAutomationTriggerAnyEntityChangeEventArgs']]:
        """
        Any entity change event trigger
        """
        return pulumi.get(self, "any_entity_change_event")

    @any_entity_change_event.setter
    def any_entity_change_event(self, value: Optional[pulumi.Input['ActionAutomationTriggerAnyEntityChangeEventArgs']]):
        pulumi.set(self, "any_entity_change_event", value)

    @property
    @pulumi.getter(name="anyRunChangeEvent")
    def any_run_change_event(self) -> Optional[pulumi.Input['ActionAutomationTriggerAnyRunChangeEventArgs']]:
        """
        Any run change event trigger
        """
        return pulumi.get(self, "any_run_change_event")

    @any_run_change_event.setter
    def any_run_change_event(self, value: Optional[pulumi.Input['ActionAutomationTriggerAnyRunChangeEventArgs']]):
        pulumi.set(self, "any_run_change_event", value)

    @property
    @pulumi.getter(name="entityCreatedEvent")
    def entity_created_event(self) -> Optional[pulumi.Input['ActionAutomationTriggerEntityCreatedEventArgs']]:
        """
        Entity created event trigger
        """
        return pulumi.get(self, "entity_created_event")

    @entity_created_event.setter
    def entity_created_event(self, value: Optional[pulumi.Input['ActionAutomationTriggerEntityCreatedEventArgs']]):
        pulumi.set(self, "entity_created_event", value)

    @property
    @pulumi.getter(name="entityDeletedEvent")
    def entity_deleted_event(self) -> Optional[pulumi.Input['ActionAutomationTriggerEntityDeletedEventArgs']]:
        """
        Entity deleted event trigger
        """
        return pulumi.get(self, "entity_deleted_event")

    @entity_deleted_event.setter
    def entity_deleted_event(self, value: Optional[pulumi.Input['ActionAutomationTriggerEntityDeletedEventArgs']]):
        pulumi.set(self, "entity_deleted_event", value)

    @property
    @pulumi.getter(name="entityUpdatedEvent")
    def entity_updated_event(self) -> Optional[pulumi.Input['ActionAutomationTriggerEntityUpdatedEventArgs']]:
        """
        Entity updated event trigger
        """
        return pulumi.get(self, "entity_updated_event")

    @entity_updated_event.setter
    def entity_updated_event(self, value: Optional[pulumi.Input['ActionAutomationTriggerEntityUpdatedEventArgs']]):
        pulumi.set(self, "entity_updated_event", value)

    @property
    @pulumi.getter(name="jqCondition")
    def jq_condition(self) -> Optional[pulumi.Input['ActionAutomationTriggerJqConditionArgs']]:
        """
        JQ condition for automation trigger
        """
        return pulumi.get(self, "jq_condition")

    @jq_condition.setter
    def jq_condition(self, value: Optional[pulumi.Input['ActionAutomationTriggerJqConditionArgs']]):
        pulumi.set(self, "jq_condition", value)

    @property
    @pulumi.getter(name="runCreatedEvent")
    def run_created_event(self) -> Optional[pulumi.Input['ActionAutomationTriggerRunCreatedEventArgs']]:
        """
        Run created event trigger
        """
        return pulumi.get(self, "run_created_event")

    @run_created_event.setter
    def run_created_event(self, value: Optional[pulumi.Input['ActionAutomationTriggerRunCreatedEventArgs']]):
        pulumi.set(self, "run_created_event", value)

    @property
    @pulumi.getter(name="runUpdatedEvent")
    def run_updated_event(self) -> Optional[pulumi.Input['ActionAutomationTriggerRunUpdatedEventArgs']]:
        """
        Run updated event trigger
        """
        return pulumi.get(self, "run_updated_event")

    @run_updated_event.setter
    def run_updated_event(self, value: Optional[pulumi.Input['ActionAutomationTriggerRunUpdatedEventArgs']]):
        pulumi.set(self, "run_updated_event", value)

    @property
    @pulumi.getter(name="timerPropertyExpiredEvent")
    def timer_property_expired_event(self) -> Optional[pulumi.Input['ActionAutomationTriggerTimerPropertyExpiredEventArgs']]:
        """
        Timer property expired event trigger
        """
        return pulumi.get(self, "timer_property_expired_event")

    @timer_property_expired_event.setter
    def timer_property_expired_event(self, value: Optional[pulumi.Input['ActionAutomationTriggerTimerPropertyExpiredEventArgs']]):
        pulumi.set(self, "timer_property_expired_event", value)


if not MYPY:
    class ActionAutomationTriggerAnyEntityChangeEventArgsDict(TypedDict):
        blueprint_identifier: pulumi.Input[str]
        """
        The blueprint identifier of the changed entity
        """
elif False:
    ActionAutomationTriggerAnyEntityChangeEventArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionAutomationTriggerAnyEntityChangeEventArgs:
    def __init__(__self__, *,
                 blueprint_identifier: pulumi.Input[str]):
        """
        :param pulumi.Input[str] blueprint_identifier: The blueprint identifier of the changed entity
        """
        pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> pulumi.Input[str]:
        """
        The blueprint identifier of the changed entity
        """
        return pulumi.get(self, "blueprint_identifier")

    @blueprint_identifier.setter
    def blueprint_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "blueprint_identifier", value)


if not MYPY:
    class ActionAutomationTriggerAnyRunChangeEventArgsDict(TypedDict):
        action_identifier: pulumi.Input[str]
        """
        The action identifier of the changed run
        """
elif False:
    ActionAutomationTriggerAnyRunChangeEventArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionAutomationTriggerAnyRunChangeEventArgs:
    def __init__(__self__, *,
                 action_identifier: pulumi.Input[str]):
        """
        :param pulumi.Input[str] action_identifier: The action identifier of the changed run
        """
        pulumi.set(__self__, "action_identifier", action_identifier)

    @property
    @pulumi.getter(name="actionIdentifier")
    def action_identifier(self) -> pulumi.Input[str]:
        """
        The action identifier of the changed run
        """
        return pulumi.get(self, "action_identifier")

    @action_identifier.setter
    def action_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_identifier", value)


if not MYPY:
    class ActionAutomationTriggerEntityCreatedEventArgsDict(TypedDict):
        blueprint_identifier: pulumi.Input[str]
        """
        The blueprint identifier of the created entity
        """
elif False:
    ActionAutomationTriggerEntityCreatedEventArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionAutomationTriggerEntityCreatedEventArgs:
    def __init__(__self__, *,
                 blueprint_identifier: pulumi.Input[str]):
        """
        :param pulumi.Input[str] blueprint_identifier: The blueprint identifier of the created entity
        """
        pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> pulumi.Input[str]:
        """
        The blueprint identifier of the created entity
        """
        return pulumi.get(self, "blueprint_identifier")

    @blueprint_identifier.setter
    def blueprint_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "blueprint_identifier", value)


if not MYPY:
    class ActionAutomationTriggerEntityDeletedEventArgsDict(TypedDict):
        blueprint_identifier: pulumi.Input[str]
        """
        The blueprint identifier of the deleted entity
        """
elif False:
    ActionAutomationTriggerEntityDeletedEventArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionAutomationTriggerEntityDeletedEventArgs:
    def __init__(__self__, *,
                 blueprint_identifier: pulumi.Input[str]):
        """
        :param pulumi.Input[str] blueprint_identifier: The blueprint identifier of the deleted entity
        """
        pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> pulumi.Input[str]:
        """
        The blueprint identifier of the deleted entity
        """
        return pulumi.get(self, "blueprint_identifier")

    @blueprint_identifier.setter
    def blueprint_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "blueprint_identifier", value)


if not MYPY:
    class ActionAutomationTriggerEntityUpdatedEventArgsDict(TypedDict):
        blueprint_identifier: pulumi.Input[str]
        """
        The blueprint identifier of the updated entity
        """
elif False:
    ActionAutomationTriggerEntityUpdatedEventArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionAutomationTriggerEntityUpdatedEventArgs:
    def __init__(__self__, *,
                 blueprint_identifier: pulumi.Input[str]):
        """
        :param pulumi.Input[str] blueprint_identifier: The blueprint identifier of the updated entity
        """
        pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> pulumi.Input[str]:
        """
        The blueprint identifier of the updated entity
        """
        return pulumi.get(self, "blueprint_identifier")

    @blueprint_identifier.setter
    def blueprint_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "blueprint_identifier", value)


if not MYPY:
    class ActionAutomationTriggerJqConditionArgsDict(TypedDict):
        expressions: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        The jq expressions of the condition
        """
        combinator: NotRequired[pulumi.Input[str]]
        """
        The combinator of the condition
        """
elif False:
    ActionAutomationTriggerJqConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionAutomationTriggerJqConditionArgs:
    def __init__(__self__, *,
                 expressions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 combinator: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] expressions: The jq expressions of the condition
        :param pulumi.Input[str] combinator: The combinator of the condition
        """
        pulumi.set(__self__, "expressions", expressions)
        if combinator is not None:
            pulumi.set(__self__, "combinator", combinator)

    @property
    @pulumi.getter
    def expressions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The jq expressions of the condition
        """
        return pulumi.get(self, "expressions")

    @expressions.setter
    def expressions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "expressions", value)

    @property
    @pulumi.getter
    def combinator(self) -> Optional[pulumi.Input[str]]:
        """
        The combinator of the condition
        """
        return pulumi.get(self, "combinator")

    @combinator.setter
    def combinator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "combinator", value)


if not MYPY:
    class ActionAutomationTriggerRunCreatedEventArgsDict(TypedDict):
        action_identifier: pulumi.Input[str]
        """
        The action identifier of the created run
        """
elif False:
    ActionAutomationTriggerRunCreatedEventArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionAutomationTriggerRunCreatedEventArgs:
    def __init__(__self__, *,
                 action_identifier: pulumi.Input[str]):
        """
        :param pulumi.Input[str] action_identifier: The action identifier of the created run
        """
        pulumi.set(__self__, "action_identifier", action_identifier)

    @property
    @pulumi.getter(name="actionIdentifier")
    def action_identifier(self) -> pulumi.Input[str]:
        """
        The action identifier of the created run
        """
        return pulumi.get(self, "action_identifier")

    @action_identifier.setter
    def action_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_identifier", value)


if not MYPY:
    class ActionAutomationTriggerRunUpdatedEventArgsDict(TypedDict):
        action_identifier: pulumi.Input[str]
        """
        The action identifier of the updated run
        """
elif False:
    ActionAutomationTriggerRunUpdatedEventArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionAutomationTriggerRunUpdatedEventArgs:
    def __init__(__self__, *,
                 action_identifier: pulumi.Input[str]):
        """
        :param pulumi.Input[str] action_identifier: The action identifier of the updated run
        """
        pulumi.set(__self__, "action_identifier", action_identifier)

    @property
    @pulumi.getter(name="actionIdentifier")
    def action_identifier(self) -> pulumi.Input[str]:
        """
        The action identifier of the updated run
        """
        return pulumi.get(self, "action_identifier")

    @action_identifier.setter
    def action_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_identifier", value)


if not MYPY:
    class ActionAutomationTriggerTimerPropertyExpiredEventArgsDict(TypedDict):
        blueprint_identifier: pulumi.Input[str]
        """
        The blueprint identifier of the expired timer property
        """
        property_identifier: pulumi.Input[str]
        """
        The property identifier of the expired timer property
        """
elif False:
    ActionAutomationTriggerTimerPropertyExpiredEventArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionAutomationTriggerTimerPropertyExpiredEventArgs:
    def __init__(__self__, *,
                 blueprint_identifier: pulumi.Input[str],
                 property_identifier: pulumi.Input[str]):
        """
        :param pulumi.Input[str] blueprint_identifier: The blueprint identifier of the expired timer property
        :param pulumi.Input[str] property_identifier: The property identifier of the expired timer property
        """
        pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)
        pulumi.set(__self__, "property_identifier", property_identifier)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> pulumi.Input[str]:
        """
        The blueprint identifier of the expired timer property
        """
        return pulumi.get(self, "blueprint_identifier")

    @blueprint_identifier.setter
    def blueprint_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "blueprint_identifier", value)

    @property
    @pulumi.getter(name="propertyIdentifier")
    def property_identifier(self) -> pulumi.Input[str]:
        """
        The property identifier of the expired timer property
        """
        return pulumi.get(self, "property_identifier")

    @property_identifier.setter
    def property_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "property_identifier", value)


if not MYPY:
    class ActionAzureMethodArgsDict(TypedDict):
        org: pulumi.Input[str]
        """
        Required when selecting type AZURE. The Azure org that the workflow belongs to
        """
        webhook: pulumi.Input[str]
        """
        Required when selecting type AZURE. The Azure webhook that the workflow belongs to
        """
        payload: NotRequired[pulumi.Input[str]]
        """
        The Azure Devops workflow [payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
elif False:
    ActionAzureMethodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionAzureMethodArgs:
    def __init__(__self__, *,
                 org: pulumi.Input[str],
                 webhook: pulumi.Input[str],
                 payload: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] org: Required when selecting type AZURE. The Azure org that the workflow belongs to
        :param pulumi.Input[str] webhook: Required when selecting type AZURE. The Azure webhook that the workflow belongs to
        :param pulumi.Input[str] payload: The Azure Devops workflow [payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        pulumi.set(__self__, "org", org)
        pulumi.set(__self__, "webhook", webhook)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)

    @property
    @pulumi.getter
    def org(self) -> pulumi.Input[str]:
        """
        Required when selecting type AZURE. The Azure org that the workflow belongs to
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: pulumi.Input[str]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def webhook(self) -> pulumi.Input[str]:
        """
        Required when selecting type AZURE. The Azure webhook that the workflow belongs to
        """
        return pulumi.get(self, "webhook")

    @webhook.setter
    def webhook(self, value: pulumi.Input[str]):
        pulumi.set(self, "webhook", value)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[str]]:
        """
        The Azure Devops workflow [payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload", value)


if not MYPY:
    class ActionGithubMethodArgsDict(TypedDict):
        org: pulumi.Input[str]
        """
        Required when selecting type GITHUB. The GitHub org that the workflow belongs to
        """
        repo: pulumi.Input[str]
        """
        Required when selecting type GITHUB. The GitHub repo that the workflow belongs to
        """
        workflow: pulumi.Input[str]
        """
        The GitHub workflow that the action belongs to
        """
        report_workflow_status: NotRequired[pulumi.Input[str]]
        """
        Report the workflow status when invoking the action
        """
        workflow_inputs: NotRequired[pulumi.Input[str]]
        """
        The GitHub [workflow inputs](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
elif False:
    ActionGithubMethodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionGithubMethodArgs:
    def __init__(__self__, *,
                 org: pulumi.Input[str],
                 repo: pulumi.Input[str],
                 workflow: pulumi.Input[str],
                 report_workflow_status: Optional[pulumi.Input[str]] = None,
                 workflow_inputs: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] org: Required when selecting type GITHUB. The GitHub org that the workflow belongs to
        :param pulumi.Input[str] repo: Required when selecting type GITHUB. The GitHub repo that the workflow belongs to
        :param pulumi.Input[str] workflow: The GitHub workflow that the action belongs to
        :param pulumi.Input[str] report_workflow_status: Report the workflow status when invoking the action
        :param pulumi.Input[str] workflow_inputs: The GitHub [workflow inputs](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        pulumi.set(__self__, "org", org)
        pulumi.set(__self__, "repo", repo)
        pulumi.set(__self__, "workflow", workflow)
        if report_workflow_status is not None:
            pulumi.set(__self__, "report_workflow_status", report_workflow_status)
        if workflow_inputs is not None:
            pulumi.set(__self__, "workflow_inputs", workflow_inputs)

    @property
    @pulumi.getter
    def org(self) -> pulumi.Input[str]:
        """
        Required when selecting type GITHUB. The GitHub org that the workflow belongs to
        """
        return pulumi.get(self, "org")

    @org.setter
    def org(self, value: pulumi.Input[str]):
        pulumi.set(self, "org", value)

    @property
    @pulumi.getter
    def repo(self) -> pulumi.Input[str]:
        """
        Required when selecting type GITHUB. The GitHub repo that the workflow belongs to
        """
        return pulumi.get(self, "repo")

    @repo.setter
    def repo(self, value: pulumi.Input[str]):
        pulumi.set(self, "repo", value)

    @property
    @pulumi.getter
    def workflow(self) -> pulumi.Input[str]:
        """
        The GitHub workflow that the action belongs to
        """
        return pulumi.get(self, "workflow")

    @workflow.setter
    def workflow(self, value: pulumi.Input[str]):
        pulumi.set(self, "workflow", value)

    @property
    @pulumi.getter(name="reportWorkflowStatus")
    def report_workflow_status(self) -> Optional[pulumi.Input[str]]:
        """
        Report the workflow status when invoking the action
        """
        return pulumi.get(self, "report_workflow_status")

    @report_workflow_status.setter
    def report_workflow_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_workflow_status", value)

    @property
    @pulumi.getter(name="workflowInputs")
    def workflow_inputs(self) -> Optional[pulumi.Input[str]]:
        """
        The GitHub [workflow inputs](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        return pulumi.get(self, "workflow_inputs")

    @workflow_inputs.setter
    def workflow_inputs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_inputs", value)


if not MYPY:
    class ActionGitlabMethodArgsDict(TypedDict):
        group_name: pulumi.Input[str]
        """
        Required when selecting type GITLAB. The GitLab group name that the workflow belongs to
        """
        project_name: pulumi.Input[str]
        """
        Required when selecting type GITLAB. The GitLab project name that the workflow belongs to
        """
        default_ref: NotRequired[pulumi.Input[str]]
        """
        The default ref of the action
        """
        pipeline_variables: NotRequired[pulumi.Input[str]]
        """
        The Gitlab pipeline variables should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
elif False:
    ActionGitlabMethodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionGitlabMethodArgs:
    def __init__(__self__, *,
                 group_name: pulumi.Input[str],
                 project_name: pulumi.Input[str],
                 default_ref: Optional[pulumi.Input[str]] = None,
                 pipeline_variables: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group_name: Required when selecting type GITLAB. The GitLab group name that the workflow belongs to
        :param pulumi.Input[str] project_name: Required when selecting type GITLAB. The GitLab project name that the workflow belongs to
        :param pulumi.Input[str] default_ref: The default ref of the action
        :param pulumi.Input[str] pipeline_variables: The Gitlab pipeline variables should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "project_name", project_name)
        if default_ref is not None:
            pulumi.set(__self__, "default_ref", default_ref)
        if pipeline_variables is not None:
            pulumi.set(__self__, "pipeline_variables", pipeline_variables)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[str]:
        """
        Required when selecting type GITLAB. The GitLab group name that the workflow belongs to
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Input[str]:
        """
        Required when selecting type GITLAB. The GitLab project name that the workflow belongs to
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="defaultRef")
    def default_ref(self) -> Optional[pulumi.Input[str]]:
        """
        The default ref of the action
        """
        return pulumi.get(self, "default_ref")

    @default_ref.setter
    def default_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_ref", value)

    @property
    @pulumi.getter(name="pipelineVariables")
    def pipeline_variables(self) -> Optional[pulumi.Input[str]]:
        """
        The Gitlab pipeline variables should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        return pulumi.get(self, "pipeline_variables")

    @pipeline_variables.setter
    def pipeline_variables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pipeline_variables", value)


if not MYPY:
    class ActionKafkaMethodArgsDict(TypedDict):
        payload: NotRequired[pulumi.Input[str]]
        """
        The Kafka message [payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
elif False:
    ActionKafkaMethodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionKafkaMethodArgs:
    def __init__(__self__, *,
                 payload: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] payload: The Kafka message [payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        if payload is not None:
            pulumi.set(__self__, "payload", payload)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[str]]:
        """
        The Kafka message [payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload", value)


if not MYPY:
    class ActionPermissionsPermissionsArgsDict(TypedDict):
        approve: pulumi.Input['ActionPermissionsPermissionsApproveArgsDict']
        """
        The permission to approve the action's runs
        """
        execute: pulumi.Input['ActionPermissionsPermissionsExecuteArgsDict']
        """
        The permission to execute the action
        """
elif False:
    ActionPermissionsPermissionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionPermissionsPermissionsArgs:
    def __init__(__self__, *,
                 approve: pulumi.Input['ActionPermissionsPermissionsApproveArgs'],
                 execute: pulumi.Input['ActionPermissionsPermissionsExecuteArgs']):
        """
        :param pulumi.Input['ActionPermissionsPermissionsApproveArgs'] approve: The permission to approve the action's runs
        :param pulumi.Input['ActionPermissionsPermissionsExecuteArgs'] execute: The permission to execute the action
        """
        pulumi.set(__self__, "approve", approve)
        pulumi.set(__self__, "execute", execute)

    @property
    @pulumi.getter
    def approve(self) -> pulumi.Input['ActionPermissionsPermissionsApproveArgs']:
        """
        The permission to approve the action's runs
        """
        return pulumi.get(self, "approve")

    @approve.setter
    def approve(self, value: pulumi.Input['ActionPermissionsPermissionsApproveArgs']):
        pulumi.set(self, "approve", value)

    @property
    @pulumi.getter
    def execute(self) -> pulumi.Input['ActionPermissionsPermissionsExecuteArgs']:
        """
        The permission to execute the action
        """
        return pulumi.get(self, "execute")

    @execute.setter
    def execute(self, value: pulumi.Input['ActionPermissionsPermissionsExecuteArgs']):
        pulumi.set(self, "execute", value)


if not MYPY:
    class ActionPermissionsPermissionsApproveArgsDict(TypedDict):
        policy: NotRequired[pulumi.Input[str]]
        """
        The policy to use for approval
        """
        roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The roles with approval permission
        """
        teams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The teams with approval permission
        """
        users: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The users with approval permission
        """
elif False:
    ActionPermissionsPermissionsApproveArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionPermissionsPermissionsApproveArgs:
    def __init__(__self__, *,
                 policy: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] policy: The policy to use for approval
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: The roles with approval permission
        :param pulumi.Input[Sequence[pulumi.Input[str]]] teams: The teams with approval permission
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: The users with approval permission
        """
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        """
        The policy to use for approval
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The roles with approval permission
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The teams with approval permission
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The users with approval permission
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class ActionPermissionsPermissionsExecuteArgsDict(TypedDict):
        owned_by_team: NotRequired[pulumi.Input[bool]]
        """
        Give execution permission to the teams who own the entity
        """
        policy: NotRequired[pulumi.Input[str]]
        """
        The policy to use for execution
        """
        roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The roles with execution permission
        """
        teams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The teams with execution permission
        """
        users: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The users with execution permission
        """
elif False:
    ActionPermissionsPermissionsExecuteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionPermissionsPermissionsExecuteArgs:
    def __init__(__self__, *,
                 owned_by_team: Optional[pulumi.Input[bool]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] owned_by_team: Give execution permission to the teams who own the entity
        :param pulumi.Input[str] policy: The policy to use for execution
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: The roles with execution permission
        :param pulumi.Input[Sequence[pulumi.Input[str]]] teams: The teams with execution permission
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: The users with execution permission
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[pulumi.Input[bool]]:
        """
        Give execution permission to the teams who own the entity
        """
        return pulumi.get(self, "owned_by_team")

    @owned_by_team.setter
    def owned_by_team(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "owned_by_team", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        """
        The policy to use for execution
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The roles with execution permission
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The teams with execution permission
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The users with execution permission
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class ActionSelfServiceTriggerArgsDict(TypedDict):
        operation: pulumi.Input[str]
        """
        The operation type of the action
        """
        blueprint_identifier: NotRequired[pulumi.Input[str]]
        """
        The ID of the blueprint
        """
        condition: NotRequired[pulumi.Input[str]]
        """
        The `condition` field allows you to define rules using Port's [search & query syntax](https://docs.getport.io/search-and-query/#rules) to determine which entities the action will be available for.
        """
        order_properties: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Order properties
        """
        required_jq_query: NotRequired[pulumi.Input[str]]
        """
        The required jq query of the property
        """
        steps: NotRequired[pulumi.Input[Sequence[pulumi.Input['ActionSelfServiceTriggerStepArgsDict']]]]
        """
        The steps of the action
        """
        user_properties: NotRequired[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArgsDict']]
        """
        User properties
        """
elif False:
    ActionSelfServiceTriggerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerArgs:
    def __init__(__self__, *,
                 operation: pulumi.Input[str],
                 blueprint_identifier: Optional[pulumi.Input[str]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 order_properties: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 required_jq_query: Optional[pulumi.Input[str]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input['ActionSelfServiceTriggerStepArgs']]]] = None,
                 user_properties: Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArgs']] = None):
        """
        :param pulumi.Input[str] operation: The operation type of the action
        :param pulumi.Input[str] blueprint_identifier: The ID of the blueprint
        :param pulumi.Input[str] condition: The `condition` field allows you to define rules using Port's [search & query syntax](https://docs.getport.io/search-and-query/#rules) to determine which entities the action will be available for.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] order_properties: Order properties
        :param pulumi.Input[str] required_jq_query: The required jq query of the property
        :param pulumi.Input[Sequence[pulumi.Input['ActionSelfServiceTriggerStepArgs']]] steps: The steps of the action
        :param pulumi.Input['ActionSelfServiceTriggerUserPropertiesArgs'] user_properties: User properties
        """
        pulumi.set(__self__, "operation", operation)
        if blueprint_identifier is not None:
            pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if order_properties is not None:
            pulumi.set(__self__, "order_properties", order_properties)
        if required_jq_query is not None:
            pulumi.set(__self__, "required_jq_query", required_jq_query)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)
        if user_properties is not None:
            pulumi.set(__self__, "user_properties", user_properties)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        """
        The operation type of the action
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the blueprint
        """
        return pulumi.get(self, "blueprint_identifier")

    @blueprint_identifier.setter
    def blueprint_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint_identifier", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        The `condition` field allows you to define rules using Port's [search & query syntax](https://docs.getport.io/search-and-query/#rules) to determine which entities the action will be available for.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="orderProperties")
    def order_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Order properties
        """
        return pulumi.get(self, "order_properties")

    @order_properties.setter
    def order_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "order_properties", value)

    @property
    @pulumi.getter(name="requiredJqQuery")
    def required_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The required jq query of the property
        """
        return pulumi.get(self, "required_jq_query")

    @required_jq_query.setter
    def required_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required_jq_query", value)

    @property
    @pulumi.getter
    def steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionSelfServiceTriggerStepArgs']]]]:
        """
        The steps of the action
        """
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionSelfServiceTriggerStepArgs']]]]):
        pulumi.set(self, "steps", value)

    @property
    @pulumi.getter(name="userProperties")
    def user_properties(self) -> Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArgs']]:
        """
        User properties
        """
        return pulumi.get(self, "user_properties")

    @user_properties.setter
    def user_properties(self, value: Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArgs']]):
        pulumi.set(self, "user_properties", value)


if not MYPY:
    class ActionSelfServiceTriggerStepArgsDict(TypedDict):
        orders: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        The order of the properties in this step
        """
        title: pulumi.Input[str]
        """
        The step's title
        """
elif False:
    ActionSelfServiceTriggerStepArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerStepArgs:
    def __init__(__self__, *,
                 orders: pulumi.Input[Sequence[pulumi.Input[str]]],
                 title: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] orders: The order of the properties in this step
        :param pulumi.Input[str] title: The step's title
        """
        pulumi.set(__self__, "orders", orders)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def orders(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The order of the properties in this step
        """
        return pulumi.get(self, "orders")

    @orders.setter
    def orders(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "orders", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The step's title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)


if not MYPY:
    class ActionSelfServiceTriggerUserPropertiesArgsDict(TypedDict):
        array_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsArgsDict']]]]
        """
        The array property of the action
        """
        boolean_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesBooleanPropsArgsDict']]]]
        """
        The boolean property of the action
        """
        number_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesNumberPropsArgsDict']]]]
        """
        The number property of the action
        """
        object_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesObjectPropsArgsDict']]]]
        """
        The object property of the action
        """
        string_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsArgsDict']]]]
        """
        The string property of the action
        """
elif False:
    ActionSelfServiceTriggerUserPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerUserPropertiesArgs:
    def __init__(__self__, *,
                 array_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsArgs']]]] = None,
                 boolean_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesBooleanPropsArgs']]]] = None,
                 number_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesNumberPropsArgs']]]] = None,
                 object_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesObjectPropsArgs']]]] = None,
                 string_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsArgs']]] array_props: The array property of the action
        :param pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesBooleanPropsArgs']]] boolean_props: The boolean property of the action
        :param pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesNumberPropsArgs']]] number_props: The number property of the action
        :param pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesObjectPropsArgs']]] object_props: The object property of the action
        :param pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsArgs']]] string_props: The string property of the action
        """
        if array_props is not None:
            pulumi.set(__self__, "array_props", array_props)
        if boolean_props is not None:
            pulumi.set(__self__, "boolean_props", boolean_props)
        if number_props is not None:
            pulumi.set(__self__, "number_props", number_props)
        if object_props is not None:
            pulumi.set(__self__, "object_props", object_props)
        if string_props is not None:
            pulumi.set(__self__, "string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsArgs']]]]:
        """
        The array property of the action
        """
        return pulumi.get(self, "array_props")

    @array_props.setter
    def array_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsArgs']]]]):
        pulumi.set(self, "array_props", value)

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesBooleanPropsArgs']]]]:
        """
        The boolean property of the action
        """
        return pulumi.get(self, "boolean_props")

    @boolean_props.setter
    def boolean_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesBooleanPropsArgs']]]]):
        pulumi.set(self, "boolean_props", value)

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesNumberPropsArgs']]]]:
        """
        The number property of the action
        """
        return pulumi.get(self, "number_props")

    @number_props.setter
    def number_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesNumberPropsArgs']]]]):
        pulumi.set(self, "number_props", value)

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesObjectPropsArgs']]]]:
        """
        The object property of the action
        """
        return pulumi.get(self, "object_props")

    @object_props.setter
    def object_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesObjectPropsArgs']]]]):
        pulumi.set(self, "object_props", value)

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsArgs']]]]:
        """
        The string property of the action
        """
        return pulumi.get(self, "string_props")

    @string_props.setter
    def string_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsArgs']]]]):
        pulumi.set(self, "string_props", value)


if not MYPY:
    class ActionSelfServiceTriggerUserPropertiesArrayPropsArgsDict(TypedDict):
        boolean_items: NotRequired[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItemsArgsDict']]
        """
        An array of boolean items within the property
        """
        default_jq_query: NotRequired[pulumi.Input[str]]
        """
        The default jq query of the array property
        """
        depends_ons: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The properties that this property depends on
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the property
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the property
        """
        max_items: NotRequired[pulumi.Input[int]]
        """
        The max items of the array property
        """
        min_items: NotRequired[pulumi.Input[int]]
        """
        The min items of the array property
        """
        number_items: NotRequired[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItemsArgsDict']]
        """
        An array of number items within the property
        """
        object_items: NotRequired[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItemsArgsDict']]
        """
        An array of object items within the property
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        """
        sort: NotRequired[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsSortArgsDict']]
        """
        How to sort entities when in the self service action form in the UI
        """
        string_items: NotRequired[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsStringItemsArgsDict']]
        """
        An array of string items within the property
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the property
        """
        visible: NotRequired[pulumi.Input[bool]]
        """
        The visibility of the array property
        """
        visible_jq_query: NotRequired[pulumi.Input[str]]
        """
        The visibility condition jq query of the array property
        """
elif False:
    ActionSelfServiceTriggerUserPropertiesArrayPropsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerUserPropertiesArrayPropsArgs:
    def __init__(__self__, *,
                 boolean_items: Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItemsArgs']] = None,
                 default_jq_query: Optional[pulumi.Input[str]] = None,
                 depends_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 max_items: Optional[pulumi.Input[int]] = None,
                 min_items: Optional[pulumi.Input[int]] = None,
                 number_items: Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItemsArgs']] = None,
                 object_items: Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItemsArgs']] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 sort: Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsSortArgs']] = None,
                 string_items: Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsStringItemsArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visible: Optional[pulumi.Input[bool]] = None,
                 visible_jq_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItemsArgs'] boolean_items: An array of boolean items within the property
        :param pulumi.Input[str] default_jq_query: The default jq query of the array property
        :param pulumi.Input[Sequence[pulumi.Input[str]]] depends_ons: The properties that this property depends on
        :param pulumi.Input[str] description: The description of the property
        :param pulumi.Input[str] icon: The icon of the property
        :param pulumi.Input[int] max_items: The max items of the array property
        :param pulumi.Input[int] min_items: The min items of the array property
        :param pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItemsArgs'] number_items: An array of number items within the property
        :param pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItemsArgs'] object_items: An array of object items within the property
        :param pulumi.Input[bool] required: Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        :param pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsSortArgs'] sort: How to sort entities when in the self service action form in the UI
        :param pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsStringItemsArgs'] string_items: An array of string items within the property
        :param pulumi.Input[str] title: The title of the property
        :param pulumi.Input[bool] visible: The visibility of the array property
        :param pulumi.Input[str] visible_jq_query: The visibility condition jq query of the array property
        """
        if boolean_items is not None:
            pulumi.set(__self__, "boolean_items", boolean_items)
        if default_jq_query is not None:
            pulumi.set(__self__, "default_jq_query", default_jq_query)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_items is not None:
            pulumi.set(__self__, "max_items", max_items)
        if min_items is not None:
            pulumi.set(__self__, "min_items", min_items)
        if number_items is not None:
            pulumi.set(__self__, "number_items", number_items)
        if object_items is not None:
            pulumi.set(__self__, "object_items", object_items)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if string_items is not None:
            pulumi.set(__self__, "string_items", string_items)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if visible_jq_query is not None:
            pulumi.set(__self__, "visible_jq_query", visible_jq_query)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItemsArgs']]:
        """
        An array of boolean items within the property
        """
        return pulumi.get(self, "boolean_items")

    @boolean_items.setter
    def boolean_items(self, value: Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItemsArgs']]):
        pulumi.set(self, "boolean_items", value)

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The default jq query of the array property
        """
        return pulumi.get(self, "default_jq_query")

    @default_jq_query.setter
    def default_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_jq_query", value)

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The properties that this property depends on
        """
        return pulumi.get(self, "depends_ons")

    @depends_ons.setter
    def depends_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "depends_ons", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[pulumi.Input[int]]:
        """
        The max items of the array property
        """
        return pulumi.get(self, "max_items")

    @max_items.setter
    def max_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_items", value)

    @property
    @pulumi.getter(name="minItems")
    def min_items(self) -> Optional[pulumi.Input[int]]:
        """
        The min items of the array property
        """
        return pulumi.get(self, "min_items")

    @min_items.setter
    def min_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_items", value)

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItemsArgs']]:
        """
        An array of number items within the property
        """
        return pulumi.get(self, "number_items")

    @number_items.setter
    def number_items(self, value: Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItemsArgs']]):
        pulumi.set(self, "number_items", value)

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItemsArgs']]:
        """
        An array of object items within the property
        """
        return pulumi.get(self, "object_items")

    @object_items.setter
    def object_items(self, value: Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItemsArgs']]):
        pulumi.set(self, "object_items", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsSortArgs']]:
        """
        How to sort entities when in the self service action form in the UI
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsSortArgs']]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsStringItemsArgs']]:
        """
        An array of string items within the property
        """
        return pulumi.get(self, "string_items")

    @string_items.setter
    def string_items(self, value: Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesArrayPropsStringItemsArgs']]):
        pulumi.set(self, "string_items", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def visible(self) -> Optional[pulumi.Input[bool]]:
        """
        The visibility of the array property
        """
        return pulumi.get(self, "visible")

    @visible.setter
    def visible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "visible", value)

    @property
    @pulumi.getter(name="visibleJqQuery")
    def visible_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The visibility condition jq query of the array property
        """
        return pulumi.get(self, "visible_jq_query")

    @visible_jq_query.setter
    def visible_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visible_jq_query", value)


if not MYPY:
    class ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItemsArgsDict(TypedDict):
        defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input[bool]]]]
        """
        The default values for the boolean items
        """
elif False:
    ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItemsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[bool]]] defaults: The default values for the boolean items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]:
        """
        The default values for the boolean items
        """
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]):
        pulumi.set(self, "defaults", value)


if not MYPY:
    class ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItemsArgsDict(TypedDict):
        defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input[float]]]]
        """
        The default values for the number items
        """
        enum_jq_query: NotRequired[pulumi.Input[str]]
        """
        The jq query for the enum number items
        """
        enums: NotRequired[pulumi.Input[Sequence[pulumi.Input[float]]]]
        """
        The enum of possible values for the number items
        """
elif False:
    ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItemsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 enum_jq_query: Optional[pulumi.Input[str]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[float]]] defaults: The default values for the number items
        :param pulumi.Input[str] enum_jq_query: The jq query for the enum number items
        :param pulumi.Input[Sequence[pulumi.Input[float]]] enums: The enum of possible values for the number items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if enum_jq_query is not None:
            pulumi.set(__self__, "enum_jq_query", enum_jq_query)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        The default values for the number items
        """
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "defaults", value)

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The jq query for the enum number items
        """
        return pulumi.get(self, "enum_jq_query")

    @enum_jq_query.setter
    def enum_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enum_jq_query", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        The enum of possible values for the number items
        """
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "enums", value)


if not MYPY:
    class ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItemsArgsDict(TypedDict):
        defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]
        """
        The default values for the object items
        """
elif False:
    ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItemsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] defaults: The default values for the object items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        The default values for the object items
        """
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "defaults", value)


if not MYPY:
    class ActionSelfServiceTriggerUserPropertiesArrayPropsSortArgsDict(TypedDict):
        property: pulumi.Input[str]
        """
        The property to sort the entities by
        """
        order: NotRequired[pulumi.Input[str]]
        """
        The order to sort the entities in
        """
elif False:
    ActionSelfServiceTriggerUserPropertiesArrayPropsSortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerUserPropertiesArrayPropsSortArgs:
    def __init__(__self__, *,
                 property: pulumi.Input[str],
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] property: The property to sort the entities by
        :param pulumi.Input[str] order: The order to sort the entities in
        """
        pulumi.set(__self__, "property", property)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        The order to sort the entities in
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        """
        The property to sort the entities by
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


if not MYPY:
    class ActionSelfServiceTriggerUserPropertiesArrayPropsStringItemsArgsDict(TypedDict):
        blueprint: NotRequired[pulumi.Input[str]]
        """
        The blueprint identifier the action relates to
        """
        dataset: NotRequired[pulumi.Input[str]]
        """
        The dataset of the entity-format items
        """
        defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The default value of the items
        """
        enum_jq_query: NotRequired[pulumi.Input[str]]
        """
        The jq query for the enum of string items
        """
        enums: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The enum of possible values for the string items
        """
        format: NotRequired[pulumi.Input[str]]
        """
        The format of the string property, Accepted values include `date-time`, `url`, `email`, `ipv4`, `ipv6`, `yaml`, `entity`, `user`, `team`, `proto`, `markdown`
        """
elif False:
    ActionSelfServiceTriggerUserPropertiesArrayPropsStringItemsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerUserPropertiesArrayPropsStringItemsArgs:
    def __init__(__self__, *,
                 blueprint: Optional[pulumi.Input[str]] = None,
                 dataset: Optional[pulumi.Input[str]] = None,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enum_jq_query: Optional[pulumi.Input[str]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 format: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] blueprint: The blueprint identifier the action relates to
        :param pulumi.Input[str] dataset: The dataset of the entity-format items
        :param pulumi.Input[Sequence[pulumi.Input[str]]] defaults: The default value of the items
        :param pulumi.Input[str] enum_jq_query: The jq query for the enum of string items
        :param pulumi.Input[Sequence[pulumi.Input[str]]] enums: The enum of possible values for the string items
        :param pulumi.Input[str] format: The format of the string property, Accepted values include `date-time`, `url`, `email`, `ipv4`, `ipv6`, `yaml`, `entity`, `user`, `team`, `proto`, `markdown`
        """
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if dataset is not None:
            pulumi.set(__self__, "dataset", dataset)
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if enum_jq_query is not None:
            pulumi.set(__self__, "enum_jq_query", enum_jq_query)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if format is not None:
            pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[pulumi.Input[str]]:
        """
        The blueprint identifier the action relates to
        """
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[pulumi.Input[str]]:
        """
        The dataset of the entity-format items
        """
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The default value of the items
        """
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "defaults", value)

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The jq query for the enum of string items
        """
        return pulumi.get(self, "enum_jq_query")

    @enum_jq_query.setter
    def enum_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enum_jq_query", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The enum of possible values for the string items
        """
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enums", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the string property, Accepted values include `date-time`, `url`, `email`, `ipv4`, `ipv6`, `yaml`, `entity`, `user`, `team`, `proto`, `markdown`
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)


if not MYPY:
    class ActionSelfServiceTriggerUserPropertiesBooleanPropsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[bool]]
        """
        The default of the boolean property
        """
        default_jq_query: NotRequired[pulumi.Input[str]]
        """
        The default jq query of the boolean property
        """
        depends_ons: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The properties that this property depends on
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the property
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the property
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the property
        """
        visible: NotRequired[pulumi.Input[bool]]
        """
        The visibility of the boolean property
        """
        visible_jq_query: NotRequired[pulumi.Input[str]]
        """
        The visibility condition jq query of the boolean property
        """
elif False:
    ActionSelfServiceTriggerUserPropertiesBooleanPropsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerUserPropertiesBooleanPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[bool]] = None,
                 default_jq_query: Optional[pulumi.Input[str]] = None,
                 depends_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visible: Optional[pulumi.Input[bool]] = None,
                 visible_jq_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] default: The default of the boolean property
        :param pulumi.Input[str] default_jq_query: The default jq query of the boolean property
        :param pulumi.Input[Sequence[pulumi.Input[str]]] depends_ons: The properties that this property depends on
        :param pulumi.Input[str] description: The description of the property
        :param pulumi.Input[str] icon: The icon of the property
        :param pulumi.Input[bool] required: Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        :param pulumi.Input[str] title: The title of the property
        :param pulumi.Input[bool] visible: The visibility of the boolean property
        :param pulumi.Input[str] visible_jq_query: The visibility condition jq query of the boolean property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if default_jq_query is not None:
            pulumi.set(__self__, "default_jq_query", default_jq_query)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if visible_jq_query is not None:
            pulumi.set(__self__, "visible_jq_query", visible_jq_query)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        """
        The default of the boolean property
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The default jq query of the boolean property
        """
        return pulumi.get(self, "default_jq_query")

    @default_jq_query.setter
    def default_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_jq_query", value)

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The properties that this property depends on
        """
        return pulumi.get(self, "depends_ons")

    @depends_ons.setter
    def depends_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "depends_ons", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def visible(self) -> Optional[pulumi.Input[bool]]:
        """
        The visibility of the boolean property
        """
        return pulumi.get(self, "visible")

    @visible.setter
    def visible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "visible", value)

    @property
    @pulumi.getter(name="visibleJqQuery")
    def visible_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The visibility condition jq query of the boolean property
        """
        return pulumi.get(self, "visible_jq_query")

    @visible_jq_query.setter
    def visible_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visible_jq_query", value)


if not MYPY:
    class ActionSelfServiceTriggerUserPropertiesNumberPropsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[float]]
        """
        The default of the number property
        """
        default_jq_query: NotRequired[pulumi.Input[str]]
        """
        The default jq query of the number property
        """
        depends_ons: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The properties that this property depends on
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the property
        """
        enum_jq_query: NotRequired[pulumi.Input[str]]
        """
        The enum jq query of the string property
        """
        enums: NotRequired[pulumi.Input[Sequence[pulumi.Input[float]]]]
        """
        The enum of the number property
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the property
        """
        maximum: NotRequired[pulumi.Input[float]]
        """
        The min of the number property
        """
        minimum: NotRequired[pulumi.Input[float]]
        """
        The max of the number property
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the property
        """
        visible: NotRequired[pulumi.Input[bool]]
        """
        The visibility of the number property
        """
        visible_jq_query: NotRequired[pulumi.Input[str]]
        """
        The visibility condition jq query of the number property
        """
elif False:
    ActionSelfServiceTriggerUserPropertiesNumberPropsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerUserPropertiesNumberPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[float]] = None,
                 default_jq_query: Optional[pulumi.Input[str]] = None,
                 depends_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enum_jq_query: Optional[pulumi.Input[str]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 maximum: Optional[pulumi.Input[float]] = None,
                 minimum: Optional[pulumi.Input[float]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visible: Optional[pulumi.Input[bool]] = None,
                 visible_jq_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] default: The default of the number property
        :param pulumi.Input[str] default_jq_query: The default jq query of the number property
        :param pulumi.Input[Sequence[pulumi.Input[str]]] depends_ons: The properties that this property depends on
        :param pulumi.Input[str] description: The description of the property
        :param pulumi.Input[str] enum_jq_query: The enum jq query of the string property
        :param pulumi.Input[Sequence[pulumi.Input[float]]] enums: The enum of the number property
        :param pulumi.Input[str] icon: The icon of the property
        :param pulumi.Input[float] maximum: The min of the number property
        :param pulumi.Input[float] minimum: The max of the number property
        :param pulumi.Input[bool] required: Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        :param pulumi.Input[str] title: The title of the property
        :param pulumi.Input[bool] visible: The visibility of the number property
        :param pulumi.Input[str] visible_jq_query: The visibility condition jq query of the number property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if default_jq_query is not None:
            pulumi.set(__self__, "default_jq_query", default_jq_query)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_jq_query is not None:
            pulumi.set(__self__, "enum_jq_query", enum_jq_query)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if visible_jq_query is not None:
            pulumi.set(__self__, "visible_jq_query", visible_jq_query)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[float]]:
        """
        The default of the number property
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The default jq query of the number property
        """
        return pulumi.get(self, "default_jq_query")

    @default_jq_query.setter
    def default_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_jq_query", value)

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The properties that this property depends on
        """
        return pulumi.get(self, "depends_ons")

    @depends_ons.setter
    def depends_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "depends_ons", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The enum jq query of the string property
        """
        return pulumi.get(self, "enum_jq_query")

    @enum_jq_query.setter
    def enum_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enum_jq_query", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        The enum of the number property
        """
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "enums", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[float]]:
        """
        The min of the number property
        """
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum", value)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[float]]:
        """
        The max of the number property
        """
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "minimum", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def visible(self) -> Optional[pulumi.Input[bool]]:
        """
        The visibility of the number property
        """
        return pulumi.get(self, "visible")

    @visible.setter
    def visible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "visible", value)

    @property
    @pulumi.getter(name="visibleJqQuery")
    def visible_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The visibility condition jq query of the number property
        """
        return pulumi.get(self, "visible_jq_query")

    @visible_jq_query.setter
    def visible_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visible_jq_query", value)


if not MYPY:
    class ActionSelfServiceTriggerUserPropertiesObjectPropsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        """
        The default of the object property
        """
        default_jq_query: NotRequired[pulumi.Input[str]]
        """
        The default jq query of the object property
        """
        depends_ons: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The properties that this property depends on
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the property
        """
        encryption: NotRequired[pulumi.Input[str]]
        """
        The algorithm to encrypt the property with. Accepted value: `aes256-gcm`
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the property
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the property
        """
        visible: NotRequired[pulumi.Input[bool]]
        """
        The visibility of the object property
        """
        visible_jq_query: NotRequired[pulumi.Input[str]]
        """
        The visibility condition jq query of the object property
        """
elif False:
    ActionSelfServiceTriggerUserPropertiesObjectPropsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerUserPropertiesObjectPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 default_jq_query: Optional[pulumi.Input[str]] = None,
                 depends_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visible: Optional[pulumi.Input[bool]] = None,
                 visible_jq_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default: The default of the object property
        :param pulumi.Input[str] default_jq_query: The default jq query of the object property
        :param pulumi.Input[Sequence[pulumi.Input[str]]] depends_ons: The properties that this property depends on
        :param pulumi.Input[str] description: The description of the property
        :param pulumi.Input[str] encryption: The algorithm to encrypt the property with. Accepted value: `aes256-gcm`
        :param pulumi.Input[str] icon: The icon of the property
        :param pulumi.Input[bool] required: Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        :param pulumi.Input[str] title: The title of the property
        :param pulumi.Input[bool] visible: The visibility of the object property
        :param pulumi.Input[str] visible_jq_query: The visibility condition jq query of the object property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if default_jq_query is not None:
            pulumi.set(__self__, "default_jq_query", default_jq_query)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if visible_jq_query is not None:
            pulumi.set(__self__, "visible_jq_query", visible_jq_query)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        """
        The default of the object property
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The default jq query of the object property
        """
        return pulumi.get(self, "default_jq_query")

    @default_jq_query.setter
    def default_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_jq_query", value)

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The properties that this property depends on
        """
        return pulumi.get(self, "depends_ons")

    @depends_ons.setter
    def depends_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "depends_ons", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[str]]:
        """
        The algorithm to encrypt the property with. Accepted value: `aes256-gcm`
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def visible(self) -> Optional[pulumi.Input[bool]]:
        """
        The visibility of the object property
        """
        return pulumi.get(self, "visible")

    @visible.setter
    def visible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "visible", value)

    @property
    @pulumi.getter(name="visibleJqQuery")
    def visible_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The visibility condition jq query of the object property
        """
        return pulumi.get(self, "visible_jq_query")

    @visible_jq_query.setter
    def visible_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visible_jq_query", value)


if not MYPY:
    class ActionSelfServiceTriggerUserPropertiesStringPropsArgsDict(TypedDict):
        blueprint: NotRequired[pulumi.Input[str]]
        """
        The blueprint identifier the string property relates to
        """
        dataset: NotRequired[pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsDatasetArgsDict']]
        """
        The dataset of an the entity-format property
        """
        default: NotRequired[pulumi.Input[str]]
        """
        The default of the string property
        """
        default_jq_query: NotRequired[pulumi.Input[str]]
        """
        The default jq query of the string property
        """
        depends_ons: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The properties that this property depends on
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the property
        """
        encryption: NotRequired[pulumi.Input[str]]
        """
        The algorithm to encrypt the property with. Accepted value: `aes256-gcm`
        """
        enum_jq_query: NotRequired[pulumi.Input[str]]
        """
        The enum jq query of the string property
        """
        enums: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The enum of the string property
        """
        format: NotRequired[pulumi.Input[str]]
        """
        The format of the string property, Accepted values include `date-time`, `url`, `email`, `ipv4`, `ipv6`, `yaml`, `entity`, `user`, `team`, `proto`, `markdown`
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the property
        """
        max_length: NotRequired[pulumi.Input[int]]
        """
        The max length of the string property
        """
        min_length: NotRequired[pulumi.Input[int]]
        """
        The min length of the string property
        """
        pattern: NotRequired[pulumi.Input[str]]
        """
        The pattern of the string property
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        """
        sort: NotRequired[pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsSortArgsDict']]
        """
        How to sort entities when in the self service action form in the UI
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the property
        """
        visible: NotRequired[pulumi.Input[bool]]
        """
        The visibility of the string property
        """
        visible_jq_query: NotRequired[pulumi.Input[str]]
        """
        The visibility condition jq query of the string property
        """
elif False:
    ActionSelfServiceTriggerUserPropertiesStringPropsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerUserPropertiesStringPropsArgs:
    def __init__(__self__, *,
                 blueprint: Optional[pulumi.Input[str]] = None,
                 dataset: Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsDatasetArgs']] = None,
                 default: Optional[pulumi.Input[str]] = None,
                 default_jq_query: Optional[pulumi.Input[str]] = None,
                 depends_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 enum_jq_query: Optional[pulumi.Input[str]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 max_length: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 sort: Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsSortArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visible: Optional[pulumi.Input[bool]] = None,
                 visible_jq_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] blueprint: The blueprint identifier the string property relates to
        :param pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsDatasetArgs'] dataset: The dataset of an the entity-format property
        :param pulumi.Input[str] default: The default of the string property
        :param pulumi.Input[str] default_jq_query: The default jq query of the string property
        :param pulumi.Input[Sequence[pulumi.Input[str]]] depends_ons: The properties that this property depends on
        :param pulumi.Input[str] description: The description of the property
        :param pulumi.Input[str] encryption: The algorithm to encrypt the property with. Accepted value: `aes256-gcm`
        :param pulumi.Input[str] enum_jq_query: The enum jq query of the string property
        :param pulumi.Input[Sequence[pulumi.Input[str]]] enums: The enum of the string property
        :param pulumi.Input[str] format: The format of the string property, Accepted values include `date-time`, `url`, `email`, `ipv4`, `ipv6`, `yaml`, `entity`, `user`, `team`, `proto`, `markdown`
        :param pulumi.Input[str] icon: The icon of the property
        :param pulumi.Input[int] max_length: The max length of the string property
        :param pulumi.Input[int] min_length: The min length of the string property
        :param pulumi.Input[str] pattern: The pattern of the string property
        :param pulumi.Input[bool] required: Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        :param pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsSortArgs'] sort: How to sort entities when in the self service action form in the UI
        :param pulumi.Input[str] title: The title of the property
        :param pulumi.Input[bool] visible: The visibility of the string property
        :param pulumi.Input[str] visible_jq_query: The visibility condition jq query of the string property
        """
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if dataset is not None:
            pulumi.set(__self__, "dataset", dataset)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if default_jq_query is not None:
            pulumi.set(__self__, "default_jq_query", default_jq_query)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if enum_jq_query is not None:
            pulumi.set(__self__, "enum_jq_query", enum_jq_query)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if visible_jq_query is not None:
            pulumi.set(__self__, "visible_jq_query", visible_jq_query)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[pulumi.Input[str]]:
        """
        The blueprint identifier the string property relates to
        """
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsDatasetArgs']]:
        """
        The dataset of an the entity-format property
        """
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsDatasetArgs']]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        """
        The default of the string property
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The default jq query of the string property
        """
        return pulumi.get(self, "default_jq_query")

    @default_jq_query.setter
    def default_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_jq_query", value)

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The properties that this property depends on
        """
        return pulumi.get(self, "depends_ons")

    @depends_ons.setter
    def depends_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "depends_ons", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[str]]:
        """
        The algorithm to encrypt the property with. Accepted value: `aes256-gcm`
        """
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The enum jq query of the string property
        """
        return pulumi.get(self, "enum_jq_query")

    @enum_jq_query.setter
    def enum_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enum_jq_query", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The enum of the string property
        """
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enums", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the string property, Accepted values include `date-time`, `url`, `email`, `ipv4`, `ipv6`, `yaml`, `entity`, `user`, `team`, `proto`, `markdown`
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[pulumi.Input[int]]:
        """
        The max length of the string property
        """
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_length", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        """
        The min length of the string property
        """
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        The pattern of the string property
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsSortArgs']]:
        """
        How to sort entities when in the self service action form in the UI
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsSortArgs']]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def visible(self) -> Optional[pulumi.Input[bool]]:
        """
        The visibility of the string property
        """
        return pulumi.get(self, "visible")

    @visible.setter
    def visible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "visible", value)

    @property
    @pulumi.getter(name="visibleJqQuery")
    def visible_jq_query(self) -> Optional[pulumi.Input[str]]:
        """
        The visibility condition jq query of the string property
        """
        return pulumi.get(self, "visible_jq_query")

    @visible_jq_query.setter
    def visible_jq_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visible_jq_query", value)


if not MYPY:
    class ActionSelfServiceTriggerUserPropertiesStringPropsDatasetArgsDict(TypedDict):
        combinator: pulumi.Input[str]
        """
        The combinator of the dataset
        """
        rules: pulumi.Input[Sequence[pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleArgsDict']]]
        """
        The rules of the dataset
        """
elif False:
    ActionSelfServiceTriggerUserPropertiesStringPropsDatasetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerUserPropertiesStringPropsDatasetArgs:
    def __init__(__self__, *,
                 combinator: pulumi.Input[str],
                 rules: pulumi.Input[Sequence[pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleArgs']]]):
        """
        :param pulumi.Input[str] combinator: The combinator of the dataset
        :param pulumi.Input[Sequence[pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleArgs']]] rules: The rules of the dataset
        """
        pulumi.set(__self__, "combinator", combinator)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> pulumi.Input[str]:
        """
        The combinator of the dataset
        """
        return pulumi.get(self, "combinator")

    @combinator.setter
    def combinator(self, value: pulumi.Input[str]):
        pulumi.set(self, "combinator", value)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleArgs']]]:
        """
        The rules of the dataset
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleArgs']]]):
        pulumi.set(self, "rules", value)


if not MYPY:
    class ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleArgsDict(TypedDict):
        operator: pulumi.Input[str]
        """
        The operator of the rule
        """
        value: pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValueArgsDict']
        """
        The value of the rule
        """
        blueprint: NotRequired[pulumi.Input[str]]
        """
        The blueprint identifier the action relates to
        """
        property: NotRequired[pulumi.Input[str]]
        """
        The property identifier of the rule
        """
elif False:
    ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValueArgs'],
                 blueprint: Optional[pulumi.Input[str]] = None,
                 property: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] operator: The operator of the rule
        :param pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValueArgs'] value: The value of the rule
        :param pulumi.Input[str] blueprint: The blueprint identifier the action relates to
        :param pulumi.Input[str] property: The property identifier of the rule
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        The operator of the rule
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValueArgs']:
        """
        The value of the rule
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValueArgs']):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[pulumi.Input[str]]:
        """
        The blueprint identifier the action relates to
        """
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[str]]:
        """
        The property identifier of the rule
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property", value)


if not MYPY:
    class ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValueArgsDict(TypedDict):
        jq_query: pulumi.Input[str]
elif False:
    ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValueArgs:
    def __init__(__self__, *,
                 jq_query: pulumi.Input[str]):
        pulumi.set(__self__, "jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "jq_query")

    @jq_query.setter
    def jq_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "jq_query", value)


if not MYPY:
    class ActionSelfServiceTriggerUserPropertiesStringPropsSortArgsDict(TypedDict):
        property: pulumi.Input[str]
        """
        The property to sort the entities by
        """
        order: NotRequired[pulumi.Input[str]]
        """
        The order to sort the entities in
        """
elif False:
    ActionSelfServiceTriggerUserPropertiesStringPropsSortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionSelfServiceTriggerUserPropertiesStringPropsSortArgs:
    def __init__(__self__, *,
                 property: pulumi.Input[str],
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] property: The property to sort the entities by
        :param pulumi.Input[str] order: The order to sort the entities in
        """
        pulumi.set(__self__, "property", property)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        The order to sort the entities in
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        """
        The property to sort the entities by
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


if not MYPY:
    class ActionUpsertEntityMethodArgsDict(TypedDict):
        blueprint_identifier: pulumi.Input[str]
        """
        Required when selecting type Upsert Entity. The blueprint identifier of the entity for the upsert
        """
        mapping: NotRequired[pulumi.Input['ActionUpsertEntityMethodMappingArgsDict']]
        """
        Upsert Entity invocation method
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the entity
        """
elif False:
    ActionUpsertEntityMethodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionUpsertEntityMethodArgs:
    def __init__(__self__, *,
                 blueprint_identifier: pulumi.Input[str],
                 mapping: Optional[pulumi.Input['ActionUpsertEntityMethodMappingArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] blueprint_identifier: Required when selecting type Upsert Entity. The blueprint identifier of the entity for the upsert
        :param pulumi.Input['ActionUpsertEntityMethodMappingArgs'] mapping: Upsert Entity invocation method
        :param pulumi.Input[str] title: The title of the entity
        """
        pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)
        if mapping is not None:
            pulumi.set(__self__, "mapping", mapping)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> pulumi.Input[str]:
        """
        Required when selecting type Upsert Entity. The blueprint identifier of the entity for the upsert
        """
        return pulumi.get(self, "blueprint_identifier")

    @blueprint_identifier.setter
    def blueprint_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "blueprint_identifier", value)

    @property
    @pulumi.getter
    def mapping(self) -> Optional[pulumi.Input['ActionUpsertEntityMethodMappingArgs']]:
        """
        Upsert Entity invocation method
        """
        return pulumi.get(self, "mapping")

    @mapping.setter
    def mapping(self, value: Optional[pulumi.Input['ActionUpsertEntityMethodMappingArgs']]):
        pulumi.set(self, "mapping", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the entity
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class ActionUpsertEntityMethodMappingArgsDict(TypedDict):
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the entity
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        Required when selecting type Upsert Entity. The entity identifier for the upsert
        """
        properties: NotRequired[pulumi.Input[str]]
        """
        The properties of the entity (key-value object encoded to a string)
        """
        relations: NotRequired[pulumi.Input[str]]
        """
        The relations of the entity (key-value object encoded to a string)
        """
        teams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The teams the entity belongs to
        """
        teams_jq: NotRequired[pulumi.Input[str]]
        """
        Jq that returns the teams the entity belongs to
        """
elif False:
    ActionUpsertEntityMethodMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionUpsertEntityMethodMappingArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[str]] = None,
                 relations: Optional[pulumi.Input[str]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teams_jq: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] icon: The icon of the entity
        :param pulumi.Input[str] identifier: Required when selecting type Upsert Entity. The entity identifier for the upsert
        :param pulumi.Input[str] properties: The properties of the entity (key-value object encoded to a string)
        :param pulumi.Input[str] relations: The relations of the entity (key-value object encoded to a string)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] teams: The teams the entity belongs to
        :param pulumi.Input[str] teams_jq: Jq that returns the teams the entity belongs to
        """
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if relations is not None:
            pulumi.set(__self__, "relations", relations)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if teams_jq is not None:
            pulumi.set(__self__, "teams_jq", teams_jq)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the entity
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Required when selecting type Upsert Entity. The entity identifier for the upsert
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[str]]:
        """
        The properties of the entity (key-value object encoded to a string)
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def relations(self) -> Optional[pulumi.Input[str]]:
        """
        The relations of the entity (key-value object encoded to a string)
        """
        return pulumi.get(self, "relations")

    @relations.setter
    def relations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relations", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The teams the entity belongs to
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter(name="teamsJq")
    def teams_jq(self) -> Optional[pulumi.Input[str]]:
        """
        Jq that returns the teams the entity belongs to
        """
        return pulumi.get(self, "teams_jq")

    @teams_jq.setter
    def teams_jq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "teams_jq", value)


if not MYPY:
    class ActionWebhookMethodArgsDict(TypedDict):
        url: pulumi.Input[str]
        """
        Required when selecting type WEBHOOK. The URL to invoke the action
        """
        agent: NotRequired[pulumi.Input[str]]
        """
        Specifies whether to use an agent to invoke the action. This can be a boolean value (`'true''` or `'false'`) or a JQ if dynamic evaluation is needed.
        """
        body: NotRequired[pulumi.Input[str]]
        """
        The Webhook body should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        headers: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The HTTP headers for invoking the action. They should be encoded as a key-value object to a string using jsonencode. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        method: NotRequired[pulumi.Input[str]]
        """
        The HTTP method to invoke the action
        """
        synchronized: NotRequired[pulumi.Input[str]]
        """
        Synchronize the action
        """
elif False:
    ActionWebhookMethodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ActionWebhookMethodArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 agent: Optional[pulumi.Input[str]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 synchronized: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] url: Required when selecting type WEBHOOK. The URL to invoke the action
        :param pulumi.Input[str] agent: Specifies whether to use an agent to invoke the action. This can be a boolean value (`'true''` or `'false'`) or a JQ if dynamic evaluation is needed.
        :param pulumi.Input[str] body: The Webhook body should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] headers: The HTTP headers for invoking the action. They should be encoded as a key-value object to a string using jsonencode. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        :param pulumi.Input[str] method: The HTTP method to invoke the action
        :param pulumi.Input[str] synchronized: Synchronize the action
        """
        pulumi.set(__self__, "url", url)
        if agent is not None:
            pulumi.set(__self__, "agent", agent)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if synchronized is not None:
            pulumi.set(__self__, "synchronized", synchronized)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Required when selecting type WEBHOOK. The URL to invoke the action
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def agent(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether to use an agent to invoke the action. This can be a boolean value (`'true''` or `'false'`) or a JQ if dynamic evaluation is needed.
        """
        return pulumi.get(self, "agent")

    @agent.setter
    def agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        The Webhook body should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The HTTP headers for invoking the action. They should be encoded as a key-value object to a string using jsonencode. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP method to invoke the action
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def synchronized(self) -> Optional[pulumi.Input[str]]:
        """
        Synchronize the action
        """
        return pulumi.get(self, "synchronized")

    @synchronized.setter
    def synchronized(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "synchronized", value)


if not MYPY:
    class AggregationPropertiesPropertiesArgsDict(TypedDict):
        method: pulumi.Input['AggregationPropertiesPropertiesMethodArgsDict']
        """
        The aggregation method to perform on the target blueprint, one of count*entities, average*entities, average*by*property, aggregate*by*property
        """
        target_blueprint_identifier: pulumi.Input[str]
        """
        The identifier of the blueprint to perform the aggregation on
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the aggregation property
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the aggregation property
        """
        query: NotRequired[pulumi.Input[str]]
        """
        Query to filter the target entities
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the aggregation property
        """
elif False:
    AggregationPropertiesPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AggregationPropertiesPropertiesArgs:
    def __init__(__self__, *,
                 method: pulumi.Input['AggregationPropertiesPropertiesMethodArgs'],
                 target_blueprint_identifier: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['AggregationPropertiesPropertiesMethodArgs'] method: The aggregation method to perform on the target blueprint, one of count*entities, average*entities, average*by*property, aggregate*by*property
        :param pulumi.Input[str] target_blueprint_identifier: The identifier of the blueprint to perform the aggregation on
        :param pulumi.Input[str] description: The description of the aggregation property
        :param pulumi.Input[str] icon: The icon of the aggregation property
        :param pulumi.Input[str] query: Query to filter the target entities
        :param pulumi.Input[str] title: The title of the aggregation property
        """
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "target_blueprint_identifier", target_blueprint_identifier)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input['AggregationPropertiesPropertiesMethodArgs']:
        """
        The aggregation method to perform on the target blueprint, one of count*entities, average*entities, average*by*property, aggregate*by*property
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input['AggregationPropertiesPropertiesMethodArgs']):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="targetBlueprintIdentifier")
    def target_blueprint_identifier(self) -> pulumi.Input[str]:
        """
        The identifier of the blueprint to perform the aggregation on
        """
        return pulumi.get(self, "target_blueprint_identifier")

    @target_blueprint_identifier.setter
    def target_blueprint_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_blueprint_identifier", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the aggregation property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the aggregation property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        Query to filter the target entities
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the aggregation property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class AggregationPropertiesPropertiesMethodArgsDict(TypedDict):
        aggregate_by_property: NotRequired[pulumi.Input['AggregationPropertiesPropertiesMethodAggregateByPropertyArgsDict']]
        """
        Function to calculate the aggregate by property value of the target entities, such as sum, min, max, median
        """
        average_by_property: NotRequired[pulumi.Input['AggregationPropertiesPropertiesMethodAverageByPropertyArgsDict']]
        """
        Function to calculate the average by property value of the target entities
        """
        average_entities: NotRequired[pulumi.Input['AggregationPropertiesPropertiesMethodAverageEntitiesArgsDict']]
        """
        Function to average the entities of the target entities
        """
        count_entities: NotRequired[pulumi.Input[bool]]
        """
        Function to count the entities of the target entities
        """
elif False:
    AggregationPropertiesPropertiesMethodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AggregationPropertiesPropertiesMethodArgs:
    def __init__(__self__, *,
                 aggregate_by_property: Optional[pulumi.Input['AggregationPropertiesPropertiesMethodAggregateByPropertyArgs']] = None,
                 average_by_property: Optional[pulumi.Input['AggregationPropertiesPropertiesMethodAverageByPropertyArgs']] = None,
                 average_entities: Optional[pulumi.Input['AggregationPropertiesPropertiesMethodAverageEntitiesArgs']] = None,
                 count_entities: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['AggregationPropertiesPropertiesMethodAggregateByPropertyArgs'] aggregate_by_property: Function to calculate the aggregate by property value of the target entities, such as sum, min, max, median
        :param pulumi.Input['AggregationPropertiesPropertiesMethodAverageByPropertyArgs'] average_by_property: Function to calculate the average by property value of the target entities
        :param pulumi.Input['AggregationPropertiesPropertiesMethodAverageEntitiesArgs'] average_entities: Function to average the entities of the target entities
        :param pulumi.Input[bool] count_entities: Function to count the entities of the target entities
        """
        if aggregate_by_property is not None:
            pulumi.set(__self__, "aggregate_by_property", aggregate_by_property)
        if average_by_property is not None:
            pulumi.set(__self__, "average_by_property", average_by_property)
        if average_entities is not None:
            pulumi.set(__self__, "average_entities", average_entities)
        if count_entities is not None:
            pulumi.set(__self__, "count_entities", count_entities)

    @property
    @pulumi.getter(name="aggregateByProperty")
    def aggregate_by_property(self) -> Optional[pulumi.Input['AggregationPropertiesPropertiesMethodAggregateByPropertyArgs']]:
        """
        Function to calculate the aggregate by property value of the target entities, such as sum, min, max, median
        """
        return pulumi.get(self, "aggregate_by_property")

    @aggregate_by_property.setter
    def aggregate_by_property(self, value: Optional[pulumi.Input['AggregationPropertiesPropertiesMethodAggregateByPropertyArgs']]):
        pulumi.set(self, "aggregate_by_property", value)

    @property
    @pulumi.getter(name="averageByProperty")
    def average_by_property(self) -> Optional[pulumi.Input['AggregationPropertiesPropertiesMethodAverageByPropertyArgs']]:
        """
        Function to calculate the average by property value of the target entities
        """
        return pulumi.get(self, "average_by_property")

    @average_by_property.setter
    def average_by_property(self, value: Optional[pulumi.Input['AggregationPropertiesPropertiesMethodAverageByPropertyArgs']]):
        pulumi.set(self, "average_by_property", value)

    @property
    @pulumi.getter(name="averageEntities")
    def average_entities(self) -> Optional[pulumi.Input['AggregationPropertiesPropertiesMethodAverageEntitiesArgs']]:
        """
        Function to average the entities of the target entities
        """
        return pulumi.get(self, "average_entities")

    @average_entities.setter
    def average_entities(self, value: Optional[pulumi.Input['AggregationPropertiesPropertiesMethodAverageEntitiesArgs']]):
        pulumi.set(self, "average_entities", value)

    @property
    @pulumi.getter(name="countEntities")
    def count_entities(self) -> Optional[pulumi.Input[bool]]:
        """
        Function to count the entities of the target entities
        """
        return pulumi.get(self, "count_entities")

    @count_entities.setter
    def count_entities(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "count_entities", value)


if not MYPY:
    class AggregationPropertiesPropertiesMethodAggregateByPropertyArgsDict(TypedDict):
        func: pulumi.Input[str]
        """
        The func of the aggregate by property
        """
        property: pulumi.Input[str]
        """
        The property of the aggregate by property
        """
elif False:
    AggregationPropertiesPropertiesMethodAggregateByPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AggregationPropertiesPropertiesMethodAggregateByPropertyArgs:
    def __init__(__self__, *,
                 func: pulumi.Input[str],
                 property: pulumi.Input[str]):
        """
        :param pulumi.Input[str] func: The func of the aggregate by property
        :param pulumi.Input[str] property: The property of the aggregate by property
        """
        pulumi.set(__self__, "func", func)
        pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def func(self) -> pulumi.Input[str]:
        """
        The func of the aggregate by property
        """
        return pulumi.get(self, "func")

    @func.setter
    def func(self, value: pulumi.Input[str]):
        pulumi.set(self, "func", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        """
        The property of the aggregate by property
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


if not MYPY:
    class AggregationPropertiesPropertiesMethodAverageByPropertyArgsDict(TypedDict):
        average_of: pulumi.Input[str]
        """
        The time periods to calculate the average by, e.g. hour, day, week, month
        """
        measure_time_by: pulumi.Input[str]
        """
        The property name on which to calculate the the time periods, e.g. $createdAt, $updated_at or any other date property
        """
        property: pulumi.Input[str]
        """
        The property name on which to calculate the average by
        """
elif False:
    AggregationPropertiesPropertiesMethodAverageByPropertyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AggregationPropertiesPropertiesMethodAverageByPropertyArgs:
    def __init__(__self__, *,
                 average_of: pulumi.Input[str],
                 measure_time_by: pulumi.Input[str],
                 property: pulumi.Input[str]):
        """
        :param pulumi.Input[str] average_of: The time periods to calculate the average by, e.g. hour, day, week, month
        :param pulumi.Input[str] measure_time_by: The property name on which to calculate the the time periods, e.g. $createdAt, $updated_at or any other date property
        :param pulumi.Input[str] property: The property name on which to calculate the average by
        """
        pulumi.set(__self__, "average_of", average_of)
        pulumi.set(__self__, "measure_time_by", measure_time_by)
        pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter(name="averageOf")
    def average_of(self) -> pulumi.Input[str]:
        """
        The time periods to calculate the average by, e.g. hour, day, week, month
        """
        return pulumi.get(self, "average_of")

    @average_of.setter
    def average_of(self, value: pulumi.Input[str]):
        pulumi.set(self, "average_of", value)

    @property
    @pulumi.getter(name="measureTimeBy")
    def measure_time_by(self) -> pulumi.Input[str]:
        """
        The property name on which to calculate the the time periods, e.g. $createdAt, $updated_at or any other date property
        """
        return pulumi.get(self, "measure_time_by")

    @measure_time_by.setter
    def measure_time_by(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure_time_by", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        """
        The property name on which to calculate the average by
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


if not MYPY:
    class AggregationPropertiesPropertiesMethodAverageEntitiesArgsDict(TypedDict):
        average_of: NotRequired[pulumi.Input[str]]
        """
        The time periods to calculate the average of, e.g. hour, day, week, month
        """
        measure_time_by: NotRequired[pulumi.Input[str]]
        """
        The property name on which to calculate the the time periods, e.g. $createdAt, $updated_at or any other date property
        """
elif False:
    AggregationPropertiesPropertiesMethodAverageEntitiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AggregationPropertiesPropertiesMethodAverageEntitiesArgs:
    def __init__(__self__, *,
                 average_of: Optional[pulumi.Input[str]] = None,
                 measure_time_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] average_of: The time periods to calculate the average of, e.g. hour, day, week, month
        :param pulumi.Input[str] measure_time_by: The property name on which to calculate the the time periods, e.g. $createdAt, $updated_at or any other date property
        """
        if average_of is not None:
            pulumi.set(__self__, "average_of", average_of)
        if measure_time_by is not None:
            pulumi.set(__self__, "measure_time_by", measure_time_by)

    @property
    @pulumi.getter(name="averageOf")
    def average_of(self) -> Optional[pulumi.Input[str]]:
        """
        The time periods to calculate the average of, e.g. hour, day, week, month
        """
        return pulumi.get(self, "average_of")

    @average_of.setter
    def average_of(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "average_of", value)

    @property
    @pulumi.getter(name="measureTimeBy")
    def measure_time_by(self) -> Optional[pulumi.Input[str]]:
        """
        The property name on which to calculate the the time periods, e.g. $createdAt, $updated_at or any other date property
        """
        return pulumi.get(self, "measure_time_by")

    @measure_time_by.setter
    def measure_time_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "measure_time_by", value)


if not MYPY:
    class BlueprintCalculationPropertiesArgsDict(TypedDict):
        calculation: pulumi.Input[str]
        """
        The calculation of the calculation property
        """
        type: pulumi.Input[str]
        """
        The type of the calculation property
        """
        colorized: NotRequired[pulumi.Input[bool]]
        """
        The colorized of the calculation property
        """
        colors: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The colors of the calculation property
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the calculation property
        """
        format: NotRequired[pulumi.Input[str]]
        """
        The format of the calculation property
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the calculation property
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the calculation property
        """
elif False:
    BlueprintCalculationPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintCalculationPropertiesArgs:
    def __init__(__self__, *,
                 calculation: pulumi.Input[str],
                 type: pulumi.Input[str],
                 colorized: Optional[pulumi.Input[bool]] = None,
                 colors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] calculation: The calculation of the calculation property
        :param pulumi.Input[str] type: The type of the calculation property
        :param pulumi.Input[bool] colorized: The colorized of the calculation property
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] colors: The colors of the calculation property
        :param pulumi.Input[str] description: The description of the calculation property
        :param pulumi.Input[str] format: The format of the calculation property
        :param pulumi.Input[str] icon: The icon of the calculation property
        :param pulumi.Input[str] title: The title of the calculation property
        """
        pulumi.set(__self__, "calculation", calculation)
        pulumi.set(__self__, "type", type)
        if colorized is not None:
            pulumi.set(__self__, "colorized", colorized)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def calculation(self) -> pulumi.Input[str]:
        """
        The calculation of the calculation property
        """
        return pulumi.get(self, "calculation")

    @calculation.setter
    def calculation(self, value: pulumi.Input[str]):
        pulumi.set(self, "calculation", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the calculation property
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def colorized(self) -> Optional[pulumi.Input[bool]]:
        """
        The colorized of the calculation property
        """
        return pulumi.get(self, "colorized")

    @colorized.setter
    def colorized(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "colorized", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The colors of the calculation property
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the calculation property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the calculation property
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the calculation property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the calculation property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class BlueprintKafkaChangelogDestinationArgsDict(TypedDict):
        pass
elif False:
    BlueprintKafkaChangelogDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintKafkaChangelogDestinationArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class BlueprintMirrorPropertiesArgsDict(TypedDict):
        path: pulumi.Input[str]
        """
        The path of the mirror property
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the mirror property
        """
elif False:
    BlueprintMirrorPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintMirrorPropertiesArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] path: The path of the mirror property
        :param pulumi.Input[str] title: The title of the mirror property
        """
        pulumi.set(__self__, "path", path)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The path of the mirror property
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the mirror property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class BlueprintOwnershipArgsDict(TypedDict):
        type: pulumi.Input[str]
        """
        Ownership type: either 'Inherited' or 'Direct'.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path for the Inherited ownership type. Required when type is 'Inherited'. Must be a valid relation identifiers path.
        """
        title: NotRequired[pulumi.Input[str]]
        """
        Optional title for the owning teams property.
        """
elif False:
    BlueprintOwnershipArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintOwnershipArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 path: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Ownership type: either 'Inherited' or 'Direct'.
        :param pulumi.Input[str] path: Path for the Inherited ownership type. Required when type is 'Inherited'. Must be a valid relation identifiers path.
        :param pulumi.Input[str] title: Optional title for the owning teams property.
        """
        pulumi.set(__self__, "type", type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Ownership type: either 'Inherited' or 'Direct'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path for the Inherited ownership type. Required when type is 'Inherited'. Must be a valid relation identifiers path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Optional title for the owning teams property.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class BlueprintPermissionsEntitiesArgsDict(TypedDict):
        register: pulumi.Input['BlueprintPermissionsEntitiesRegisterArgsDict']
        """
        Manage permissions to register entities of the blueprint
        """
        unregister: pulumi.Input['BlueprintPermissionsEntitiesUnregisterArgsDict']
        """
        Manage permissions to unregister entities of the blueprint
        """
        update: pulumi.Input['BlueprintPermissionsEntitiesUpdateArgsDict']
        """
        Manage permissions to update entities of the blueprint
        """
        update_metadata_properties: pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesArgsDict']
        update_properties: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPermissionsEntitiesUpdatePropertiesArgsDict']]]]
        """
        Manage permissions to update the entity properties
        """
        update_relations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPermissionsEntitiesUpdateRelationsArgsDict']]]]
        """
        Manage permissions to update the entity relations
        """
elif False:
    BlueprintPermissionsEntitiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPermissionsEntitiesArgs:
    def __init__(__self__, *,
                 register: pulumi.Input['BlueprintPermissionsEntitiesRegisterArgs'],
                 unregister: pulumi.Input['BlueprintPermissionsEntitiesUnregisterArgs'],
                 update: pulumi.Input['BlueprintPermissionsEntitiesUpdateArgs'],
                 update_metadata_properties: pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesArgs'],
                 update_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPermissionsEntitiesUpdatePropertiesArgs']]]] = None,
                 update_relations: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPermissionsEntitiesUpdateRelationsArgs']]]] = None):
        """
        :param pulumi.Input['BlueprintPermissionsEntitiesRegisterArgs'] register: Manage permissions to register entities of the blueprint
        :param pulumi.Input['BlueprintPermissionsEntitiesUnregisterArgs'] unregister: Manage permissions to unregister entities of the blueprint
        :param pulumi.Input['BlueprintPermissionsEntitiesUpdateArgs'] update: Manage permissions to update entities of the blueprint
        :param pulumi.Input[Mapping[str, pulumi.Input['BlueprintPermissionsEntitiesUpdatePropertiesArgs']]] update_properties: Manage permissions to update the entity properties
        :param pulumi.Input[Mapping[str, pulumi.Input['BlueprintPermissionsEntitiesUpdateRelationsArgs']]] update_relations: Manage permissions to update the entity relations
        """
        pulumi.set(__self__, "register", register)
        pulumi.set(__self__, "unregister", unregister)
        pulumi.set(__self__, "update", update)
        pulumi.set(__self__, "update_metadata_properties", update_metadata_properties)
        if update_properties is not None:
            pulumi.set(__self__, "update_properties", update_properties)
        if update_relations is not None:
            pulumi.set(__self__, "update_relations", update_relations)

    @property
    @pulumi.getter
    def register(self) -> pulumi.Input['BlueprintPermissionsEntitiesRegisterArgs']:
        """
        Manage permissions to register entities of the blueprint
        """
        return pulumi.get(self, "register")

    @register.setter
    def register(self, value: pulumi.Input['BlueprintPermissionsEntitiesRegisterArgs']):
        pulumi.set(self, "register", value)

    @property
    @pulumi.getter
    def unregister(self) -> pulumi.Input['BlueprintPermissionsEntitiesUnregisterArgs']:
        """
        Manage permissions to unregister entities of the blueprint
        """
        return pulumi.get(self, "unregister")

    @unregister.setter
    def unregister(self, value: pulumi.Input['BlueprintPermissionsEntitiesUnregisterArgs']):
        pulumi.set(self, "unregister", value)

    @property
    @pulumi.getter
    def update(self) -> pulumi.Input['BlueprintPermissionsEntitiesUpdateArgs']:
        """
        Manage permissions to update entities of the blueprint
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: pulumi.Input['BlueprintPermissionsEntitiesUpdateArgs']):
        pulumi.set(self, "update", value)

    @property
    @pulumi.getter(name="updateMetadataProperties")
    def update_metadata_properties(self) -> pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesArgs']:
        return pulumi.get(self, "update_metadata_properties")

    @update_metadata_properties.setter
    def update_metadata_properties(self, value: pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesArgs']):
        pulumi.set(self, "update_metadata_properties", value)

    @property
    @pulumi.getter(name="updateProperties")
    def update_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPermissionsEntitiesUpdatePropertiesArgs']]]]:
        """
        Manage permissions to update the entity properties
        """
        return pulumi.get(self, "update_properties")

    @update_properties.setter
    def update_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPermissionsEntitiesUpdatePropertiesArgs']]]]):
        pulumi.set(self, "update_properties", value)

    @property
    @pulumi.getter(name="updateRelations")
    def update_relations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPermissionsEntitiesUpdateRelationsArgs']]]]:
        """
        Manage permissions to update the entity relations
        """
        return pulumi.get(self, "update_relations")

    @update_relations.setter
    def update_relations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPermissionsEntitiesUpdateRelationsArgs']]]]):
        pulumi.set(self, "update_relations", value)


if not MYPY:
    class BlueprintPermissionsEntitiesRegisterArgsDict(TypedDict):
        owned_by_team: NotRequired[pulumi.Input[bool]]
        """
        Owned by team
        """
        roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Roles with register permissions
        """
        teams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Teams with register permissions
        """
        users: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Users with register permissions
        """
elif False:
    BlueprintPermissionsEntitiesRegisterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPermissionsEntitiesRegisterArgs:
    def __init__(__self__, *,
                 owned_by_team: Optional[pulumi.Input[bool]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] owned_by_team: Owned by team
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: Roles with register permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] teams: Teams with register permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: Users with register permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[pulumi.Input[bool]]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @owned_by_team.setter
    def owned_by_team(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "owned_by_team", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Roles with register permissions
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Teams with register permissions
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Users with register permissions
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class BlueprintPermissionsEntitiesUnregisterArgsDict(TypedDict):
        owned_by_team: NotRequired[pulumi.Input[bool]]
        """
        Owned by team
        """
        roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Roles with unregister permissions
        """
        teams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Teams with unregister permissions
        """
        users: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Users with unregister permissions
        """
elif False:
    BlueprintPermissionsEntitiesUnregisterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPermissionsEntitiesUnregisterArgs:
    def __init__(__self__, *,
                 owned_by_team: Optional[pulumi.Input[bool]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] owned_by_team: Owned by team
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: Roles with unregister permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] teams: Teams with unregister permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: Users with unregister permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[pulumi.Input[bool]]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @owned_by_team.setter
    def owned_by_team(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "owned_by_team", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Roles with unregister permissions
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Teams with unregister permissions
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Users with unregister permissions
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class BlueprintPermissionsEntitiesUpdateArgsDict(TypedDict):
        owned_by_team: NotRequired[pulumi.Input[bool]]
        """
        Owned by team
        """
        roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Roles with update permissions
        """
        teams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Teams with update permissions
        """
        users: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Users with update permissions
        """
elif False:
    BlueprintPermissionsEntitiesUpdateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPermissionsEntitiesUpdateArgs:
    def __init__(__self__, *,
                 owned_by_team: Optional[pulumi.Input[bool]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] owned_by_team: Owned by team
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: Roles with update permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] teams: Teams with update permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: Users with update permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[pulumi.Input[bool]]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @owned_by_team.setter
    def owned_by_team(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "owned_by_team", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Roles with update permissions
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Teams with update permissions
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Users with update permissions
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class BlueprintPermissionsEntitiesUpdateMetadataPropertiesArgsDict(TypedDict):
        icon: pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesIconArgsDict']
        """
        The entity's icon
        """
        identifier: pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifierArgsDict']
        """
        Unique Entity identifier, used for API calls, programmatic access and distinguishing between different entities
        """
        team: pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeamArgsDict']
        """
        The team this entity belongs to
        """
        title: pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitleArgsDict']
        """
        A human-readable name for the entity
        """
elif False:
    BlueprintPermissionsEntitiesUpdateMetadataPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPermissionsEntitiesUpdateMetadataPropertiesArgs:
    def __init__(__self__, *,
                 icon: pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesIconArgs'],
                 identifier: pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifierArgs'],
                 team: pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeamArgs'],
                 title: pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitleArgs']):
        """
        :param pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesIconArgs'] icon: The entity's icon
        :param pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifierArgs'] identifier: Unique Entity identifier, used for API calls, programmatic access and distinguishing between different entities
        :param pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeamArgs'] team: The team this entity belongs to
        :param pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitleArgs'] title: A human-readable name for the entity
        """
        pulumi.set(__self__, "icon", icon)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "team", team)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def icon(self) -> pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesIconArgs']:
        """
        The entity's icon
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesIconArgs']):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifierArgs']:
        """
        Unique Entity identifier, used for API calls, programmatic access and distinguishing between different entities
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifierArgs']):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def team(self) -> pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeamArgs']:
        """
        The team this entity belongs to
        """
        return pulumi.get(self, "team")

    @team.setter
    def team(self, value: pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeamArgs']):
        pulumi.set(self, "team", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitleArgs']:
        """
        A human-readable name for the entity
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input['BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitleArgs']):
        pulumi.set(self, "title", value)


if not MYPY:
    class BlueprintPermissionsEntitiesUpdateMetadataPropertiesIconArgsDict(TypedDict):
        owned_by_team: NotRequired[pulumi.Input[bool]]
        """
        Owned by team
        """
        roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Roles with update `$icon` metadata permissions
        """
        teams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Teams with update `$icon` metadata permissions
        """
        users: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Users with update `$icon` metadata permissions
        """
elif False:
    BlueprintPermissionsEntitiesUpdateMetadataPropertiesIconArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPermissionsEntitiesUpdateMetadataPropertiesIconArgs:
    def __init__(__self__, *,
                 owned_by_team: Optional[pulumi.Input[bool]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] owned_by_team: Owned by team
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: Roles with update `$icon` metadata permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] teams: Teams with update `$icon` metadata permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: Users with update `$icon` metadata permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[pulumi.Input[bool]]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @owned_by_team.setter
    def owned_by_team(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "owned_by_team", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Roles with update `$icon` metadata permissions
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Teams with update `$icon` metadata permissions
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Users with update `$icon` metadata permissions
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifierArgsDict(TypedDict):
        owned_by_team: NotRequired[pulumi.Input[bool]]
        """
        Owned by team
        """
        roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Roles with update `$identifier` metadata permissions
        """
        teams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Teams with update `$identifier` metadata permissions
        """
        users: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Users with update `$identifier` metadata permissions
        """
elif False:
    BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifierArgs:
    def __init__(__self__, *,
                 owned_by_team: Optional[pulumi.Input[bool]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] owned_by_team: Owned by team
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: Roles with update `$identifier` metadata permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] teams: Teams with update `$identifier` metadata permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: Users with update `$identifier` metadata permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[pulumi.Input[bool]]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @owned_by_team.setter
    def owned_by_team(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "owned_by_team", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Roles with update `$identifier` metadata permissions
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Teams with update `$identifier` metadata permissions
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Users with update `$identifier` metadata permissions
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeamArgsDict(TypedDict):
        owned_by_team: NotRequired[pulumi.Input[bool]]
        """
        Owned by team
        """
        roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Roles with update `$team` metadata permissions
        """
        teams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Teams with update `$team` metadata permissions
        """
        users: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Users with update `$team` metadata permissions
        """
elif False:
    BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeamArgs:
    def __init__(__self__, *,
                 owned_by_team: Optional[pulumi.Input[bool]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] owned_by_team: Owned by team
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: Roles with update `$team` metadata permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] teams: Teams with update `$team` metadata permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: Users with update `$team` metadata permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[pulumi.Input[bool]]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @owned_by_team.setter
    def owned_by_team(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "owned_by_team", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Roles with update `$team` metadata permissions
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Teams with update `$team` metadata permissions
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Users with update `$team` metadata permissions
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitleArgsDict(TypedDict):
        owned_by_team: NotRequired[pulumi.Input[bool]]
        """
        Owned by team
        """
        roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Roles with update `$title` metadata permissions
        """
        teams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Teams with update `$title` metadata permissions
        """
        users: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Users with update `$title` metadata permissions
        """
elif False:
    BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitleArgs:
    def __init__(__self__, *,
                 owned_by_team: Optional[pulumi.Input[bool]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] owned_by_team: Owned by team
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: Roles with update `$title` metadata permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] teams: Teams with update `$title` metadata permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: Users with update `$title` metadata permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[pulumi.Input[bool]]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @owned_by_team.setter
    def owned_by_team(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "owned_by_team", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Roles with update `$title` metadata permissions
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Teams with update `$title` metadata permissions
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Users with update `$title` metadata permissions
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class BlueprintPermissionsEntitiesUpdatePropertiesArgsDict(TypedDict):
        owned_by_team: NotRequired[pulumi.Input[bool]]
        """
        Owned by team
        """
        roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Roles with update specific property permissions
        """
        teams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Teams with update specific property permissions
        """
        users: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Users with update specific property permissions
        """
elif False:
    BlueprintPermissionsEntitiesUpdatePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPermissionsEntitiesUpdatePropertiesArgs:
    def __init__(__self__, *,
                 owned_by_team: Optional[pulumi.Input[bool]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] owned_by_team: Owned by team
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: Roles with update specific property permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] teams: Teams with update specific property permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: Users with update specific property permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[pulumi.Input[bool]]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @owned_by_team.setter
    def owned_by_team(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "owned_by_team", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Roles with update specific property permissions
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Teams with update specific property permissions
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Users with update specific property permissions
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class BlueprintPermissionsEntitiesUpdateRelationsArgsDict(TypedDict):
        owned_by_team: NotRequired[pulumi.Input[bool]]
        """
        Owned by team
        """
        roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Roles with update specific relation permissions
        """
        teams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Teams with update specific relation permissions
        """
        users: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Users with update specific relation permissions
        """
elif False:
    BlueprintPermissionsEntitiesUpdateRelationsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPermissionsEntitiesUpdateRelationsArgs:
    def __init__(__self__, *,
                 owned_by_team: Optional[pulumi.Input[bool]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] owned_by_team: Owned by team
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: Roles with update specific relation permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] teams: Teams with update specific relation permissions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: Users with update specific relation permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[pulumi.Input[bool]]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @owned_by_team.setter
    def owned_by_team(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "owned_by_team", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Roles with update specific relation permissions
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Teams with update specific relation permissions
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Users with update specific relation permissions
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class BlueprintPropertiesArgsDict(TypedDict):
        array_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesArrayPropsArgsDict']]]]
        """
        The array property of the blueprint
        """
        boolean_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesBooleanPropsArgsDict']]]]
        """
        The boolean property of the blueprint
        """
        number_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesNumberPropsArgsDict']]]]
        """
        The number property of the blueprint
        """
        object_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesObjectPropsArgsDict']]]]
        """
        The object property of the blueprint
        """
        string_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesStringPropsArgsDict']]]]
        """
        The string property of the blueprint
        """
elif False:
    BlueprintPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPropertiesArgs:
    def __init__(__self__, *,
                 array_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesArrayPropsArgs']]]] = None,
                 boolean_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesBooleanPropsArgs']]]] = None,
                 number_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesNumberPropsArgs']]]] = None,
                 object_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesObjectPropsArgs']]]] = None,
                 string_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesStringPropsArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesArrayPropsArgs']]] array_props: The array property of the blueprint
        :param pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesBooleanPropsArgs']]] boolean_props: The boolean property of the blueprint
        :param pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesNumberPropsArgs']]] number_props: The number property of the blueprint
        :param pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesObjectPropsArgs']]] object_props: The object property of the blueprint
        :param pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesStringPropsArgs']]] string_props: The string property of the blueprint
        """
        if array_props is not None:
            pulumi.set(__self__, "array_props", array_props)
        if boolean_props is not None:
            pulumi.set(__self__, "boolean_props", boolean_props)
        if number_props is not None:
            pulumi.set(__self__, "number_props", number_props)
        if object_props is not None:
            pulumi.set(__self__, "object_props", object_props)
        if string_props is not None:
            pulumi.set(__self__, "string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesArrayPropsArgs']]]]:
        """
        The array property of the blueprint
        """
        return pulumi.get(self, "array_props")

    @array_props.setter
    def array_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesArrayPropsArgs']]]]):
        pulumi.set(self, "array_props", value)

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesBooleanPropsArgs']]]]:
        """
        The boolean property of the blueprint
        """
        return pulumi.get(self, "boolean_props")

    @boolean_props.setter
    def boolean_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesBooleanPropsArgs']]]]):
        pulumi.set(self, "boolean_props", value)

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesNumberPropsArgs']]]]:
        """
        The number property of the blueprint
        """
        return pulumi.get(self, "number_props")

    @number_props.setter
    def number_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesNumberPropsArgs']]]]):
        pulumi.set(self, "number_props", value)

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesObjectPropsArgs']]]]:
        """
        The object property of the blueprint
        """
        return pulumi.get(self, "object_props")

    @object_props.setter
    def object_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesObjectPropsArgs']]]]):
        pulumi.set(self, "object_props", value)

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesStringPropsArgs']]]]:
        """
        The string property of the blueprint
        """
        return pulumi.get(self, "string_props")

    @string_props.setter
    def string_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['BlueprintPropertiesStringPropsArgs']]]]):
        pulumi.set(self, "string_props", value)


if not MYPY:
    class BlueprintPropertiesArrayPropsArgsDict(TypedDict):
        boolean_items: NotRequired[pulumi.Input['BlueprintPropertiesArrayPropsBooleanItemsArgsDict']]
        """
        The items of the array property
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the property
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the property
        """
        max_items: NotRequired[pulumi.Input[int]]
        """
        The max items of the array property
        """
        min_items: NotRequired[pulumi.Input[int]]
        """
        The min items of the array property
        """
        number_items: NotRequired[pulumi.Input['BlueprintPropertiesArrayPropsNumberItemsArgsDict']]
        """
        The items of the array property
        """
        object_items: NotRequired[pulumi.Input['BlueprintPropertiesArrayPropsObjectItemsArgsDict']]
        """
        The items of the array property
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        Whether the property is required
        """
        string_items: NotRequired[pulumi.Input['BlueprintPropertiesArrayPropsStringItemsArgsDict']]
        """
        The items of the array property
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the property
        """
elif False:
    BlueprintPropertiesArrayPropsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPropertiesArrayPropsArgs:
    def __init__(__self__, *,
                 boolean_items: Optional[pulumi.Input['BlueprintPropertiesArrayPropsBooleanItemsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 max_items: Optional[pulumi.Input[int]] = None,
                 min_items: Optional[pulumi.Input[int]] = None,
                 number_items: Optional[pulumi.Input['BlueprintPropertiesArrayPropsNumberItemsArgs']] = None,
                 object_items: Optional[pulumi.Input['BlueprintPropertiesArrayPropsObjectItemsArgs']] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 string_items: Optional[pulumi.Input['BlueprintPropertiesArrayPropsStringItemsArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['BlueprintPropertiesArrayPropsBooleanItemsArgs'] boolean_items: The items of the array property
        :param pulumi.Input[str] description: The description of the property
        :param pulumi.Input[str] icon: The icon of the property
        :param pulumi.Input[int] max_items: The max items of the array property
        :param pulumi.Input[int] min_items: The min items of the array property
        :param pulumi.Input['BlueprintPropertiesArrayPropsNumberItemsArgs'] number_items: The items of the array property
        :param pulumi.Input['BlueprintPropertiesArrayPropsObjectItemsArgs'] object_items: The items of the array property
        :param pulumi.Input[bool] required: Whether the property is required
        :param pulumi.Input['BlueprintPropertiesArrayPropsStringItemsArgs'] string_items: The items of the array property
        :param pulumi.Input[str] title: The title of the property
        """
        if boolean_items is not None:
            pulumi.set(__self__, "boolean_items", boolean_items)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_items is not None:
            pulumi.set(__self__, "max_items", max_items)
        if min_items is not None:
            pulumi.set(__self__, "min_items", min_items)
        if number_items is not None:
            pulumi.set(__self__, "number_items", number_items)
        if object_items is not None:
            pulumi.set(__self__, "object_items", object_items)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if string_items is not None:
            pulumi.set(__self__, "string_items", string_items)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional[pulumi.Input['BlueprintPropertiesArrayPropsBooleanItemsArgs']]:
        """
        The items of the array property
        """
        return pulumi.get(self, "boolean_items")

    @boolean_items.setter
    def boolean_items(self, value: Optional[pulumi.Input['BlueprintPropertiesArrayPropsBooleanItemsArgs']]):
        pulumi.set(self, "boolean_items", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[pulumi.Input[int]]:
        """
        The max items of the array property
        """
        return pulumi.get(self, "max_items")

    @max_items.setter
    def max_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_items", value)

    @property
    @pulumi.getter(name="minItems")
    def min_items(self) -> Optional[pulumi.Input[int]]:
        """
        The min items of the array property
        """
        return pulumi.get(self, "min_items")

    @min_items.setter
    def min_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_items", value)

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional[pulumi.Input['BlueprintPropertiesArrayPropsNumberItemsArgs']]:
        """
        The items of the array property
        """
        return pulumi.get(self, "number_items")

    @number_items.setter
    def number_items(self, value: Optional[pulumi.Input['BlueprintPropertiesArrayPropsNumberItemsArgs']]):
        pulumi.set(self, "number_items", value)

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional[pulumi.Input['BlueprintPropertiesArrayPropsObjectItemsArgs']]:
        """
        The items of the array property
        """
        return pulumi.get(self, "object_items")

    @object_items.setter
    def object_items(self, value: Optional[pulumi.Input['BlueprintPropertiesArrayPropsObjectItemsArgs']]):
        pulumi.set(self, "object_items", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional[pulumi.Input['BlueprintPropertiesArrayPropsStringItemsArgs']]:
        """
        The items of the array property
        """
        return pulumi.get(self, "string_items")

    @string_items.setter
    def string_items(self, value: Optional[pulumi.Input['BlueprintPropertiesArrayPropsStringItemsArgs']]):
        pulumi.set(self, "string_items", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class BlueprintPropertiesArrayPropsBooleanItemsArgsDict(TypedDict):
        defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input[bool]]]]
        """
        The default of the items
        """
elif False:
    BlueprintPropertiesArrayPropsBooleanItemsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPropertiesArrayPropsBooleanItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[bool]]] defaults: The default of the items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]:
        """
        The default of the items
        """
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]):
        pulumi.set(self, "defaults", value)


if not MYPY:
    class BlueprintPropertiesArrayPropsNumberItemsArgsDict(TypedDict):
        defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input[float]]]]
        """
        The default of the items
        """
elif False:
    BlueprintPropertiesArrayPropsNumberItemsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPropertiesArrayPropsNumberItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[float]]] defaults: The default of the items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        The default of the items
        """
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "defaults", value)


if not MYPY:
    class BlueprintPropertiesArrayPropsObjectItemsArgsDict(TypedDict):
        defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The default of the items
        """
elif False:
    BlueprintPropertiesArrayPropsObjectItemsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPropertiesArrayPropsObjectItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] defaults: The default of the items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The default of the items
        """
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "defaults", value)


if not MYPY:
    class BlueprintPropertiesArrayPropsStringItemsArgsDict(TypedDict):
        defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The default of the items
        """
        format: NotRequired[pulumi.Input[str]]
        """
        The format of the items
        """
        pattern: NotRequired[pulumi.Input[str]]
        """
        The pattern of the string array items
        """
elif False:
    BlueprintPropertiesArrayPropsStringItemsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPropertiesArrayPropsStringItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] defaults: The default of the items
        :param pulumi.Input[str] format: The format of the items
        :param pulumi.Input[str] pattern: The pattern of the string array items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The default of the items
        """
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "defaults", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the items
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        The pattern of the string array items
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


if not MYPY:
    class BlueprintPropertiesBooleanPropsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[bool]]
        """
        The default of the boolean property
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the property
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the property
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        Whether the property is required
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the property
        """
elif False:
    BlueprintPropertiesBooleanPropsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPropertiesBooleanPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] default: The default of the boolean property
        :param pulumi.Input[str] description: The description of the property
        :param pulumi.Input[str] icon: The icon of the property
        :param pulumi.Input[bool] required: Whether the property is required
        :param pulumi.Input[str] title: The title of the property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        """
        The default of the boolean property
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class BlueprintPropertiesNumberPropsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[float]]
        """
        The default of the number property
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the property
        """
        enum_colors: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The enum colors of the number property
        """
        enums: NotRequired[pulumi.Input[Sequence[pulumi.Input[float]]]]
        """
        The enum of the number property
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the property
        """
        maximum: NotRequired[pulumi.Input[float]]
        """
        The min of the number property
        """
        minimum: NotRequired[pulumi.Input[float]]
        """
        The max of the number property
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        Whether the property is required
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the property
        """
elif False:
    BlueprintPropertiesNumberPropsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPropertiesNumberPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[float]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enum_colors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 maximum: Optional[pulumi.Input[float]] = None,
                 minimum: Optional[pulumi.Input[float]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] default: The default of the number property
        :param pulumi.Input[str] description: The description of the property
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] enum_colors: The enum colors of the number property
        :param pulumi.Input[Sequence[pulumi.Input[float]]] enums: The enum of the number property
        :param pulumi.Input[str] icon: The icon of the property
        :param pulumi.Input[float] maximum: The min of the number property
        :param pulumi.Input[float] minimum: The max of the number property
        :param pulumi.Input[bool] required: Whether the property is required
        :param pulumi.Input[str] title: The title of the property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_colors is not None:
            pulumi.set(__self__, "enum_colors", enum_colors)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[float]]:
        """
        The default of the number property
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enumColors")
    def enum_colors(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The enum colors of the number property
        """
        return pulumi.get(self, "enum_colors")

    @enum_colors.setter
    def enum_colors(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "enum_colors", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        The enum of the number property
        """
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "enums", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[float]]:
        """
        The min of the number property
        """
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum", value)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[float]]:
        """
        The max of the number property
        """
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "minimum", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class BlueprintPropertiesObjectPropsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        """
        The default of the object property
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the property
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the property
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        Whether the property is required
        """
        spec: NotRequired[pulumi.Input[str]]
        """
        The spec of the object property
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the property
        """
elif False:
    BlueprintPropertiesObjectPropsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPropertiesObjectPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default: The default of the object property
        :param pulumi.Input[str] description: The description of the property
        :param pulumi.Input[str] icon: The icon of the property
        :param pulumi.Input[bool] required: Whether the property is required
        :param pulumi.Input[str] spec: The spec of the object property
        :param pulumi.Input[str] title: The title of the property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        """
        The default of the object property
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        """
        The spec of the object property
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class BlueprintPropertiesStringPropsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        """
        The default of the string property
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the property
        """
        enum_colors: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The enum colors of the string property
        """
        enums: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The enum of the string property
        """
        format: NotRequired[pulumi.Input[str]]
        """
        The format of the string property
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the property
        """
        max_length: NotRequired[pulumi.Input[int]]
        """
        The max length of the string property
        """
        min_length: NotRequired[pulumi.Input[int]]
        """
        The min length of the string property
        """
        pattern: NotRequired[pulumi.Input[str]]
        """
        The pattern of the string property
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        Whether the property is required
        """
        spec: NotRequired[pulumi.Input[str]]
        """
        The spec of the string property
        """
        spec_authentication: NotRequired[pulumi.Input['BlueprintPropertiesStringPropsSpecAuthenticationArgsDict']]
        """
        The spec authentication of the string property
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the property
        """
elif False:
    BlueprintPropertiesStringPropsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPropertiesStringPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enum_colors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 max_length: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 spec_authentication: Optional[pulumi.Input['BlueprintPropertiesStringPropsSpecAuthenticationArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default: The default of the string property
        :param pulumi.Input[str] description: The description of the property
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] enum_colors: The enum colors of the string property
        :param pulumi.Input[Sequence[pulumi.Input[str]]] enums: The enum of the string property
        :param pulumi.Input[str] format: The format of the string property
        :param pulumi.Input[str] icon: The icon of the property
        :param pulumi.Input[int] max_length: The max length of the string property
        :param pulumi.Input[int] min_length: The min length of the string property
        :param pulumi.Input[str] pattern: The pattern of the string property
        :param pulumi.Input[bool] required: Whether the property is required
        :param pulumi.Input[str] spec: The spec of the string property
        :param pulumi.Input['BlueprintPropertiesStringPropsSpecAuthenticationArgs'] spec_authentication: The spec authentication of the string property
        :param pulumi.Input[str] title: The title of the property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_colors is not None:
            pulumi.set(__self__, "enum_colors", enum_colors)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if spec_authentication is not None:
            pulumi.set(__self__, "spec_authentication", spec_authentication)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        """
        The default of the string property
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enumColors")
    def enum_colors(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The enum colors of the string property
        """
        return pulumi.get(self, "enum_colors")

    @enum_colors.setter
    def enum_colors(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "enum_colors", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The enum of the string property
        """
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enums", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the string property
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[pulumi.Input[int]]:
        """
        The max length of the string property
        """
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_length", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        """
        The min length of the string property
        """
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        The pattern of the string property
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        """
        The spec of the string property
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter(name="specAuthentication")
    def spec_authentication(self) -> Optional[pulumi.Input['BlueprintPropertiesStringPropsSpecAuthenticationArgs']]:
        """
        The spec authentication of the string property
        """
        return pulumi.get(self, "spec_authentication")

    @spec_authentication.setter
    def spec_authentication(self, value: Optional[pulumi.Input['BlueprintPropertiesStringPropsSpecAuthenticationArgs']]):
        pulumi.set(self, "spec_authentication", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class BlueprintPropertiesStringPropsSpecAuthenticationArgsDict(TypedDict):
        authorization_url: pulumi.Input[str]
        """
        The authorizationUrl of the spec authentication
        """
        client_id: pulumi.Input[str]
        """
        The clientId of the spec authentication
        """
        token_url: pulumi.Input[str]
        """
        The tokenUrl of the spec authentication
        """
elif False:
    BlueprintPropertiesStringPropsSpecAuthenticationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintPropertiesStringPropsSpecAuthenticationArgs:
    def __init__(__self__, *,
                 authorization_url: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 token_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] authorization_url: The authorizationUrl of the spec authentication
        :param pulumi.Input[str] client_id: The clientId of the spec authentication
        :param pulumi.Input[str] token_url: The tokenUrl of the spec authentication
        """
        pulumi.set(__self__, "authorization_url", authorization_url)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="authorizationUrl")
    def authorization_url(self) -> pulumi.Input[str]:
        """
        The authorizationUrl of the spec authentication
        """
        return pulumi.get(self, "authorization_url")

    @authorization_url.setter
    def authorization_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "authorization_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The clientId of the spec authentication
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> pulumi.Input[str]:
        """
        The tokenUrl of the spec authentication
        """
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_url", value)


if not MYPY:
    class BlueprintRelationsArgsDict(TypedDict):
        target: pulumi.Input[str]
        """
        The target of the relation
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the relation
        """
        many: NotRequired[pulumi.Input[bool]]
        """
        The many of the relation
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        The required of the relation
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the relation
        """
elif False:
    BlueprintRelationsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintRelationsArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 many: Optional[pulumi.Input[bool]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] target: The target of the relation
        :param pulumi.Input[str] description: The description of the relation
        :param pulumi.Input[bool] many: The many of the relation
        :param pulumi.Input[bool] required: The required of the relation
        :param pulumi.Input[str] title: The title of the relation
        """
        pulumi.set(__self__, "target", target)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if many is not None:
            pulumi.set(__self__, "many", many)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        The target of the relation
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the relation
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def many(self) -> Optional[pulumi.Input[bool]]:
        """
        The many of the relation
        """
        return pulumi.get(self, "many")

    @many.setter
    def many(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "many", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        The required of the relation
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the relation
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class BlueprintTeamInheritanceArgsDict(TypedDict):
        path: pulumi.Input[str]
        """
        The path of the team inheritance
        """
elif False:
    BlueprintTeamInheritanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintTeamInheritanceArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] path: The path of the team inheritance
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The path of the team inheritance
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)


if not MYPY:
    class BlueprintWebhookChangelogDestinationArgsDict(TypedDict):
        url: pulumi.Input[str]
        """
        The url of the webhook changelog destination
        """
        agent: NotRequired[pulumi.Input[bool]]
        """
        The agent of the webhook changelog destination
        """
elif False:
    BlueprintWebhookChangelogDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BlueprintWebhookChangelogDestinationArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 agent: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] url: The url of the webhook changelog destination
        :param pulumi.Input[bool] agent: The agent of the webhook changelog destination
        """
        pulumi.set(__self__, "url", url)
        if agent is not None:
            pulumi.set(__self__, "agent", agent)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The url of the webhook changelog destination
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def agent(self) -> Optional[pulumi.Input[bool]]:
        """
        The agent of the webhook changelog destination
        """
        return pulumi.get(self, "agent")

    @agent.setter
    def agent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "agent", value)


if not MYPY:
    class EntityPropertiesArgsDict(TypedDict):
        array_props: NotRequired[pulumi.Input['EntityPropertiesArrayPropsArgsDict']]
        """
        The array properties of the entity
        """
        boolean_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]
        """
        The bool properties of the entity
        """
        number_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[float]]]]
        """
        The number properties of the entity
        """
        object_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The object properties of the entity
        """
        string_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The string properties of the entity
        """
elif False:
    EntityPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EntityPropertiesArgs:
    def __init__(__self__, *,
                 array_props: Optional[pulumi.Input['EntityPropertiesArrayPropsArgs']] = None,
                 boolean_props: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 number_props: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 object_props: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 string_props: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['EntityPropertiesArrayPropsArgs'] array_props: The array properties of the entity
        :param pulumi.Input[Mapping[str, pulumi.Input[bool]]] boolean_props: The bool properties of the entity
        :param pulumi.Input[Mapping[str, pulumi.Input[float]]] number_props: The number properties of the entity
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] object_props: The object properties of the entity
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] string_props: The string properties of the entity
        """
        if array_props is not None:
            pulumi.set(__self__, "array_props", array_props)
        if boolean_props is not None:
            pulumi.set(__self__, "boolean_props", boolean_props)
        if number_props is not None:
            pulumi.set(__self__, "number_props", number_props)
        if object_props is not None:
            pulumi.set(__self__, "object_props", object_props)
        if string_props is not None:
            pulumi.set(__self__, "string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[pulumi.Input['EntityPropertiesArrayPropsArgs']]:
        """
        The array properties of the entity
        """
        return pulumi.get(self, "array_props")

    @array_props.setter
    def array_props(self, value: Optional[pulumi.Input['EntityPropertiesArrayPropsArgs']]):
        pulumi.set(self, "array_props", value)

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]:
        """
        The bool properties of the entity
        """
        return pulumi.get(self, "boolean_props")

    @boolean_props.setter
    def boolean_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]):
        pulumi.set(self, "boolean_props", value)

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]:
        """
        The number properties of the entity
        """
        return pulumi.get(self, "number_props")

    @number_props.setter
    def number_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]):
        pulumi.set(self, "number_props", value)

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The object properties of the entity
        """
        return pulumi.get(self, "object_props")

    @object_props.setter
    def object_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "object_props", value)

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The string properties of the entity
        """
        return pulumi.get(self, "string_props")

    @string_props.setter
    def string_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "string_props", value)


if not MYPY:
    class EntityPropertiesArrayPropsArgsDict(TypedDict):
        boolean_items: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[bool]]]]]]
        number_items: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[float]]]]]]
        object_items: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]
        string_items: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]
elif False:
    EntityPropertiesArrayPropsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EntityPropertiesArrayPropsArgs:
    def __init__(__self__, *,
                 boolean_items: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[bool]]]]]] = None,
                 number_items: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[float]]]]]] = None,
                 object_items: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 string_items: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None):
        if boolean_items is not None:
            pulumi.set(__self__, "boolean_items", boolean_items)
        if number_items is not None:
            pulumi.set(__self__, "number_items", number_items)
        if object_items is not None:
            pulumi.set(__self__, "object_items", object_items)
        if string_items is not None:
            pulumi.set(__self__, "string_items", string_items)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[bool]]]]]]:
        return pulumi.get(self, "boolean_items")

    @boolean_items.setter
    def boolean_items(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[bool]]]]]]):
        pulumi.set(self, "boolean_items", value)

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[float]]]]]]:
        return pulumi.get(self, "number_items")

    @number_items.setter
    def number_items(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[float]]]]]]):
        pulumi.set(self, "number_items", value)

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        return pulumi.get(self, "object_items")

    @object_items.setter
    def object_items(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "object_items", value)

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        return pulumi.get(self, "string_items")

    @string_items.setter
    def string_items(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "string_items", value)


if not MYPY:
    class EntityRelationsArgsDict(TypedDict):
        many_relations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]
        """
        The many relation of the entity
        """
        single_relations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The single relation of the entity
        """
elif False:
    EntityRelationsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EntityRelationsArgs:
    def __init__(__self__, *,
                 many_relations: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 single_relations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] many_relations: The many relation of the entity
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] single_relations: The single relation of the entity
        """
        if many_relations is not None:
            pulumi.set(__self__, "many_relations", many_relations)
        if single_relations is not None:
            pulumi.set(__self__, "single_relations", single_relations)

    @property
    @pulumi.getter(name="manyRelations")
    def many_relations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        The many relation of the entity
        """
        return pulumi.get(self, "many_relations")

    @many_relations.setter
    def many_relations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "many_relations", value)

    @property
    @pulumi.getter(name="singleRelations")
    def single_relations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The single relation of the entity
        """
        return pulumi.get(self, "single_relations")

    @single_relations.setter
    def single_relations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "single_relations", value)


if not MYPY:
    class IntegrationKafkaChangelogDestinationArgsDict(TypedDict):
        pass
elif False:
    IntegrationKafkaChangelogDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationKafkaChangelogDestinationArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class IntegrationWebhookChangelogDestinationArgsDict(TypedDict):
        url: pulumi.Input[str]
        """
        The url of the webhook changelog destination
        """
        agent: NotRequired[pulumi.Input[bool]]
        """
        The agent of the webhook changelog destination
        """
elif False:
    IntegrationWebhookChangelogDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IntegrationWebhookChangelogDestinationArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 agent: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] url: The url of the webhook changelog destination
        :param pulumi.Input[bool] agent: The agent of the webhook changelog destination
        """
        pulumi.set(__self__, "url", url)
        if agent is not None:
            pulumi.set(__self__, "agent", agent)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The url of the webhook changelog destination
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def agent(self) -> Optional[pulumi.Input[bool]]:
        """
        The agent of the webhook changelog destination
        """
        return pulumi.get(self, "agent")

    @agent.setter
    def agent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "agent", value)


if not MYPY:
    class PagePermissionsReadArgsDict(TypedDict):
        roles: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The roles with read permission
        """
        teams: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The teams with read permission
        """
        users: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The users with read permission
        """
elif False:
    PagePermissionsReadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PagePermissionsReadArgs:
    def __init__(__self__, *,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: The roles with read permission
        :param pulumi.Input[Sequence[pulumi.Input[str]]] teams: The teams with read permission
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: The users with read permission
        """
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The roles with read permission
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The teams with read permission
        """
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The users with read permission
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class ScorecardFilterArgsDict(TypedDict):
        combinator: pulumi.Input[str]
        """
        The combinator of the filter
        """
        conditions: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        The conditions of the filter. Each condition object should be encoded to a string
        """
elif False:
    ScorecardFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScorecardFilterArgs:
    def __init__(__self__, *,
                 combinator: pulumi.Input[str],
                 conditions: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] combinator: The combinator of the filter
        :param pulumi.Input[Sequence[pulumi.Input[str]]] conditions: The conditions of the filter. Each condition object should be encoded to a string
        """
        pulumi.set(__self__, "combinator", combinator)
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def combinator(self) -> pulumi.Input[str]:
        """
        The combinator of the filter
        """
        return pulumi.get(self, "combinator")

    @combinator.setter
    def combinator(self, value: pulumi.Input[str]):
        pulumi.set(self, "combinator", value)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The conditions of the filter. Each condition object should be encoded to a string
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "conditions", value)


if not MYPY:
    class ScorecardLevelArgsDict(TypedDict):
        color: pulumi.Input[str]
        """
        The color of the level
        """
        title: pulumi.Input[str]
        """
        The title of the level
        """
elif False:
    ScorecardLevelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScorecardLevelArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 title: pulumi.Input[str]):
        """
        :param pulumi.Input[str] color: The color of the level
        :param pulumi.Input[str] title: The title of the level
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        """
        The color of the level
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of the level
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)


if not MYPY:
    class ScorecardRuleArgsDict(TypedDict):
        identifier: pulumi.Input[str]
        """
        The identifier of the rule
        """
        level: pulumi.Input[str]
        """
        The level of the rule
        """
        query: pulumi.Input['ScorecardRuleQueryArgsDict']
        """
        The query of the rule
        """
        title: pulumi.Input[str]
        """
        The title of the rule
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the rule
        """
elif False:
    ScorecardRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScorecardRuleArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[str],
                 level: pulumi.Input[str],
                 query: pulumi.Input['ScorecardRuleQueryArgs'],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] identifier: The identifier of the rule
        :param pulumi.Input[str] level: The level of the rule
        :param pulumi.Input['ScorecardRuleQueryArgs'] query: The query of the rule
        :param pulumi.Input[str] title: The title of the rule
        :param pulumi.Input[str] description: The description of the rule
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        """
        The identifier of the rule
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def level(self) -> pulumi.Input[str]:
        """
        The level of the rule
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[str]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input['ScorecardRuleQueryArgs']:
        """
        The query of the rule
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input['ScorecardRuleQueryArgs']):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of the rule
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the rule
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class ScorecardRuleQueryArgsDict(TypedDict):
        combinator: pulumi.Input[str]
        """
        The combinator of the query
        """
        conditions: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        The conditions of the query. Each condition object should be encoded to a string
        """
elif False:
    ScorecardRuleQueryArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ScorecardRuleQueryArgs:
    def __init__(__self__, *,
                 combinator: pulumi.Input[str],
                 conditions: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] combinator: The combinator of the query
        :param pulumi.Input[Sequence[pulumi.Input[str]]] conditions: The conditions of the query. Each condition object should be encoded to a string
        """
        pulumi.set(__self__, "combinator", combinator)
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def combinator(self) -> pulumi.Input[str]:
        """
        The combinator of the query
        """
        return pulumi.get(self, "combinator")

    @combinator.setter
    def combinator(self, value: pulumi.Input[str]):
        pulumi.set(self, "combinator", value)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The conditions of the query. Each condition object should be encoded to a string
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "conditions", value)


if not MYPY:
    class SystemBlueprintCalculationPropertiesArgsDict(TypedDict):
        calculation: pulumi.Input[str]
        """
        The calculation of the calculation property
        """
        type: pulumi.Input[str]
        """
        The type of the calculation property
        """
        colorized: NotRequired[pulumi.Input[bool]]
        """
        The colorized of the calculation property
        """
        colors: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The colors of the calculation property
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the calculation property
        """
        format: NotRequired[pulumi.Input[str]]
        """
        The format of the calculation property
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the calculation property
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the calculation property
        """
elif False:
    SystemBlueprintCalculationPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBlueprintCalculationPropertiesArgs:
    def __init__(__self__, *,
                 calculation: pulumi.Input[str],
                 type: pulumi.Input[str],
                 colorized: Optional[pulumi.Input[bool]] = None,
                 colors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] calculation: The calculation of the calculation property
        :param pulumi.Input[str] type: The type of the calculation property
        :param pulumi.Input[bool] colorized: The colorized of the calculation property
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] colors: The colors of the calculation property
        :param pulumi.Input[str] description: The description of the calculation property
        :param pulumi.Input[str] format: The format of the calculation property
        :param pulumi.Input[str] icon: The icon of the calculation property
        :param pulumi.Input[str] title: The title of the calculation property
        """
        pulumi.set(__self__, "calculation", calculation)
        pulumi.set(__self__, "type", type)
        if colorized is not None:
            pulumi.set(__self__, "colorized", colorized)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def calculation(self) -> pulumi.Input[str]:
        """
        The calculation of the calculation property
        """
        return pulumi.get(self, "calculation")

    @calculation.setter
    def calculation(self, value: pulumi.Input[str]):
        pulumi.set(self, "calculation", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the calculation property
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def colorized(self) -> Optional[pulumi.Input[bool]]:
        """
        The colorized of the calculation property
        """
        return pulumi.get(self, "colorized")

    @colorized.setter
    def colorized(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "colorized", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The colors of the calculation property
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the calculation property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the calculation property
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the calculation property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the calculation property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class SystemBlueprintMirrorPropertiesArgsDict(TypedDict):
        path: pulumi.Input[str]
        """
        The path of the mirror property
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the mirror property
        """
elif False:
    SystemBlueprintMirrorPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBlueprintMirrorPropertiesArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] path: The path of the mirror property
        :param pulumi.Input[str] title: The title of the mirror property
        """
        pulumi.set(__self__, "path", path)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The path of the mirror property
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the mirror property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class SystemBlueprintPropertiesArgsDict(TypedDict):
        array_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesArrayPropsArgsDict']]]]
        """
        The array property of the blueprint
        """
        boolean_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesBooleanPropsArgsDict']]]]
        """
        The boolean property of the blueprint
        """
        number_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesNumberPropsArgsDict']]]]
        """
        The number property of the blueprint
        """
        object_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesObjectPropsArgsDict']]]]
        """
        The object property of the blueprint
        """
        string_props: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesStringPropsArgsDict']]]]
        """
        The string property of the blueprint
        """
elif False:
    SystemBlueprintPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBlueprintPropertiesArgs:
    def __init__(__self__, *,
                 array_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesArrayPropsArgs']]]] = None,
                 boolean_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesBooleanPropsArgs']]]] = None,
                 number_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesNumberPropsArgs']]]] = None,
                 object_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesObjectPropsArgs']]]] = None,
                 string_props: Optional[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesStringPropsArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesArrayPropsArgs']]] array_props: The array property of the blueprint
        :param pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesBooleanPropsArgs']]] boolean_props: The boolean property of the blueprint
        :param pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesNumberPropsArgs']]] number_props: The number property of the blueprint
        :param pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesObjectPropsArgs']]] object_props: The object property of the blueprint
        :param pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesStringPropsArgs']]] string_props: The string property of the blueprint
        """
        if array_props is not None:
            pulumi.set(__self__, "array_props", array_props)
        if boolean_props is not None:
            pulumi.set(__self__, "boolean_props", boolean_props)
        if number_props is not None:
            pulumi.set(__self__, "number_props", number_props)
        if object_props is not None:
            pulumi.set(__self__, "object_props", object_props)
        if string_props is not None:
            pulumi.set(__self__, "string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesArrayPropsArgs']]]]:
        """
        The array property of the blueprint
        """
        return pulumi.get(self, "array_props")

    @array_props.setter
    def array_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesArrayPropsArgs']]]]):
        pulumi.set(self, "array_props", value)

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesBooleanPropsArgs']]]]:
        """
        The boolean property of the blueprint
        """
        return pulumi.get(self, "boolean_props")

    @boolean_props.setter
    def boolean_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesBooleanPropsArgs']]]]):
        pulumi.set(self, "boolean_props", value)

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesNumberPropsArgs']]]]:
        """
        The number property of the blueprint
        """
        return pulumi.get(self, "number_props")

    @number_props.setter
    def number_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesNumberPropsArgs']]]]):
        pulumi.set(self, "number_props", value)

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesObjectPropsArgs']]]]:
        """
        The object property of the blueprint
        """
        return pulumi.get(self, "object_props")

    @object_props.setter
    def object_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesObjectPropsArgs']]]]):
        pulumi.set(self, "object_props", value)

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesStringPropsArgs']]]]:
        """
        The string property of the blueprint
        """
        return pulumi.get(self, "string_props")

    @string_props.setter
    def string_props(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['SystemBlueprintPropertiesStringPropsArgs']]]]):
        pulumi.set(self, "string_props", value)


if not MYPY:
    class SystemBlueprintPropertiesArrayPropsArgsDict(TypedDict):
        boolean_items: NotRequired[pulumi.Input['SystemBlueprintPropertiesArrayPropsBooleanItemsArgsDict']]
        """
        The items of the array property
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the property
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the property
        """
        max_items: NotRequired[pulumi.Input[int]]
        """
        The max items of the array property
        """
        min_items: NotRequired[pulumi.Input[int]]
        """
        The min items of the array property
        """
        number_items: NotRequired[pulumi.Input['SystemBlueprintPropertiesArrayPropsNumberItemsArgsDict']]
        """
        The items of the array property
        """
        object_items: NotRequired[pulumi.Input['SystemBlueprintPropertiesArrayPropsObjectItemsArgsDict']]
        """
        The items of the array property
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        Whether the property is required
        """
        string_items: NotRequired[pulumi.Input['SystemBlueprintPropertiesArrayPropsStringItemsArgsDict']]
        """
        The items of the array property
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the property
        """
elif False:
    SystemBlueprintPropertiesArrayPropsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBlueprintPropertiesArrayPropsArgs:
    def __init__(__self__, *,
                 boolean_items: Optional[pulumi.Input['SystemBlueprintPropertiesArrayPropsBooleanItemsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 max_items: Optional[pulumi.Input[int]] = None,
                 min_items: Optional[pulumi.Input[int]] = None,
                 number_items: Optional[pulumi.Input['SystemBlueprintPropertiesArrayPropsNumberItemsArgs']] = None,
                 object_items: Optional[pulumi.Input['SystemBlueprintPropertiesArrayPropsObjectItemsArgs']] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 string_items: Optional[pulumi.Input['SystemBlueprintPropertiesArrayPropsStringItemsArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['SystemBlueprintPropertiesArrayPropsBooleanItemsArgs'] boolean_items: The items of the array property
        :param pulumi.Input[str] description: The description of the property
        :param pulumi.Input[str] icon: The icon of the property
        :param pulumi.Input[int] max_items: The max items of the array property
        :param pulumi.Input[int] min_items: The min items of the array property
        :param pulumi.Input['SystemBlueprintPropertiesArrayPropsNumberItemsArgs'] number_items: The items of the array property
        :param pulumi.Input['SystemBlueprintPropertiesArrayPropsObjectItemsArgs'] object_items: The items of the array property
        :param pulumi.Input[bool] required: Whether the property is required
        :param pulumi.Input['SystemBlueprintPropertiesArrayPropsStringItemsArgs'] string_items: The items of the array property
        :param pulumi.Input[str] title: The title of the property
        """
        if boolean_items is not None:
            pulumi.set(__self__, "boolean_items", boolean_items)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_items is not None:
            pulumi.set(__self__, "max_items", max_items)
        if min_items is not None:
            pulumi.set(__self__, "min_items", min_items)
        if number_items is not None:
            pulumi.set(__self__, "number_items", number_items)
        if object_items is not None:
            pulumi.set(__self__, "object_items", object_items)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if string_items is not None:
            pulumi.set(__self__, "string_items", string_items)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional[pulumi.Input['SystemBlueprintPropertiesArrayPropsBooleanItemsArgs']]:
        """
        The items of the array property
        """
        return pulumi.get(self, "boolean_items")

    @boolean_items.setter
    def boolean_items(self, value: Optional[pulumi.Input['SystemBlueprintPropertiesArrayPropsBooleanItemsArgs']]):
        pulumi.set(self, "boolean_items", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[pulumi.Input[int]]:
        """
        The max items of the array property
        """
        return pulumi.get(self, "max_items")

    @max_items.setter
    def max_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_items", value)

    @property
    @pulumi.getter(name="minItems")
    def min_items(self) -> Optional[pulumi.Input[int]]:
        """
        The min items of the array property
        """
        return pulumi.get(self, "min_items")

    @min_items.setter
    def min_items(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_items", value)

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional[pulumi.Input['SystemBlueprintPropertiesArrayPropsNumberItemsArgs']]:
        """
        The items of the array property
        """
        return pulumi.get(self, "number_items")

    @number_items.setter
    def number_items(self, value: Optional[pulumi.Input['SystemBlueprintPropertiesArrayPropsNumberItemsArgs']]):
        pulumi.set(self, "number_items", value)

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional[pulumi.Input['SystemBlueprintPropertiesArrayPropsObjectItemsArgs']]:
        """
        The items of the array property
        """
        return pulumi.get(self, "object_items")

    @object_items.setter
    def object_items(self, value: Optional[pulumi.Input['SystemBlueprintPropertiesArrayPropsObjectItemsArgs']]):
        pulumi.set(self, "object_items", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional[pulumi.Input['SystemBlueprintPropertiesArrayPropsStringItemsArgs']]:
        """
        The items of the array property
        """
        return pulumi.get(self, "string_items")

    @string_items.setter
    def string_items(self, value: Optional[pulumi.Input['SystemBlueprintPropertiesArrayPropsStringItemsArgs']]):
        pulumi.set(self, "string_items", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class SystemBlueprintPropertiesArrayPropsBooleanItemsArgsDict(TypedDict):
        defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input[bool]]]]
        """
        The default of the items
        """
elif False:
    SystemBlueprintPropertiesArrayPropsBooleanItemsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBlueprintPropertiesArrayPropsBooleanItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[bool]]] defaults: The default of the items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]:
        """
        The default of the items
        """
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]):
        pulumi.set(self, "defaults", value)


if not MYPY:
    class SystemBlueprintPropertiesArrayPropsNumberItemsArgsDict(TypedDict):
        defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input[float]]]]
        """
        The default of the items
        """
elif False:
    SystemBlueprintPropertiesArrayPropsNumberItemsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBlueprintPropertiesArrayPropsNumberItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[float]]] defaults: The default of the items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        The default of the items
        """
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "defaults", value)


if not MYPY:
    class SystemBlueprintPropertiesArrayPropsObjectItemsArgsDict(TypedDict):
        defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The default of the items
        """
elif False:
    SystemBlueprintPropertiesArrayPropsObjectItemsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBlueprintPropertiesArrayPropsObjectItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] defaults: The default of the items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The default of the items
        """
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "defaults", value)


if not MYPY:
    class SystemBlueprintPropertiesArrayPropsStringItemsArgsDict(TypedDict):
        defaults: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The default of the items
        """
        format: NotRequired[pulumi.Input[str]]
        """
        The format of the items
        """
        pattern: NotRequired[pulumi.Input[str]]
        """
        The pattern of the string array items
        """
elif False:
    SystemBlueprintPropertiesArrayPropsStringItemsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBlueprintPropertiesArrayPropsStringItemsArgs:
    def __init__(__self__, *,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] defaults: The default of the items
        :param pulumi.Input[str] format: The format of the items
        :param pulumi.Input[str] pattern: The pattern of the string array items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The default of the items
        """
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "defaults", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the items
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        The pattern of the string array items
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


if not MYPY:
    class SystemBlueprintPropertiesBooleanPropsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[bool]]
        """
        The default of the boolean property
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the property
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the property
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        Whether the property is required
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the property
        """
elif False:
    SystemBlueprintPropertiesBooleanPropsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBlueprintPropertiesBooleanPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] default: The default of the boolean property
        :param pulumi.Input[str] description: The description of the property
        :param pulumi.Input[str] icon: The icon of the property
        :param pulumi.Input[bool] required: Whether the property is required
        :param pulumi.Input[str] title: The title of the property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        """
        The default of the boolean property
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class SystemBlueprintPropertiesNumberPropsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[float]]
        """
        The default of the number property
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the property
        """
        enum_colors: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The enum colors of the number property
        """
        enums: NotRequired[pulumi.Input[Sequence[pulumi.Input[float]]]]
        """
        The enum of the number property
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the property
        """
        maximum: NotRequired[pulumi.Input[float]]
        """
        The min of the number property
        """
        minimum: NotRequired[pulumi.Input[float]]
        """
        The max of the number property
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        Whether the property is required
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the property
        """
elif False:
    SystemBlueprintPropertiesNumberPropsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBlueprintPropertiesNumberPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[float]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enum_colors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 maximum: Optional[pulumi.Input[float]] = None,
                 minimum: Optional[pulumi.Input[float]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] default: The default of the number property
        :param pulumi.Input[str] description: The description of the property
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] enum_colors: The enum colors of the number property
        :param pulumi.Input[Sequence[pulumi.Input[float]]] enums: The enum of the number property
        :param pulumi.Input[str] icon: The icon of the property
        :param pulumi.Input[float] maximum: The min of the number property
        :param pulumi.Input[float] minimum: The max of the number property
        :param pulumi.Input[bool] required: Whether the property is required
        :param pulumi.Input[str] title: The title of the property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_colors is not None:
            pulumi.set(__self__, "enum_colors", enum_colors)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[float]]:
        """
        The default of the number property
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enumColors")
    def enum_colors(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The enum colors of the number property
        """
        return pulumi.get(self, "enum_colors")

    @enum_colors.setter
    def enum_colors(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "enum_colors", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        The enum of the number property
        """
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "enums", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[float]]:
        """
        The min of the number property
        """
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum", value)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[float]]:
        """
        The max of the number property
        """
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "minimum", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class SystemBlueprintPropertiesObjectPropsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        """
        The default of the object property
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the property
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the property
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        Whether the property is required
        """
        spec: NotRequired[pulumi.Input[str]]
        """
        The spec of the object property
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the property
        """
elif False:
    SystemBlueprintPropertiesObjectPropsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBlueprintPropertiesObjectPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default: The default of the object property
        :param pulumi.Input[str] description: The description of the property
        :param pulumi.Input[str] icon: The icon of the property
        :param pulumi.Input[bool] required: Whether the property is required
        :param pulumi.Input[str] spec: The spec of the object property
        :param pulumi.Input[str] title: The title of the property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        """
        The default of the object property
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        """
        The spec of the object property
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class SystemBlueprintPropertiesStringPropsArgsDict(TypedDict):
        default: NotRequired[pulumi.Input[str]]
        """
        The default of the string property
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the property
        """
        enum_colors: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The enum colors of the string property
        """
        enums: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The enum of the string property
        """
        format: NotRequired[pulumi.Input[str]]
        """
        The format of the string property
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the property
        """
        max_length: NotRequired[pulumi.Input[int]]
        """
        The max length of the string property
        """
        min_length: NotRequired[pulumi.Input[int]]
        """
        The min length of the string property
        """
        pattern: NotRequired[pulumi.Input[str]]
        """
        The pattern of the string property
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        Whether the property is required
        """
        spec: NotRequired[pulumi.Input[str]]
        """
        The spec of the string property
        """
        spec_authentication: NotRequired[pulumi.Input['SystemBlueprintPropertiesStringPropsSpecAuthenticationArgsDict']]
        """
        The spec authentication of the string property
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the property
        """
elif False:
    SystemBlueprintPropertiesStringPropsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBlueprintPropertiesStringPropsArgs:
    def __init__(__self__, *,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enum_colors: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 enums: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 max_length: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 spec: Optional[pulumi.Input[str]] = None,
                 spec_authentication: Optional[pulumi.Input['SystemBlueprintPropertiesStringPropsSpecAuthenticationArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default: The default of the string property
        :param pulumi.Input[str] description: The description of the property
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] enum_colors: The enum colors of the string property
        :param pulumi.Input[Sequence[pulumi.Input[str]]] enums: The enum of the string property
        :param pulumi.Input[str] format: The format of the string property
        :param pulumi.Input[str] icon: The icon of the property
        :param pulumi.Input[int] max_length: The max length of the string property
        :param pulumi.Input[int] min_length: The min length of the string property
        :param pulumi.Input[str] pattern: The pattern of the string property
        :param pulumi.Input[bool] required: Whether the property is required
        :param pulumi.Input[str] spec: The spec of the string property
        :param pulumi.Input['SystemBlueprintPropertiesStringPropsSpecAuthenticationArgs'] spec_authentication: The spec authentication of the string property
        :param pulumi.Input[str] title: The title of the property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_colors is not None:
            pulumi.set(__self__, "enum_colors", enum_colors)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if spec_authentication is not None:
            pulumi.set(__self__, "spec_authentication", spec_authentication)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        """
        The default of the string property
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enumColors")
    def enum_colors(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The enum colors of the string property
        """
        return pulumi.get(self, "enum_colors")

    @enum_colors.setter
    def enum_colors(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "enum_colors", value)

    @property
    @pulumi.getter
    def enums(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The enum of the string property
        """
        return pulumi.get(self, "enums")

    @enums.setter
    def enums(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enums", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the string property
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[pulumi.Input[int]]:
        """
        The max length of the string property
        """
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_length", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        """
        The min length of the string property
        """
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        The pattern of the string property
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input[str]]:
        """
        The spec of the string property
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter(name="specAuthentication")
    def spec_authentication(self) -> Optional[pulumi.Input['SystemBlueprintPropertiesStringPropsSpecAuthenticationArgs']]:
        """
        The spec authentication of the string property
        """
        return pulumi.get(self, "spec_authentication")

    @spec_authentication.setter
    def spec_authentication(self, value: Optional[pulumi.Input['SystemBlueprintPropertiesStringPropsSpecAuthenticationArgs']]):
        pulumi.set(self, "spec_authentication", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class SystemBlueprintPropertiesStringPropsSpecAuthenticationArgsDict(TypedDict):
        authorization_url: pulumi.Input[str]
        """
        The authorizationUrl of the spec authentication
        """
        client_id: pulumi.Input[str]
        """
        The clientId of the spec authentication
        """
        token_url: pulumi.Input[str]
        """
        The tokenUrl of the spec authentication
        """
elif False:
    SystemBlueprintPropertiesStringPropsSpecAuthenticationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBlueprintPropertiesStringPropsSpecAuthenticationArgs:
    def __init__(__self__, *,
                 authorization_url: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 token_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] authorization_url: The authorizationUrl of the spec authentication
        :param pulumi.Input[str] client_id: The clientId of the spec authentication
        :param pulumi.Input[str] token_url: The tokenUrl of the spec authentication
        """
        pulumi.set(__self__, "authorization_url", authorization_url)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="authorizationUrl")
    def authorization_url(self) -> pulumi.Input[str]:
        """
        The authorizationUrl of the spec authentication
        """
        return pulumi.get(self, "authorization_url")

    @authorization_url.setter
    def authorization_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "authorization_url", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The clientId of the spec authentication
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> pulumi.Input[str]:
        """
        The tokenUrl of the spec authentication
        """
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_url", value)


if not MYPY:
    class SystemBlueprintRelationsArgsDict(TypedDict):
        target: pulumi.Input[str]
        """
        The target of the relation
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the relation
        """
        many: NotRequired[pulumi.Input[bool]]
        """
        The many of the relation
        """
        required: NotRequired[pulumi.Input[bool]]
        """
        The required of the relation
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the relation
        """
elif False:
    SystemBlueprintRelationsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SystemBlueprintRelationsArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 many: Optional[pulumi.Input[bool]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] target: The target of the relation
        :param pulumi.Input[str] description: The description of the relation
        :param pulumi.Input[bool] many: The many of the relation
        :param pulumi.Input[bool] required: The required of the relation
        :param pulumi.Input[str] title: The title of the relation
        """
        pulumi.set(__self__, "target", target)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if many is not None:
            pulumi.set(__self__, "many", many)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        The target of the relation
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the relation
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def many(self) -> Optional[pulumi.Input[bool]]:
        """
        The many of the relation
        """
        return pulumi.get(self, "many")

    @many.setter
    def many(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "many", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        The required of the relation
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the relation
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class WebhookMappingArgsDict(TypedDict):
        blueprint: pulumi.Input[str]
        """
        The blueprint of the mapping
        """
        entity: pulumi.Input['WebhookMappingEntityArgsDict']
        """
        The entity of the mapping
        """
        filter: NotRequired[pulumi.Input[str]]
        """
        The filter of the mapping
        """
        items_to_parse: NotRequired[pulumi.Input[str]]
        """
        The items to parser of the mapping
        """
elif False:
    WebhookMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WebhookMappingArgs:
    def __init__(__self__, *,
                 blueprint: pulumi.Input[str],
                 entity: pulumi.Input['WebhookMappingEntityArgs'],
                 filter: Optional[pulumi.Input[str]] = None,
                 items_to_parse: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] blueprint: The blueprint of the mapping
        :param pulumi.Input['WebhookMappingEntityArgs'] entity: The entity of the mapping
        :param pulumi.Input[str] filter: The filter of the mapping
        :param pulumi.Input[str] items_to_parse: The items to parser of the mapping
        """
        pulumi.set(__self__, "blueprint", blueprint)
        pulumi.set(__self__, "entity", entity)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if items_to_parse is not None:
            pulumi.set(__self__, "items_to_parse", items_to_parse)

    @property
    @pulumi.getter
    def blueprint(self) -> pulumi.Input[str]:
        """
        The blueprint of the mapping
        """
        return pulumi.get(self, "blueprint")

    @blueprint.setter
    def blueprint(self, value: pulumi.Input[str]):
        pulumi.set(self, "blueprint", value)

    @property
    @pulumi.getter
    def entity(self) -> pulumi.Input['WebhookMappingEntityArgs']:
        """
        The entity of the mapping
        """
        return pulumi.get(self, "entity")

    @entity.setter
    def entity(self, value: pulumi.Input['WebhookMappingEntityArgs']):
        pulumi.set(self, "entity", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        The filter of the mapping
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="itemsToParse")
    def items_to_parse(self) -> Optional[pulumi.Input[str]]:
        """
        The items to parser of the mapping
        """
        return pulumi.get(self, "items_to_parse")

    @items_to_parse.setter
    def items_to_parse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "items_to_parse", value)


if not MYPY:
    class WebhookMappingEntityArgsDict(TypedDict):
        identifier: pulumi.Input[str]
        """
        The identifier of the entity
        """
        icon: NotRequired[pulumi.Input[str]]
        """
        The icon of the entity
        """
        properties: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The properties of the entity
        """
        relations: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The relations of the entity
        """
        team: NotRequired[pulumi.Input[str]]
        """
        The team of the entity
        """
        title: NotRequired[pulumi.Input[str]]
        """
        The title of the entity
        """
elif False:
    WebhookMappingEntityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WebhookMappingEntityArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[str],
                 icon: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 relations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 team: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] identifier: The identifier of the entity
        :param pulumi.Input[str] icon: The icon of the entity
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: The properties of the entity
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] relations: The relations of the entity
        :param pulumi.Input[str] team: The team of the entity
        :param pulumi.Input[str] title: The title of the entity
        """
        pulumi.set(__self__, "identifier", identifier)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if relations is not None:
            pulumi.set(__self__, "relations", relations)
        if team is not None:
            pulumi.set(__self__, "team", team)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        """
        The identifier of the entity
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the entity
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The properties of the entity
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def relations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The relations of the entity
        """
        return pulumi.get(self, "relations")

    @relations.setter
    def relations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "relations", value)

    @property
    @pulumi.getter
    def team(self) -> Optional[pulumi.Input[str]]:
        """
        The team of the entity
        """
        return pulumi.get(self, "team")

    @team.setter
    def team(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the entity
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


if not MYPY:
    class WebhookSecurityArgsDict(TypedDict):
        request_identifier_path: NotRequired[pulumi.Input[str]]
        """
        The request identifier path of the webhook
        """
        secret: NotRequired[pulumi.Input[str]]
        """
        The secret of the webhook
        """
        signature_algorithm: NotRequired[pulumi.Input[str]]
        """
        The signature algorithm of the webhook
        """
        signature_header_name: NotRequired[pulumi.Input[str]]
        """
        The signature header name of the webhook
        """
        signature_prefix: NotRequired[pulumi.Input[str]]
        """
        The signature prefix of the webhook
        """
elif False:
    WebhookSecurityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WebhookSecurityArgs:
    def __init__(__self__, *,
                 request_identifier_path: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 signature_algorithm: Optional[pulumi.Input[str]] = None,
                 signature_header_name: Optional[pulumi.Input[str]] = None,
                 signature_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] request_identifier_path: The request identifier path of the webhook
        :param pulumi.Input[str] secret: The secret of the webhook
        :param pulumi.Input[str] signature_algorithm: The signature algorithm of the webhook
        :param pulumi.Input[str] signature_header_name: The signature header name of the webhook
        :param pulumi.Input[str] signature_prefix: The signature prefix of the webhook
        """
        if request_identifier_path is not None:
            pulumi.set(__self__, "request_identifier_path", request_identifier_path)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if signature_header_name is not None:
            pulumi.set(__self__, "signature_header_name", signature_header_name)
        if signature_prefix is not None:
            pulumi.set(__self__, "signature_prefix", signature_prefix)

    @property
    @pulumi.getter(name="requestIdentifierPath")
    def request_identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        The request identifier path of the webhook
        """
        return pulumi.get(self, "request_identifier_path")

    @request_identifier_path.setter
    def request_identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_identifier_path", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        The secret of the webhook
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The signature algorithm of the webhook
        """
        return pulumi.get(self, "signature_algorithm")

    @signature_algorithm.setter
    def signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_algorithm", value)

    @property
    @pulumi.getter(name="signatureHeaderName")
    def signature_header_name(self) -> Optional[pulumi.Input[str]]:
        """
        The signature header name of the webhook
        """
        return pulumi.get(self, "signature_header_name")

    @signature_header_name.setter
    def signature_header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_header_name", value)

    @property
    @pulumi.getter(name="signaturePrefix")
    def signature_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The signature prefix of the webhook
        """
        return pulumi.get(self, "signature_prefix")

    @signature_prefix.setter
    def signature_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature_prefix", value)


