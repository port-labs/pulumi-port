# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSearchResult',
    'AwaitableGetSearchResult',
    'get_search',
    'get_search_output',
]

@pulumi.output_type
class GetSearchResult:
    """
    A collection of values returned by getSearch.
    """
    def __init__(__self__, attach_title_to_relation=None, entities=None, exclude_calculated_properties=None, excludes=None, id=None, includes=None, matching_blueprints=None, query=None):
        if attach_title_to_relation and not isinstance(attach_title_to_relation, bool):
            raise TypeError("Expected argument 'attach_title_to_relation' to be a bool")
        pulumi.set(__self__, "attach_title_to_relation", attach_title_to_relation)
        if entities and not isinstance(entities, list):
            raise TypeError("Expected argument 'entities' to be a list")
        pulumi.set(__self__, "entities", entities)
        if exclude_calculated_properties and not isinstance(exclude_calculated_properties, bool):
            raise TypeError("Expected argument 'exclude_calculated_properties' to be a bool")
        pulumi.set(__self__, "exclude_calculated_properties", exclude_calculated_properties)
        if excludes and not isinstance(excludes, list):
            raise TypeError("Expected argument 'excludes' to be a list")
        pulumi.set(__self__, "excludes", excludes)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if includes and not isinstance(includes, list):
            raise TypeError("Expected argument 'includes' to be a list")
        pulumi.set(__self__, "includes", includes)
        if matching_blueprints and not isinstance(matching_blueprints, list):
            raise TypeError("Expected argument 'matching_blueprints' to be a list")
        pulumi.set(__self__, "matching_blueprints", matching_blueprints)
        if query and not isinstance(query, str):
            raise TypeError("Expected argument 'query' to be a str")
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter(name="attachTitleToRelation")
    def attach_title_to_relation(self) -> Optional[bool]:
        """
        Attach title to relation
        """
        return pulumi.get(self, "attach_title_to_relation")

    @property
    @pulumi.getter
    def entities(self) -> Sequence['outputs.GetSearchEntityResult']:
        """
        A list of entities matching the search query
        """
        return pulumi.get(self, "entities")

    @property
    @pulumi.getter(name="excludeCalculatedProperties")
    def exclude_calculated_properties(self) -> Optional[bool]:
        """
        Exclude calculated properties
        """
        return pulumi.get(self, "exclude_calculated_properties")

    @property
    @pulumi.getter
    def excludes(self) -> Optional[Sequence[str]]:
        """
        Properties to exclude from the results
        """
        return pulumi.get(self, "excludes")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def includes(self) -> Optional[Sequence[str]]:
        """
        Properties to include in the results
        """
        return pulumi.get(self, "includes")

    @property
    @pulumi.getter(name="matchingBlueprints")
    def matching_blueprints(self) -> Sequence[str]:
        """
        The matching blueprints for the search query
        """
        return pulumi.get(self, "matching_blueprints")

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        The search query
        """
        return pulumi.get(self, "query")


class AwaitableGetSearchResult(GetSearchResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSearchResult(
            attach_title_to_relation=self.attach_title_to_relation,
            entities=self.entities,
            exclude_calculated_properties=self.exclude_calculated_properties,
            excludes=self.excludes,
            id=self.id,
            includes=self.includes,
            matching_blueprints=self.matching_blueprints,
            query=self.query)


def get_search(attach_title_to_relation: Optional[bool] = None,
               exclude_calculated_properties: Optional[bool] = None,
               excludes: Optional[Sequence[str]] = None,
               includes: Optional[Sequence[str]] = None,
               query: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSearchResult:
    """
    The search data source allows you to search for entities in Port.

    See the [Port documentation](https://docs.getport.io/search-and-query/) for more information about the search capabilities in Port.

    ## Example Usage


    :param bool attach_title_to_relation: Attach title to relation
    :param bool exclude_calculated_properties: Exclude calculated properties
    :param Sequence[str] excludes: Properties to exclude from the results
    :param Sequence[str] includes: Properties to include in the results
    :param str query: The search query
    """
    __args__ = dict()
    __args__['attachTitleToRelation'] = attach_title_to_relation
    __args__['excludeCalculatedProperties'] = exclude_calculated_properties
    __args__['excludes'] = excludes
    __args__['includes'] = includes
    __args__['query'] = query
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('port:index/getSearch:getSearch', __args__, opts=opts, typ=GetSearchResult).value

    return AwaitableGetSearchResult(
        attach_title_to_relation=pulumi.get(__ret__, 'attach_title_to_relation'),
        entities=pulumi.get(__ret__, 'entities'),
        exclude_calculated_properties=pulumi.get(__ret__, 'exclude_calculated_properties'),
        excludes=pulumi.get(__ret__, 'excludes'),
        id=pulumi.get(__ret__, 'id'),
        includes=pulumi.get(__ret__, 'includes'),
        matching_blueprints=pulumi.get(__ret__, 'matching_blueprints'),
        query=pulumi.get(__ret__, 'query'))
def get_search_output(attach_title_to_relation: Optional[pulumi.Input[Optional[bool]]] = None,
                      exclude_calculated_properties: Optional[pulumi.Input[Optional[bool]]] = None,
                      excludes: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                      includes: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                      query: Optional[pulumi.Input[str]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSearchResult]:
    """
    The search data source allows you to search for entities in Port.

    See the [Port documentation](https://docs.getport.io/search-and-query/) for more information about the search capabilities in Port.

    ## Example Usage


    :param bool attach_title_to_relation: Attach title to relation
    :param bool exclude_calculated_properties: Exclude calculated properties
    :param Sequence[str] excludes: Properties to exclude from the results
    :param Sequence[str] includes: Properties to include in the results
    :param str query: The search query
    """
    __args__ = dict()
    __args__['attachTitleToRelation'] = attach_title_to_relation
    __args__['excludeCalculatedProperties'] = exclude_calculated_properties
    __args__['excludes'] = excludes
    __args__['includes'] = includes
    __args__['query'] = query
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('port:index/getSearch:getSearch', __args__, opts=opts, typ=GetSearchResult)
    return __ret__.apply(lambda __response__: GetSearchResult(
        attach_title_to_relation=pulumi.get(__response__, 'attach_title_to_relation'),
        entities=pulumi.get(__response__, 'entities'),
        exclude_calculated_properties=pulumi.get(__response__, 'exclude_calculated_properties'),
        excludes=pulumi.get(__response__, 'excludes'),
        id=pulumi.get(__response__, 'id'),
        includes=pulumi.get(__response__, 'includes'),
        matching_blueprints=pulumi.get(__response__, 'matching_blueprints'),
        query=pulumi.get(__response__, 'query')))
