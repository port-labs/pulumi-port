# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['OrganizationSecretArgs', 'OrganizationSecret']

@pulumi.input_type
class OrganizationSecretArgs:
    def __init__(__self__, *,
                 secret_name: pulumi.Input[str],
                 secret_value: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OrganizationSecret resource.
        :param pulumi.Input[str] secret_name: The name of the organization secret
        :param pulumi.Input[str] secret_value: The value of the organization secret
        :param pulumi.Input[str] description: The description of the organization secret
        """
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "secret_value", secret_value)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        The name of the organization secret
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> pulumi.Input[str]:
        """
        The value of the organization secret
        """
        return pulumi.get(self, "secret_value")

    @secret_value.setter
    def secret_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the organization secret
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _OrganizationSecretState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 secret_value: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OrganizationSecret resources.
        :param pulumi.Input[str] description: The description of the organization secret
        :param pulumi.Input[str] secret_name: The name of the organization secret
        :param pulumi.Input[str] secret_value: The value of the organization secret
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the organization secret
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the organization secret
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the organization secret
        """
        return pulumi.get(self, "secret_value")

    @secret_value.setter
    def secret_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_value", value)


class OrganizationSecret(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 secret_value: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Organization secret resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the organization secret
        :param pulumi.Input[str] secret_name: The name of the organization secret
        :param pulumi.Input[str] secret_value: The value of the organization secret
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrganizationSecretArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Organization secret resource

        :param str resource_name: The name of the resource.
        :param OrganizationSecretArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrganizationSecretArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 secret_value: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrganizationSecretArgs.__new__(OrganizationSecretArgs)

            __props__.__dict__["description"] = description
            if secret_name is None and not opts.urn:
                raise TypeError("Missing required property 'secret_name'")
            __props__.__dict__["secret_name"] = secret_name
            if secret_value is None and not opts.urn:
                raise TypeError("Missing required property 'secret_value'")
            __props__.__dict__["secret_value"] = None if secret_value is None else pulumi.Output.secret(secret_value)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["secretValue"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(OrganizationSecret, __self__).__init__(
            'port:index/organizationSecret:OrganizationSecret',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            secret_name: Optional[pulumi.Input[str]] = None,
            secret_value: Optional[pulumi.Input[str]] = None) -> 'OrganizationSecret':
        """
        Get an existing OrganizationSecret resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the organization secret
        :param pulumi.Input[str] secret_name: The name of the organization secret
        :param pulumi.Input[str] secret_value: The value of the organization secret
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrganizationSecretState.__new__(_OrganizationSecretState)

        __props__.__dict__["description"] = description
        __props__.__dict__["secret_name"] = secret_name
        __props__.__dict__["secret_value"] = secret_value
        return OrganizationSecret(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the organization secret
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Output[str]:
        """
        The name of the organization secret
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> pulumi.Output[str]:
        """
        The value of the organization secret
        """
        return pulumi.get(self, "secret_value")

