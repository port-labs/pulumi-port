# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'ActionApprovalEmailNotification',
    'ActionApprovalWebhookNotification',
    'ActionAutomationTrigger',
    'ActionAutomationTriggerAnyEntityChangeEvent',
    'ActionAutomationTriggerAnyRunChangeEvent',
    'ActionAutomationTriggerEntityCreatedEvent',
    'ActionAutomationTriggerEntityDeletedEvent',
    'ActionAutomationTriggerEntityUpdatedEvent',
    'ActionAutomationTriggerJqCondition',
    'ActionAutomationTriggerRunCreatedEvent',
    'ActionAutomationTriggerRunUpdatedEvent',
    'ActionAutomationTriggerTimerPropertyExpiredEvent',
    'ActionAzureMethod',
    'ActionGithubMethod',
    'ActionGitlabMethod',
    'ActionKafkaMethod',
    'ActionPermissionsPermissions',
    'ActionPermissionsPermissionsApprove',
    'ActionPermissionsPermissionsExecute',
    'ActionSelfServiceTrigger',
    'ActionSelfServiceTriggerStep',
    'ActionSelfServiceTriggerUserProperties',
    'ActionSelfServiceTriggerUserPropertiesArrayProps',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItems',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItems',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItems',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsSort',
    'ActionSelfServiceTriggerUserPropertiesArrayPropsStringItems',
    'ActionSelfServiceTriggerUserPropertiesBooleanProps',
    'ActionSelfServiceTriggerUserPropertiesNumberProps',
    'ActionSelfServiceTriggerUserPropertiesObjectProps',
    'ActionSelfServiceTriggerUserPropertiesStringProps',
    'ActionSelfServiceTriggerUserPropertiesStringPropsDataset',
    'ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRule',
    'ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValue',
    'ActionSelfServiceTriggerUserPropertiesStringPropsSort',
    'ActionUpsertEntityMethod',
    'ActionUpsertEntityMethodMapping',
    'ActionWebhookMethod',
    'AggregationPropertiesProperties',
    'AggregationPropertiesPropertiesMethod',
    'AggregationPropertiesPropertiesMethodAggregateByProperty',
    'AggregationPropertiesPropertiesMethodAverageByProperty',
    'AggregationPropertiesPropertiesMethodAverageEntities',
    'BlueprintCalculationProperties',
    'BlueprintKafkaChangelogDestination',
    'BlueprintMirrorProperties',
    'BlueprintOwnership',
    'BlueprintPermissionsEntities',
    'BlueprintPermissionsEntitiesRegister',
    'BlueprintPermissionsEntitiesUnregister',
    'BlueprintPermissionsEntitiesUpdate',
    'BlueprintPermissionsEntitiesUpdateMetadataProperties',
    'BlueprintPermissionsEntitiesUpdateMetadataPropertiesIcon',
    'BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifier',
    'BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeam',
    'BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitle',
    'BlueprintPermissionsEntitiesUpdateProperties',
    'BlueprintPermissionsEntitiesUpdateRelations',
    'BlueprintProperties',
    'BlueprintPropertiesArrayProps',
    'BlueprintPropertiesArrayPropsBooleanItems',
    'BlueprintPropertiesArrayPropsNumberItems',
    'BlueprintPropertiesArrayPropsObjectItems',
    'BlueprintPropertiesArrayPropsStringItems',
    'BlueprintPropertiesBooleanProps',
    'BlueprintPropertiesNumberProps',
    'BlueprintPropertiesObjectProps',
    'BlueprintPropertiesStringProps',
    'BlueprintPropertiesStringPropsSpecAuthentication',
    'BlueprintRelations',
    'BlueprintTeamInheritance',
    'BlueprintWebhookChangelogDestination',
    'EntityProperties',
    'EntityPropertiesArrayProps',
    'EntityRelations',
    'IntegrationKafkaChangelogDestination',
    'IntegrationWebhookChangelogDestination',
    'PagePermissionsRead',
    'ScorecardFilter',
    'ScorecardLevel',
    'ScorecardRule',
    'ScorecardRuleQuery',
    'SystemBlueprintCalculationProperties',
    'SystemBlueprintMirrorProperties',
    'SystemBlueprintProperties',
    'SystemBlueprintPropertiesArrayProps',
    'SystemBlueprintPropertiesArrayPropsBooleanItems',
    'SystemBlueprintPropertiesArrayPropsNumberItems',
    'SystemBlueprintPropertiesArrayPropsObjectItems',
    'SystemBlueprintPropertiesArrayPropsStringItems',
    'SystemBlueprintPropertiesBooleanProps',
    'SystemBlueprintPropertiesNumberProps',
    'SystemBlueprintPropertiesObjectProps',
    'SystemBlueprintPropertiesStringProps',
    'SystemBlueprintPropertiesStringPropsSpecAuthentication',
    'SystemBlueprintRelations',
    'WebhookMapping',
    'WebhookMappingEntity',
    'WebhookSecurity',
    'GetSearchEntityResult',
    'GetSearchEntityPropertiesResult',
    'GetSearchEntityPropertiesArrayPropsResult',
    'GetSearchEntityRelationsResult',
    'GetSearchEntityScorecardsResult',
    'GetSearchEntityScorecardsRuleResult',
]

@pulumi.output_type
class ActionApprovalEmailNotification(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class ActionApprovalWebhookNotification(dict):
    def __init__(__self__, *,
                 url: str,
                 format: Optional[str] = None):
        """
        :param str url: The URL to invoke the webhook
        :param str format: The format to invoke the webhook
        """
        pulumi.set(__self__, "url", url)
        if format is not None:
            pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL to invoke the webhook
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        The format to invoke the webhook
        """
        return pulumi.get(self, "format")


@pulumi.output_type
class ActionAutomationTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "anyEntityChangeEvent":
            suggest = "any_entity_change_event"
        elif key == "anyRunChangeEvent":
            suggest = "any_run_change_event"
        elif key == "entityCreatedEvent":
            suggest = "entity_created_event"
        elif key == "entityDeletedEvent":
            suggest = "entity_deleted_event"
        elif key == "entityUpdatedEvent":
            suggest = "entity_updated_event"
        elif key == "jqCondition":
            suggest = "jq_condition"
        elif key == "runCreatedEvent":
            suggest = "run_created_event"
        elif key == "runUpdatedEvent":
            suggest = "run_updated_event"
        elif key == "timerPropertyExpiredEvent":
            suggest = "timer_property_expired_event"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionAutomationTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionAutomationTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionAutomationTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 any_entity_change_event: Optional['outputs.ActionAutomationTriggerAnyEntityChangeEvent'] = None,
                 any_run_change_event: Optional['outputs.ActionAutomationTriggerAnyRunChangeEvent'] = None,
                 entity_created_event: Optional['outputs.ActionAutomationTriggerEntityCreatedEvent'] = None,
                 entity_deleted_event: Optional['outputs.ActionAutomationTriggerEntityDeletedEvent'] = None,
                 entity_updated_event: Optional['outputs.ActionAutomationTriggerEntityUpdatedEvent'] = None,
                 jq_condition: Optional['outputs.ActionAutomationTriggerJqCondition'] = None,
                 run_created_event: Optional['outputs.ActionAutomationTriggerRunCreatedEvent'] = None,
                 run_updated_event: Optional['outputs.ActionAutomationTriggerRunUpdatedEvent'] = None,
                 timer_property_expired_event: Optional['outputs.ActionAutomationTriggerTimerPropertyExpiredEvent'] = None):
        """
        :param 'ActionAutomationTriggerAnyEntityChangeEventArgs' any_entity_change_event: Any entity change event trigger
        :param 'ActionAutomationTriggerAnyRunChangeEventArgs' any_run_change_event: Any run change event trigger
        :param 'ActionAutomationTriggerEntityCreatedEventArgs' entity_created_event: Entity created event trigger
        :param 'ActionAutomationTriggerEntityDeletedEventArgs' entity_deleted_event: Entity deleted event trigger
        :param 'ActionAutomationTriggerEntityUpdatedEventArgs' entity_updated_event: Entity updated event trigger
        :param 'ActionAutomationTriggerJqConditionArgs' jq_condition: JQ condition for automation trigger
        :param 'ActionAutomationTriggerRunCreatedEventArgs' run_created_event: Run created event trigger
        :param 'ActionAutomationTriggerRunUpdatedEventArgs' run_updated_event: Run updated event trigger
        :param 'ActionAutomationTriggerTimerPropertyExpiredEventArgs' timer_property_expired_event: Timer property expired event trigger
        """
        if any_entity_change_event is not None:
            pulumi.set(__self__, "any_entity_change_event", any_entity_change_event)
        if any_run_change_event is not None:
            pulumi.set(__self__, "any_run_change_event", any_run_change_event)
        if entity_created_event is not None:
            pulumi.set(__self__, "entity_created_event", entity_created_event)
        if entity_deleted_event is not None:
            pulumi.set(__self__, "entity_deleted_event", entity_deleted_event)
        if entity_updated_event is not None:
            pulumi.set(__self__, "entity_updated_event", entity_updated_event)
        if jq_condition is not None:
            pulumi.set(__self__, "jq_condition", jq_condition)
        if run_created_event is not None:
            pulumi.set(__self__, "run_created_event", run_created_event)
        if run_updated_event is not None:
            pulumi.set(__self__, "run_updated_event", run_updated_event)
        if timer_property_expired_event is not None:
            pulumi.set(__self__, "timer_property_expired_event", timer_property_expired_event)

    @property
    @pulumi.getter(name="anyEntityChangeEvent")
    def any_entity_change_event(self) -> Optional['outputs.ActionAutomationTriggerAnyEntityChangeEvent']:
        """
        Any entity change event trigger
        """
        return pulumi.get(self, "any_entity_change_event")

    @property
    @pulumi.getter(name="anyRunChangeEvent")
    def any_run_change_event(self) -> Optional['outputs.ActionAutomationTriggerAnyRunChangeEvent']:
        """
        Any run change event trigger
        """
        return pulumi.get(self, "any_run_change_event")

    @property
    @pulumi.getter(name="entityCreatedEvent")
    def entity_created_event(self) -> Optional['outputs.ActionAutomationTriggerEntityCreatedEvent']:
        """
        Entity created event trigger
        """
        return pulumi.get(self, "entity_created_event")

    @property
    @pulumi.getter(name="entityDeletedEvent")
    def entity_deleted_event(self) -> Optional['outputs.ActionAutomationTriggerEntityDeletedEvent']:
        """
        Entity deleted event trigger
        """
        return pulumi.get(self, "entity_deleted_event")

    @property
    @pulumi.getter(name="entityUpdatedEvent")
    def entity_updated_event(self) -> Optional['outputs.ActionAutomationTriggerEntityUpdatedEvent']:
        """
        Entity updated event trigger
        """
        return pulumi.get(self, "entity_updated_event")

    @property
    @pulumi.getter(name="jqCondition")
    def jq_condition(self) -> Optional['outputs.ActionAutomationTriggerJqCondition']:
        """
        JQ condition for automation trigger
        """
        return pulumi.get(self, "jq_condition")

    @property
    @pulumi.getter(name="runCreatedEvent")
    def run_created_event(self) -> Optional['outputs.ActionAutomationTriggerRunCreatedEvent']:
        """
        Run created event trigger
        """
        return pulumi.get(self, "run_created_event")

    @property
    @pulumi.getter(name="runUpdatedEvent")
    def run_updated_event(self) -> Optional['outputs.ActionAutomationTriggerRunUpdatedEvent']:
        """
        Run updated event trigger
        """
        return pulumi.get(self, "run_updated_event")

    @property
    @pulumi.getter(name="timerPropertyExpiredEvent")
    def timer_property_expired_event(self) -> Optional['outputs.ActionAutomationTriggerTimerPropertyExpiredEvent']:
        """
        Timer property expired event trigger
        """
        return pulumi.get(self, "timer_property_expired_event")


@pulumi.output_type
class ActionAutomationTriggerAnyEntityChangeEvent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blueprintIdentifier":
            suggest = "blueprint_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionAutomationTriggerAnyEntityChangeEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionAutomationTriggerAnyEntityChangeEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionAutomationTriggerAnyEntityChangeEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blueprint_identifier: str):
        """
        :param str blueprint_identifier: The blueprint identifier of the changed entity
        """
        pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> str:
        """
        The blueprint identifier of the changed entity
        """
        return pulumi.get(self, "blueprint_identifier")


@pulumi.output_type
class ActionAutomationTriggerAnyRunChangeEvent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionIdentifier":
            suggest = "action_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionAutomationTriggerAnyRunChangeEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionAutomationTriggerAnyRunChangeEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionAutomationTriggerAnyRunChangeEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_identifier: str):
        """
        :param str action_identifier: The action identifier of the changed run
        """
        pulumi.set(__self__, "action_identifier", action_identifier)

    @property
    @pulumi.getter(name="actionIdentifier")
    def action_identifier(self) -> str:
        """
        The action identifier of the changed run
        """
        return pulumi.get(self, "action_identifier")


@pulumi.output_type
class ActionAutomationTriggerEntityCreatedEvent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blueprintIdentifier":
            suggest = "blueprint_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionAutomationTriggerEntityCreatedEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionAutomationTriggerEntityCreatedEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionAutomationTriggerEntityCreatedEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blueprint_identifier: str):
        """
        :param str blueprint_identifier: The blueprint identifier of the created entity
        """
        pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> str:
        """
        The blueprint identifier of the created entity
        """
        return pulumi.get(self, "blueprint_identifier")


@pulumi.output_type
class ActionAutomationTriggerEntityDeletedEvent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blueprintIdentifier":
            suggest = "blueprint_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionAutomationTriggerEntityDeletedEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionAutomationTriggerEntityDeletedEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionAutomationTriggerEntityDeletedEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blueprint_identifier: str):
        """
        :param str blueprint_identifier: The blueprint identifier of the deleted entity
        """
        pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> str:
        """
        The blueprint identifier of the deleted entity
        """
        return pulumi.get(self, "blueprint_identifier")


@pulumi.output_type
class ActionAutomationTriggerEntityUpdatedEvent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blueprintIdentifier":
            suggest = "blueprint_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionAutomationTriggerEntityUpdatedEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionAutomationTriggerEntityUpdatedEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionAutomationTriggerEntityUpdatedEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blueprint_identifier: str):
        """
        :param str blueprint_identifier: The blueprint identifier of the updated entity
        """
        pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> str:
        """
        The blueprint identifier of the updated entity
        """
        return pulumi.get(self, "blueprint_identifier")


@pulumi.output_type
class ActionAutomationTriggerJqCondition(dict):
    def __init__(__self__, *,
                 expressions: Sequence[str],
                 combinator: Optional[str] = None):
        """
        :param Sequence[str] expressions: The jq expressions of the condition
        :param str combinator: The combinator of the condition
        """
        pulumi.set(__self__, "expressions", expressions)
        if combinator is not None:
            pulumi.set(__self__, "combinator", combinator)

    @property
    @pulumi.getter
    def expressions(self) -> Sequence[str]:
        """
        The jq expressions of the condition
        """
        return pulumi.get(self, "expressions")

    @property
    @pulumi.getter
    def combinator(self) -> Optional[str]:
        """
        The combinator of the condition
        """
        return pulumi.get(self, "combinator")


@pulumi.output_type
class ActionAutomationTriggerRunCreatedEvent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionIdentifier":
            suggest = "action_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionAutomationTriggerRunCreatedEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionAutomationTriggerRunCreatedEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionAutomationTriggerRunCreatedEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_identifier: str):
        """
        :param str action_identifier: The action identifier of the created run
        """
        pulumi.set(__self__, "action_identifier", action_identifier)

    @property
    @pulumi.getter(name="actionIdentifier")
    def action_identifier(self) -> str:
        """
        The action identifier of the created run
        """
        return pulumi.get(self, "action_identifier")


@pulumi.output_type
class ActionAutomationTriggerRunUpdatedEvent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionIdentifier":
            suggest = "action_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionAutomationTriggerRunUpdatedEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionAutomationTriggerRunUpdatedEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionAutomationTriggerRunUpdatedEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_identifier: str):
        """
        :param str action_identifier: The action identifier of the updated run
        """
        pulumi.set(__self__, "action_identifier", action_identifier)

    @property
    @pulumi.getter(name="actionIdentifier")
    def action_identifier(self) -> str:
        """
        The action identifier of the updated run
        """
        return pulumi.get(self, "action_identifier")


@pulumi.output_type
class ActionAutomationTriggerTimerPropertyExpiredEvent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blueprintIdentifier":
            suggest = "blueprint_identifier"
        elif key == "propertyIdentifier":
            suggest = "property_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionAutomationTriggerTimerPropertyExpiredEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionAutomationTriggerTimerPropertyExpiredEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionAutomationTriggerTimerPropertyExpiredEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blueprint_identifier: str,
                 property_identifier: str):
        """
        :param str blueprint_identifier: The blueprint identifier of the expired timer property
        :param str property_identifier: The property identifier of the expired timer property
        """
        pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)
        pulumi.set(__self__, "property_identifier", property_identifier)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> str:
        """
        The blueprint identifier of the expired timer property
        """
        return pulumi.get(self, "blueprint_identifier")

    @property
    @pulumi.getter(name="propertyIdentifier")
    def property_identifier(self) -> str:
        """
        The property identifier of the expired timer property
        """
        return pulumi.get(self, "property_identifier")


@pulumi.output_type
class ActionAzureMethod(dict):
    def __init__(__self__, *,
                 org: str,
                 webhook: str,
                 payload: Optional[str] = None):
        """
        :param str org: Required when selecting type AZURE. The Azure org that the workflow belongs to
        :param str webhook: Required when selecting type AZURE. The Azure webhook that the workflow belongs to
        :param str payload: The Azure Devops workflow [payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        pulumi.set(__self__, "org", org)
        pulumi.set(__self__, "webhook", webhook)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)

    @property
    @pulumi.getter
    def org(self) -> str:
        """
        Required when selecting type AZURE. The Azure org that the workflow belongs to
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def webhook(self) -> str:
        """
        Required when selecting type AZURE. The Azure webhook that the workflow belongs to
        """
        return pulumi.get(self, "webhook")

    @property
    @pulumi.getter
    def payload(self) -> Optional[str]:
        """
        The Azure Devops workflow [payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        return pulumi.get(self, "payload")


@pulumi.output_type
class ActionGithubMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "reportWorkflowStatus":
            suggest = "report_workflow_status"
        elif key == "workflowInputs":
            suggest = "workflow_inputs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGithubMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGithubMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGithubMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 org: str,
                 repo: str,
                 workflow: str,
                 report_workflow_status: Optional[str] = None,
                 workflow_inputs: Optional[str] = None):
        """
        :param str org: Required when selecting type GITHUB. The GitHub org that the workflow belongs to
        :param str repo: Required when selecting type GITHUB. The GitHub repo that the workflow belongs to
        :param str workflow: The GitHub workflow that the action belongs to
        :param str report_workflow_status: Report the workflow status when invoking the action
        :param str workflow_inputs: The GitHub [workflow inputs](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        pulumi.set(__self__, "org", org)
        pulumi.set(__self__, "repo", repo)
        pulumi.set(__self__, "workflow", workflow)
        if report_workflow_status is not None:
            pulumi.set(__self__, "report_workflow_status", report_workflow_status)
        if workflow_inputs is not None:
            pulumi.set(__self__, "workflow_inputs", workflow_inputs)

    @property
    @pulumi.getter
    def org(self) -> str:
        """
        Required when selecting type GITHUB. The GitHub org that the workflow belongs to
        """
        return pulumi.get(self, "org")

    @property
    @pulumi.getter
    def repo(self) -> str:
        """
        Required when selecting type GITHUB. The GitHub repo that the workflow belongs to
        """
        return pulumi.get(self, "repo")

    @property
    @pulumi.getter
    def workflow(self) -> str:
        """
        The GitHub workflow that the action belongs to
        """
        return pulumi.get(self, "workflow")

    @property
    @pulumi.getter(name="reportWorkflowStatus")
    def report_workflow_status(self) -> Optional[str]:
        """
        Report the workflow status when invoking the action
        """
        return pulumi.get(self, "report_workflow_status")

    @property
    @pulumi.getter(name="workflowInputs")
    def workflow_inputs(self) -> Optional[str]:
        """
        The GitHub [workflow inputs](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        return pulumi.get(self, "workflow_inputs")


@pulumi.output_type
class ActionGitlabMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "projectName":
            suggest = "project_name"
        elif key == "defaultRef":
            suggest = "default_ref"
        elif key == "pipelineVariables":
            suggest = "pipeline_variables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionGitlabMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionGitlabMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionGitlabMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: str,
                 project_name: str,
                 default_ref: Optional[str] = None,
                 pipeline_variables: Optional[str] = None):
        """
        :param str group_name: Required when selecting type GITLAB. The GitLab group name that the workflow belongs to
        :param str project_name: Required when selecting type GITLAB. The GitLab project name that the workflow belongs to
        :param str default_ref: The default ref of the action
        :param str pipeline_variables: The Gitlab pipeline variables should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "project_name", project_name)
        if default_ref is not None:
            pulumi.set(__self__, "default_ref", default_ref)
        if pipeline_variables is not None:
            pulumi.set(__self__, "pipeline_variables", pipeline_variables)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        Required when selecting type GITLAB. The GitLab group name that the workflow belongs to
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> str:
        """
        Required when selecting type GITLAB. The GitLab project name that the workflow belongs to
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="defaultRef")
    def default_ref(self) -> Optional[str]:
        """
        The default ref of the action
        """
        return pulumi.get(self, "default_ref")

    @property
    @pulumi.getter(name="pipelineVariables")
    def pipeline_variables(self) -> Optional[str]:
        """
        The Gitlab pipeline variables should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        return pulumi.get(self, "pipeline_variables")


@pulumi.output_type
class ActionKafkaMethod(dict):
    def __init__(__self__, *,
                 payload: Optional[str] = None):
        """
        :param str payload: The Kafka message [payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        if payload is not None:
            pulumi.set(__self__, "payload", payload)

    @property
    @pulumi.getter
    def payload(self) -> Optional[str]:
        """
        The Kafka message [payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload) should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        return pulumi.get(self, "payload")


@pulumi.output_type
class ActionPermissionsPermissions(dict):
    def __init__(__self__, *,
                 approve: 'outputs.ActionPermissionsPermissionsApprove',
                 execute: 'outputs.ActionPermissionsPermissionsExecute'):
        """
        :param 'ActionPermissionsPermissionsApproveArgs' approve: The permission to approve the action's runs
        :param 'ActionPermissionsPermissionsExecuteArgs' execute: The permission to execute the action
        """
        pulumi.set(__self__, "approve", approve)
        pulumi.set(__self__, "execute", execute)

    @property
    @pulumi.getter
    def approve(self) -> 'outputs.ActionPermissionsPermissionsApprove':
        """
        The permission to approve the action's runs
        """
        return pulumi.get(self, "approve")

    @property
    @pulumi.getter
    def execute(self) -> 'outputs.ActionPermissionsPermissionsExecute':
        """
        The permission to execute the action
        """
        return pulumi.get(self, "execute")


@pulumi.output_type
class ActionPermissionsPermissionsApprove(dict):
    def __init__(__self__, *,
                 policy: Optional[str] = None,
                 roles: Optional[Sequence[str]] = None,
                 teams: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        """
        :param str policy: The policy to use for approval
        :param Sequence[str] roles: The roles with approval permission
        :param Sequence[str] teams: The teams with approval permission
        :param Sequence[str] users: The users with approval permission
        """
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        """
        The policy to use for approval
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        The roles with approval permission
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        """
        The teams with approval permission
        """
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        The users with approval permission
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class ActionPermissionsPermissionsExecute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ownedByTeam":
            suggest = "owned_by_team"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionPermissionsPermissionsExecute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionPermissionsPermissionsExecute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionPermissionsPermissionsExecute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owned_by_team: Optional[bool] = None,
                 policy: Optional[str] = None,
                 roles: Optional[Sequence[str]] = None,
                 teams: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        """
        :param bool owned_by_team: Give execution permission to the teams who own the entity
        :param str policy: The policy to use for execution
        :param Sequence[str] roles: The roles with execution permission
        :param Sequence[str] teams: The teams with execution permission
        :param Sequence[str] users: The users with execution permission
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[bool]:
        """
        Give execution permission to the teams who own the entity
        """
        return pulumi.get(self, "owned_by_team")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        """
        The policy to use for execution
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        The roles with execution permission
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        """
        The teams with execution permission
        """
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        The users with execution permission
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class ActionSelfServiceTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blueprintIdentifier":
            suggest = "blueprint_identifier"
        elif key == "orderProperties":
            suggest = "order_properties"
        elif key == "requiredJqQuery":
            suggest = "required_jq_query"
        elif key == "userProperties":
            suggest = "user_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionSelfServiceTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionSelfServiceTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionSelfServiceTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operation: str,
                 blueprint_identifier: Optional[str] = None,
                 condition: Optional[str] = None,
                 order_properties: Optional[Sequence[str]] = None,
                 required_jq_query: Optional[str] = None,
                 steps: Optional[Sequence['outputs.ActionSelfServiceTriggerStep']] = None,
                 user_properties: Optional['outputs.ActionSelfServiceTriggerUserProperties'] = None):
        """
        :param str operation: The operation type of the action
        :param str blueprint_identifier: The ID of the blueprint
        :param str condition: The `condition` field allows you to define rules using Port's [search & query syntax](https://docs.getport.io/search-and-query/#rules) to determine which entities the action will be available for.
        :param Sequence[str] order_properties: Order properties
        :param str required_jq_query: The required jq query of the property
        :param Sequence['ActionSelfServiceTriggerStepArgs'] steps: The steps of the action
        :param 'ActionSelfServiceTriggerUserPropertiesArgs' user_properties: User properties
        """
        pulumi.set(__self__, "operation", operation)
        if blueprint_identifier is not None:
            pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if order_properties is not None:
            pulumi.set(__self__, "order_properties", order_properties)
        if required_jq_query is not None:
            pulumi.set(__self__, "required_jq_query", required_jq_query)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)
        if user_properties is not None:
            pulumi.set(__self__, "user_properties", user_properties)

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        The operation type of the action
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> Optional[str]:
        """
        The ID of the blueprint
        """
        return pulumi.get(self, "blueprint_identifier")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        The `condition` field allows you to define rules using Port's [search & query syntax](https://docs.getport.io/search-and-query/#rules) to determine which entities the action will be available for.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="orderProperties")
    def order_properties(self) -> Optional[Sequence[str]]:
        """
        Order properties
        """
        return pulumi.get(self, "order_properties")

    @property
    @pulumi.getter(name="requiredJqQuery")
    def required_jq_query(self) -> Optional[str]:
        """
        The required jq query of the property
        """
        return pulumi.get(self, "required_jq_query")

    @property
    @pulumi.getter
    def steps(self) -> Optional[Sequence['outputs.ActionSelfServiceTriggerStep']]:
        """
        The steps of the action
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter(name="userProperties")
    def user_properties(self) -> Optional['outputs.ActionSelfServiceTriggerUserProperties']:
        """
        User properties
        """
        return pulumi.get(self, "user_properties")


@pulumi.output_type
class ActionSelfServiceTriggerStep(dict):
    def __init__(__self__, *,
                 orders: Sequence[str],
                 title: str):
        """
        :param Sequence[str] orders: The order of the properties in this step
        :param str title: The step's title
        """
        pulumi.set(__self__, "orders", orders)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def orders(self) -> Sequence[str]:
        """
        The order of the properties in this step
        """
        return pulumi.get(self, "orders")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        The step's title
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class ActionSelfServiceTriggerUserProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arrayProps":
            suggest = "array_props"
        elif key == "booleanProps":
            suggest = "boolean_props"
        elif key == "numberProps":
            suggest = "number_props"
        elif key == "objectProps":
            suggest = "object_props"
        elif key == "stringProps":
            suggest = "string_props"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionSelfServiceTriggerUserProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionSelfServiceTriggerUserProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionSelfServiceTriggerUserProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 array_props: Optional[Mapping[str, 'outputs.ActionSelfServiceTriggerUserPropertiesArrayProps']] = None,
                 boolean_props: Optional[Mapping[str, 'outputs.ActionSelfServiceTriggerUserPropertiesBooleanProps']] = None,
                 number_props: Optional[Mapping[str, 'outputs.ActionSelfServiceTriggerUserPropertiesNumberProps']] = None,
                 object_props: Optional[Mapping[str, 'outputs.ActionSelfServiceTriggerUserPropertiesObjectProps']] = None,
                 string_props: Optional[Mapping[str, 'outputs.ActionSelfServiceTriggerUserPropertiesStringProps']] = None):
        """
        :param Mapping[str, 'ActionSelfServiceTriggerUserPropertiesArrayPropsArgs'] array_props: The array property of the action
        :param Mapping[str, 'ActionSelfServiceTriggerUserPropertiesBooleanPropsArgs'] boolean_props: The boolean property of the action
        :param Mapping[str, 'ActionSelfServiceTriggerUserPropertiesNumberPropsArgs'] number_props: The number property of the action
        :param Mapping[str, 'ActionSelfServiceTriggerUserPropertiesObjectPropsArgs'] object_props: The object property of the action
        :param Mapping[str, 'ActionSelfServiceTriggerUserPropertiesStringPropsArgs'] string_props: The string property of the action
        """
        if array_props is not None:
            pulumi.set(__self__, "array_props", array_props)
        if boolean_props is not None:
            pulumi.set(__self__, "boolean_props", boolean_props)
        if number_props is not None:
            pulumi.set(__self__, "number_props", number_props)
        if object_props is not None:
            pulumi.set(__self__, "object_props", object_props)
        if string_props is not None:
            pulumi.set(__self__, "string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[Mapping[str, 'outputs.ActionSelfServiceTriggerUserPropertiesArrayProps']]:
        """
        The array property of the action
        """
        return pulumi.get(self, "array_props")

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[Mapping[str, 'outputs.ActionSelfServiceTriggerUserPropertiesBooleanProps']]:
        """
        The boolean property of the action
        """
        return pulumi.get(self, "boolean_props")

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[Mapping[str, 'outputs.ActionSelfServiceTriggerUserPropertiesNumberProps']]:
        """
        The number property of the action
        """
        return pulumi.get(self, "number_props")

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[Mapping[str, 'outputs.ActionSelfServiceTriggerUserPropertiesObjectProps']]:
        """
        The object property of the action
        """
        return pulumi.get(self, "object_props")

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[Mapping[str, 'outputs.ActionSelfServiceTriggerUserPropertiesStringProps']]:
        """
        The string property of the action
        """
        return pulumi.get(self, "string_props")


@pulumi.output_type
class ActionSelfServiceTriggerUserPropertiesArrayProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanItems":
            suggest = "boolean_items"
        elif key == "defaultJqQuery":
            suggest = "default_jq_query"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "maxItems":
            suggest = "max_items"
        elif key == "minItems":
            suggest = "min_items"
        elif key == "numberItems":
            suggest = "number_items"
        elif key == "objectItems":
            suggest = "object_items"
        elif key == "stringItems":
            suggest = "string_items"
        elif key == "visibleJqQuery":
            suggest = "visible_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionSelfServiceTriggerUserPropertiesArrayProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionSelfServiceTriggerUserPropertiesArrayProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionSelfServiceTriggerUserPropertiesArrayProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_items: Optional['outputs.ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItems'] = None,
                 default_jq_query: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 max_items: Optional[int] = None,
                 min_items: Optional[int] = None,
                 number_items: Optional['outputs.ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItems'] = None,
                 object_items: Optional['outputs.ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItems'] = None,
                 required: Optional[bool] = None,
                 sort: Optional['outputs.ActionSelfServiceTriggerUserPropertiesArrayPropsSort'] = None,
                 string_items: Optional['outputs.ActionSelfServiceTriggerUserPropertiesArrayPropsStringItems'] = None,
                 title: Optional[str] = None,
                 visible: Optional[bool] = None,
                 visible_jq_query: Optional[str] = None):
        """
        :param 'ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItemsArgs' boolean_items: An array of boolean items within the property
        :param str default_jq_query: The default jq query of the array property
        :param Sequence[str] depends_ons: The properties that this property depends on
        :param str description: The description of the property
        :param str icon: The icon of the property
        :param int max_items: The max items of the array property
        :param int min_items: The min items of the array property
        :param 'ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItemsArgs' number_items: An array of number items within the property
        :param 'ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItemsArgs' object_items: An array of object items within the property
        :param bool required: Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        :param 'ActionSelfServiceTriggerUserPropertiesArrayPropsSortArgs' sort: How to sort entities when in the self service action form in the UI
        :param 'ActionSelfServiceTriggerUserPropertiesArrayPropsStringItemsArgs' string_items: An array of string items within the property
        :param str title: The title of the property
        :param bool visible: The visibility of the array property
        :param str visible_jq_query: The visibility condition jq query of the array property
        """
        if boolean_items is not None:
            pulumi.set(__self__, "boolean_items", boolean_items)
        if default_jq_query is not None:
            pulumi.set(__self__, "default_jq_query", default_jq_query)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_items is not None:
            pulumi.set(__self__, "max_items", max_items)
        if min_items is not None:
            pulumi.set(__self__, "min_items", min_items)
        if number_items is not None:
            pulumi.set(__self__, "number_items", number_items)
        if object_items is not None:
            pulumi.set(__self__, "object_items", object_items)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if string_items is not None:
            pulumi.set(__self__, "string_items", string_items)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if visible_jq_query is not None:
            pulumi.set(__self__, "visible_jq_query", visible_jq_query)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional['outputs.ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItems']:
        """
        An array of boolean items within the property
        """
        return pulumi.get(self, "boolean_items")

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[str]:
        """
        The default jq query of the array property
        """
        return pulumi.get(self, "default_jq_query")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        """
        The properties that this property depends on
        """
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[int]:
        """
        The max items of the array property
        """
        return pulumi.get(self, "max_items")

    @property
    @pulumi.getter(name="minItems")
    def min_items(self) -> Optional[int]:
        """
        The min items of the array property
        """
        return pulumi.get(self, "min_items")

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional['outputs.ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItems']:
        """
        An array of number items within the property
        """
        return pulumi.get(self, "number_items")

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional['outputs.ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItems']:
        """
        An array of object items within the property
        """
        return pulumi.get(self, "object_items")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.ActionSelfServiceTriggerUserPropertiesArrayPropsSort']:
        """
        How to sort entities when in the self service action form in the UI
        """
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional['outputs.ActionSelfServiceTriggerUserPropertiesArrayPropsStringItems']:
        """
        An array of string items within the property
        """
        return pulumi.get(self, "string_items")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def visible(self) -> Optional[bool]:
        """
        The visibility of the array property
        """
        return pulumi.get(self, "visible")

    @property
    @pulumi.getter(name="visibleJqQuery")
    def visible_jq_query(self) -> Optional[str]:
        """
        The visibility condition jq query of the array property
        """
        return pulumi.get(self, "visible_jq_query")


@pulumi.output_type
class ActionSelfServiceTriggerUserPropertiesArrayPropsBooleanItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[bool]] = None):
        """
        :param Sequence[bool] defaults: The default values for the boolean items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[bool]]:
        """
        The default values for the boolean items
        """
        return pulumi.get(self, "defaults")


@pulumi.output_type
class ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItems(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumJqQuery":
            suggest = "enum_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItems. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItems.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionSelfServiceTriggerUserPropertiesArrayPropsNumberItems.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 defaults: Optional[Sequence[float]] = None,
                 enum_jq_query: Optional[str] = None,
                 enums: Optional[Sequence[float]] = None):
        """
        :param Sequence[float] defaults: The default values for the number items
        :param str enum_jq_query: The jq query for the enum number items
        :param Sequence[float] enums: The enum of possible values for the number items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if enum_jq_query is not None:
            pulumi.set(__self__, "enum_jq_query", enum_jq_query)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[float]]:
        """
        The default values for the number items
        """
        return pulumi.get(self, "defaults")

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[str]:
        """
        The jq query for the enum number items
        """
        return pulumi.get(self, "enum_jq_query")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[float]]:
        """
        The enum of possible values for the number items
        """
        return pulumi.get(self, "enums")


@pulumi.output_type
class ActionSelfServiceTriggerUserPropertiesArrayPropsObjectItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[Mapping[str, str]]] = None):
        """
        :param Sequence[Mapping[str, str]] defaults: The default values for the object items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[Mapping[str, str]]]:
        """
        The default values for the object items
        """
        return pulumi.get(self, "defaults")


@pulumi.output_type
class ActionSelfServiceTriggerUserPropertiesArrayPropsSort(dict):
    def __init__(__self__, *,
                 property: str,
                 order: Optional[str] = None):
        """
        :param str property: The property to sort the entities by
        :param str order: The order to sort the entities in
        """
        pulumi.set(__self__, "property", property)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        """
        The order to sort the entities in
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        The property to sort the entities by
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class ActionSelfServiceTriggerUserPropertiesArrayPropsStringItems(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumJqQuery":
            suggest = "enum_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionSelfServiceTriggerUserPropertiesArrayPropsStringItems. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionSelfServiceTriggerUserPropertiesArrayPropsStringItems.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionSelfServiceTriggerUserPropertiesArrayPropsStringItems.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blueprint: Optional[str] = None,
                 dataset: Optional[str] = None,
                 defaults: Optional[Sequence[str]] = None,
                 enum_jq_query: Optional[str] = None,
                 enums: Optional[Sequence[str]] = None,
                 format: Optional[str] = None):
        """
        :param str blueprint: The blueprint identifier the action relates to
        :param str dataset: The dataset of the entity-format items
        :param Sequence[str] defaults: The default value of the items
        :param str enum_jq_query: The jq query for the enum of string items
        :param Sequence[str] enums: The enum of possible values for the string items
        :param str format: The format of the string property, Accepted values include `date-time`, `url`, `email`, `ipv4`, `ipv6`, `yaml`, `entity`, `user`, `team`, `proto`, `markdown`
        """
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if dataset is not None:
            pulumi.set(__self__, "dataset", dataset)
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if enum_jq_query is not None:
            pulumi.set(__self__, "enum_jq_query", enum_jq_query)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if format is not None:
            pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        """
        The blueprint identifier the action relates to
        """
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def dataset(self) -> Optional[str]:
        """
        The dataset of the entity-format items
        """
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[str]]:
        """
        The default value of the items
        """
        return pulumi.get(self, "defaults")

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[str]:
        """
        The jq query for the enum of string items
        """
        return pulumi.get(self, "enum_jq_query")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[str]]:
        """
        The enum of possible values for the string items
        """
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        The format of the string property, Accepted values include `date-time`, `url`, `email`, `ipv4`, `ipv6`, `yaml`, `entity`, `user`, `team`, `proto`, `markdown`
        """
        return pulumi.get(self, "format")


@pulumi.output_type
class ActionSelfServiceTriggerUserPropertiesBooleanProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultJqQuery":
            suggest = "default_jq_query"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "visibleJqQuery":
            suggest = "visible_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionSelfServiceTriggerUserPropertiesBooleanProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionSelfServiceTriggerUserPropertiesBooleanProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionSelfServiceTriggerUserPropertiesBooleanProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default: Optional[bool] = None,
                 default_jq_query: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None,
                 visible: Optional[bool] = None,
                 visible_jq_query: Optional[str] = None):
        """
        :param bool default: The default of the boolean property
        :param str default_jq_query: The default jq query of the boolean property
        :param Sequence[str] depends_ons: The properties that this property depends on
        :param str description: The description of the property
        :param str icon: The icon of the property
        :param bool required: Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        :param str title: The title of the property
        :param bool visible: The visibility of the boolean property
        :param str visible_jq_query: The visibility condition jq query of the boolean property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if default_jq_query is not None:
            pulumi.set(__self__, "default_jq_query", default_jq_query)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if visible_jq_query is not None:
            pulumi.set(__self__, "visible_jq_query", visible_jq_query)

    @property
    @pulumi.getter
    def default(self) -> Optional[bool]:
        """
        The default of the boolean property
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[str]:
        """
        The default jq query of the boolean property
        """
        return pulumi.get(self, "default_jq_query")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        """
        The properties that this property depends on
        """
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def visible(self) -> Optional[bool]:
        """
        The visibility of the boolean property
        """
        return pulumi.get(self, "visible")

    @property
    @pulumi.getter(name="visibleJqQuery")
    def visible_jq_query(self) -> Optional[str]:
        """
        The visibility condition jq query of the boolean property
        """
        return pulumi.get(self, "visible_jq_query")


@pulumi.output_type
class ActionSelfServiceTriggerUserPropertiesNumberProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultJqQuery":
            suggest = "default_jq_query"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "enumJqQuery":
            suggest = "enum_jq_query"
        elif key == "visibleJqQuery":
            suggest = "visible_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionSelfServiceTriggerUserPropertiesNumberProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionSelfServiceTriggerUserPropertiesNumberProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionSelfServiceTriggerUserPropertiesNumberProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default: Optional[float] = None,
                 default_jq_query: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 enum_jq_query: Optional[str] = None,
                 enums: Optional[Sequence[float]] = None,
                 icon: Optional[str] = None,
                 maximum: Optional[float] = None,
                 minimum: Optional[float] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None,
                 visible: Optional[bool] = None,
                 visible_jq_query: Optional[str] = None):
        """
        :param float default: The default of the number property
        :param str default_jq_query: The default jq query of the number property
        :param Sequence[str] depends_ons: The properties that this property depends on
        :param str description: The description of the property
        :param str enum_jq_query: The enum jq query of the string property
        :param Sequence[float] enums: The enum of the number property
        :param str icon: The icon of the property
        :param float maximum: The min of the number property
        :param float minimum: The max of the number property
        :param bool required: Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        :param str title: The title of the property
        :param bool visible: The visibility of the number property
        :param str visible_jq_query: The visibility condition jq query of the number property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if default_jq_query is not None:
            pulumi.set(__self__, "default_jq_query", default_jq_query)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_jq_query is not None:
            pulumi.set(__self__, "enum_jq_query", enum_jq_query)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if visible_jq_query is not None:
            pulumi.set(__self__, "visible_jq_query", visible_jq_query)

    @property
    @pulumi.getter
    def default(self) -> Optional[float]:
        """
        The default of the number property
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[str]:
        """
        The default jq query of the number property
        """
        return pulumi.get(self, "default_jq_query")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        """
        The properties that this property depends on
        """
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[str]:
        """
        The enum jq query of the string property
        """
        return pulumi.get(self, "enum_jq_query")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[float]]:
        """
        The enum of the number property
        """
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def maximum(self) -> Optional[float]:
        """
        The min of the number property
        """
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> Optional[float]:
        """
        The max of the number property
        """
        return pulumi.get(self, "minimum")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def visible(self) -> Optional[bool]:
        """
        The visibility of the number property
        """
        return pulumi.get(self, "visible")

    @property
    @pulumi.getter(name="visibleJqQuery")
    def visible_jq_query(self) -> Optional[str]:
        """
        The visibility condition jq query of the number property
        """
        return pulumi.get(self, "visible_jq_query")


@pulumi.output_type
class ActionSelfServiceTriggerUserPropertiesObjectProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultJqQuery":
            suggest = "default_jq_query"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "visibleJqQuery":
            suggest = "visible_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionSelfServiceTriggerUserPropertiesObjectProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionSelfServiceTriggerUserPropertiesObjectProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionSelfServiceTriggerUserPropertiesObjectProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default: Optional[str] = None,
                 default_jq_query: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 encryption: Optional[str] = None,
                 icon: Optional[str] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None,
                 visible: Optional[bool] = None,
                 visible_jq_query: Optional[str] = None):
        """
        :param str default: The default of the object property
        :param str default_jq_query: The default jq query of the object property
        :param Sequence[str] depends_ons: The properties that this property depends on
        :param str description: The description of the property
        :param str encryption: The algorithm to encrypt the property with. Accepted value: `aes256-gcm`
        :param str icon: The icon of the property
        :param bool required: Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        :param str title: The title of the property
        :param bool visible: The visibility of the object property
        :param str visible_jq_query: The visibility condition jq query of the object property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if default_jq_query is not None:
            pulumi.set(__self__, "default_jq_query", default_jq_query)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if visible_jq_query is not None:
            pulumi.set(__self__, "visible_jq_query", visible_jq_query)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        """
        The default of the object property
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[str]:
        """
        The default jq query of the object property
        """
        return pulumi.get(self, "default_jq_query")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        """
        The properties that this property depends on
        """
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def encryption(self) -> Optional[str]:
        """
        The algorithm to encrypt the property with. Accepted value: `aes256-gcm`
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def visible(self) -> Optional[bool]:
        """
        The visibility of the object property
        """
        return pulumi.get(self, "visible")

    @property
    @pulumi.getter(name="visibleJqQuery")
    def visible_jq_query(self) -> Optional[str]:
        """
        The visibility condition jq query of the object property
        """
        return pulumi.get(self, "visible_jq_query")


@pulumi.output_type
class ActionSelfServiceTriggerUserPropertiesStringProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultJqQuery":
            suggest = "default_jq_query"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "enumJqQuery":
            suggest = "enum_jq_query"
        elif key == "maxLength":
            suggest = "max_length"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "visibleJqQuery":
            suggest = "visible_jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionSelfServiceTriggerUserPropertiesStringProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionSelfServiceTriggerUserPropertiesStringProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionSelfServiceTriggerUserPropertiesStringProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blueprint: Optional[str] = None,
                 dataset: Optional['outputs.ActionSelfServiceTriggerUserPropertiesStringPropsDataset'] = None,
                 default: Optional[str] = None,
                 default_jq_query: Optional[str] = None,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 encryption: Optional[str] = None,
                 enum_jq_query: Optional[str] = None,
                 enums: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 icon: Optional[str] = None,
                 max_length: Optional[int] = None,
                 min_length: Optional[int] = None,
                 pattern: Optional[str] = None,
                 required: Optional[bool] = None,
                 sort: Optional['outputs.ActionSelfServiceTriggerUserPropertiesStringPropsSort'] = None,
                 title: Optional[str] = None,
                 visible: Optional[bool] = None,
                 visible_jq_query: Optional[str] = None):
        """
        :param str blueprint: The blueprint identifier the string property relates to
        :param 'ActionSelfServiceTriggerUserPropertiesStringPropsDatasetArgs' dataset: The dataset of an the entity-format property
        :param str default: The default of the string property
        :param str default_jq_query: The default jq query of the string property
        :param Sequence[str] depends_ons: The properties that this property depends on
        :param str description: The description of the property
        :param str encryption: The algorithm to encrypt the property with. Accepted value: `aes256-gcm`
        :param str enum_jq_query: The enum jq query of the string property
        :param Sequence[str] enums: The enum of the string property
        :param str format: The format of the string property, Accepted values include `date-time`, `url`, `email`, `ipv4`, `ipv6`, `yaml`, `entity`, `user`, `team`, `proto`, `markdown`
        :param str icon: The icon of the property
        :param int max_length: The max length of the string property
        :param int min_length: The min length of the string property
        :param str pattern: The pattern of the string property
        :param bool required: Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        :param 'ActionSelfServiceTriggerUserPropertiesStringPropsSortArgs' sort: How to sort entities when in the self service action form in the UI
        :param str title: The title of the property
        :param bool visible: The visibility of the string property
        :param str visible_jq_query: The visibility condition jq query of the string property
        """
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if dataset is not None:
            pulumi.set(__self__, "dataset", dataset)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if default_jq_query is not None:
            pulumi.set(__self__, "default_jq_query", default_jq_query)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if enum_jq_query is not None:
            pulumi.set(__self__, "enum_jq_query", enum_jq_query)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visible is not None:
            pulumi.set(__self__, "visible", visible)
        if visible_jq_query is not None:
            pulumi.set(__self__, "visible_jq_query", visible_jq_query)

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        """
        The blueprint identifier the string property relates to
        """
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def dataset(self) -> Optional['outputs.ActionSelfServiceTriggerUserPropertiesStringPropsDataset']:
        """
        The dataset of an the entity-format property
        """
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        """
        The default of the string property
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="defaultJqQuery")
    def default_jq_query(self) -> Optional[str]:
        """
        The default jq query of the string property
        """
        return pulumi.get(self, "default_jq_query")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        """
        The properties that this property depends on
        """
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def encryption(self) -> Optional[str]:
        """
        The algorithm to encrypt the property with. Accepted value: `aes256-gcm`
        """
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="enumJqQuery")
    def enum_jq_query(self) -> Optional[str]:
        """
        The enum jq query of the string property
        """
        return pulumi.get(self, "enum_jq_query")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[str]]:
        """
        The enum of the string property
        """
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        The format of the string property, Accepted values include `date-time`, `url`, `email`, `ipv4`, `ipv6`, `yaml`, `entity`, `user`, `team`, `proto`, `markdown`
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[int]:
        """
        The max length of the string property
        """
        return pulumi.get(self, "max_length")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        The min length of the string property
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        The pattern of the string property
        """
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Whether the property is required, by default not required, this property can't be set at the same time if `required_jq_query` is set, and only supports true as value
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def sort(self) -> Optional['outputs.ActionSelfServiceTriggerUserPropertiesStringPropsSort']:
        """
        How to sort entities when in the self service action form in the UI
        """
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def visible(self) -> Optional[bool]:
        """
        The visibility of the string property
        """
        return pulumi.get(self, "visible")

    @property
    @pulumi.getter(name="visibleJqQuery")
    def visible_jq_query(self) -> Optional[str]:
        """
        The visibility condition jq query of the string property
        """
        return pulumi.get(self, "visible_jq_query")


@pulumi.output_type
class ActionSelfServiceTriggerUserPropertiesStringPropsDataset(dict):
    def __init__(__self__, *,
                 combinator: str,
                 rules: Sequence['outputs.ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRule']):
        """
        :param str combinator: The combinator of the dataset
        :param Sequence['ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleArgs'] rules: The rules of the dataset
        """
        pulumi.set(__self__, "combinator", combinator)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def combinator(self) -> str:
        """
        The combinator of the dataset
        """
        return pulumi.get(self, "combinator")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRule']:
        """
        The rules of the dataset
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRule(dict):
    def __init__(__self__, *,
                 operator: str,
                 value: 'outputs.ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValue',
                 blueprint: Optional[str] = None,
                 property: Optional[str] = None):
        """
        :param str operator: The operator of the rule
        :param 'ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValueArgs' value: The value of the rule
        :param str blueprint: The blueprint identifier the action relates to
        :param str property: The property identifier of the rule
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)
        if blueprint is not None:
            pulumi.set(__self__, "blueprint", blueprint)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        The operator of the rule
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValue':
        """
        The value of the rule
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def blueprint(self) -> Optional[str]:
        """
        The blueprint identifier the action relates to
        """
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        """
        The property identifier of the rule
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jqQuery":
            suggest = "jq_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionSelfServiceTriggerUserPropertiesStringPropsDatasetRuleValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jq_query: str):
        pulumi.set(__self__, "jq_query", jq_query)

    @property
    @pulumi.getter(name="jqQuery")
    def jq_query(self) -> str:
        return pulumi.get(self, "jq_query")


@pulumi.output_type
class ActionSelfServiceTriggerUserPropertiesStringPropsSort(dict):
    def __init__(__self__, *,
                 property: str,
                 order: Optional[str] = None):
        """
        :param str property: The property to sort the entities by
        :param str order: The order to sort the entities in
        """
        pulumi.set(__self__, "property", property)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        """
        The order to sort the entities in
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        The property to sort the entities by
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class ActionUpsertEntityMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blueprintIdentifier":
            suggest = "blueprint_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUpsertEntityMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUpsertEntityMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUpsertEntityMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blueprint_identifier: str,
                 mapping: Optional['outputs.ActionUpsertEntityMethodMapping'] = None,
                 title: Optional[str] = None):
        """
        :param str blueprint_identifier: Required when selecting type Upsert Entity. The blueprint identifier of the entity for the upsert
        :param 'ActionUpsertEntityMethodMappingArgs' mapping: Upsert Entity invocation method
        :param str title: The title of the entity
        """
        pulumi.set(__self__, "blueprint_identifier", blueprint_identifier)
        if mapping is not None:
            pulumi.set(__self__, "mapping", mapping)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="blueprintIdentifier")
    def blueprint_identifier(self) -> str:
        """
        Required when selecting type Upsert Entity. The blueprint identifier of the entity for the upsert
        """
        return pulumi.get(self, "blueprint_identifier")

    @property
    @pulumi.getter
    def mapping(self) -> Optional['outputs.ActionUpsertEntityMethodMapping']:
        """
        Upsert Entity invocation method
        """
        return pulumi.get(self, "mapping")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the entity
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class ActionUpsertEntityMethodMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "teamsJq":
            suggest = "teams_jq"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionUpsertEntityMethodMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionUpsertEntityMethodMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionUpsertEntityMethodMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icon: Optional[str] = None,
                 identifier: Optional[str] = None,
                 properties: Optional[str] = None,
                 relations: Optional[str] = None,
                 teams: Optional[Sequence[str]] = None,
                 teams_jq: Optional[str] = None):
        """
        :param str icon: The icon of the entity
        :param str identifier: Required when selecting type Upsert Entity. The entity identifier for the upsert
        :param str properties: The properties of the entity (key-value object encoded to a string)
        :param str relations: The relations of the entity (key-value object encoded to a string)
        :param Sequence[str] teams: The teams the entity belongs to
        :param str teams_jq: Jq that returns the teams the entity belongs to
        """
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if relations is not None:
            pulumi.set(__self__, "relations", relations)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if teams_jq is not None:
            pulumi.set(__self__, "teams_jq", teams_jq)

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the entity
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        Required when selecting type Upsert Entity. The entity identifier for the upsert
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def properties(self) -> Optional[str]:
        """
        The properties of the entity (key-value object encoded to a string)
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def relations(self) -> Optional[str]:
        """
        The relations of the entity (key-value object encoded to a string)
        """
        return pulumi.get(self, "relations")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        """
        The teams the entity belongs to
        """
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter(name="teamsJq")
    def teams_jq(self) -> Optional[str]:
        """
        Jq that returns the teams the entity belongs to
        """
        return pulumi.get(self, "teams_jq")


@pulumi.output_type
class ActionWebhookMethod(dict):
    def __init__(__self__, *,
                 url: str,
                 agent: Optional[str] = None,
                 body: Optional[str] = None,
                 headers: Optional[Mapping[str, str]] = None,
                 method: Optional[str] = None,
                 synchronized: Optional[str] = None):
        """
        :param str url: Required when selecting type WEBHOOK. The URL to invoke the action
        :param str agent: Specifies whether to use an agent to invoke the action. This can be a boolean value (`'true''` or `'false'`) or a JQ if dynamic evaluation is needed.
        :param str body: The Webhook body should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        :param Mapping[str, str] headers: The HTTP headers for invoking the action. They should be encoded as a key-value object to a string using jsonencode. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        :param str method: The HTTP method to invoke the action
        :param str synchronized: Synchronize the action
        """
        pulumi.set(__self__, "url", url)
        if agent is not None:
            pulumi.set(__self__, "agent", agent)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if synchronized is not None:
            pulumi.set(__self__, "synchronized", synchronized)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Required when selecting type WEBHOOK. The URL to invoke the action
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def agent(self) -> Optional[str]:
        """
        Specifies whether to use an agent to invoke the action. This can be a boolean value (`'true''` or `'false'`) or a JQ if dynamic evaluation is needed.
        """
        return pulumi.get(self, "agent")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        """
        The Webhook body should be in `JSON` format, encoded as a string. Use jsonencode to encode arrays or objects. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Mapping[str, str]]:
        """
        The HTTP headers for invoking the action. They should be encoded as a key-value object to a string using jsonencode. Learn about how to [define the action payload](https://docs.getport.io/create-self-service-experiences/setup-backend/#define-the-actions-payload).
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        """
        The HTTP method to invoke the action
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def synchronized(self) -> Optional[str]:
        """
        Synchronize the action
        """
        return pulumi.get(self, "synchronized")


@pulumi.output_type
class AggregationPropertiesProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetBlueprintIdentifier":
            suggest = "target_blueprint_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AggregationPropertiesProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AggregationPropertiesProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AggregationPropertiesProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 method: 'outputs.AggregationPropertiesPropertiesMethod',
                 target_blueprint_identifier: str,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 query: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param 'AggregationPropertiesPropertiesMethodArgs' method: The aggregation method to perform on the target blueprint, one of count*entities, average*entities, average*by*property, aggregate*by*property
        :param str target_blueprint_identifier: The identifier of the blueprint to perform the aggregation on
        :param str description: The description of the aggregation property
        :param str icon: The icon of the aggregation property
        :param str query: Query to filter the target entities
        :param str title: The title of the aggregation property
        """
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "target_blueprint_identifier", target_blueprint_identifier)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def method(self) -> 'outputs.AggregationPropertiesPropertiesMethod':
        """
        The aggregation method to perform on the target blueprint, one of count*entities, average*entities, average*by*property, aggregate*by*property
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="targetBlueprintIdentifier")
    def target_blueprint_identifier(self) -> str:
        """
        The identifier of the blueprint to perform the aggregation on
        """
        return pulumi.get(self, "target_blueprint_identifier")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the aggregation property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the aggregation property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        """
        Query to filter the target entities
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the aggregation property
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class AggregationPropertiesPropertiesMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregateByProperty":
            suggest = "aggregate_by_property"
        elif key == "averageByProperty":
            suggest = "average_by_property"
        elif key == "averageEntities":
            suggest = "average_entities"
        elif key == "countEntities":
            suggest = "count_entities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AggregationPropertiesPropertiesMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AggregationPropertiesPropertiesMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AggregationPropertiesPropertiesMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregate_by_property: Optional['outputs.AggregationPropertiesPropertiesMethodAggregateByProperty'] = None,
                 average_by_property: Optional['outputs.AggregationPropertiesPropertiesMethodAverageByProperty'] = None,
                 average_entities: Optional['outputs.AggregationPropertiesPropertiesMethodAverageEntities'] = None,
                 count_entities: Optional[bool] = None):
        """
        :param 'AggregationPropertiesPropertiesMethodAggregateByPropertyArgs' aggregate_by_property: Function to calculate the aggregate by property value of the target entities, such as sum, min, max, median
        :param 'AggregationPropertiesPropertiesMethodAverageByPropertyArgs' average_by_property: Function to calculate the average by property value of the target entities
        :param 'AggregationPropertiesPropertiesMethodAverageEntitiesArgs' average_entities: Function to average the entities of the target entities
        :param bool count_entities: Function to count the entities of the target entities
        """
        if aggregate_by_property is not None:
            pulumi.set(__self__, "aggregate_by_property", aggregate_by_property)
        if average_by_property is not None:
            pulumi.set(__self__, "average_by_property", average_by_property)
        if average_entities is not None:
            pulumi.set(__self__, "average_entities", average_entities)
        if count_entities is not None:
            pulumi.set(__self__, "count_entities", count_entities)

    @property
    @pulumi.getter(name="aggregateByProperty")
    def aggregate_by_property(self) -> Optional['outputs.AggregationPropertiesPropertiesMethodAggregateByProperty']:
        """
        Function to calculate the aggregate by property value of the target entities, such as sum, min, max, median
        """
        return pulumi.get(self, "aggregate_by_property")

    @property
    @pulumi.getter(name="averageByProperty")
    def average_by_property(self) -> Optional['outputs.AggregationPropertiesPropertiesMethodAverageByProperty']:
        """
        Function to calculate the average by property value of the target entities
        """
        return pulumi.get(self, "average_by_property")

    @property
    @pulumi.getter(name="averageEntities")
    def average_entities(self) -> Optional['outputs.AggregationPropertiesPropertiesMethodAverageEntities']:
        """
        Function to average the entities of the target entities
        """
        return pulumi.get(self, "average_entities")

    @property
    @pulumi.getter(name="countEntities")
    def count_entities(self) -> Optional[bool]:
        """
        Function to count the entities of the target entities
        """
        return pulumi.get(self, "count_entities")


@pulumi.output_type
class AggregationPropertiesPropertiesMethodAggregateByProperty(dict):
    def __init__(__self__, *,
                 func: str,
                 property: str):
        """
        :param str func: The func of the aggregate by property
        :param str property: The property of the aggregate by property
        """
        pulumi.set(__self__, "func", func)
        pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def func(self) -> str:
        """
        The func of the aggregate by property
        """
        return pulumi.get(self, "func")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        The property of the aggregate by property
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class AggregationPropertiesPropertiesMethodAverageByProperty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageOf":
            suggest = "average_of"
        elif key == "measureTimeBy":
            suggest = "measure_time_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AggregationPropertiesPropertiesMethodAverageByProperty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AggregationPropertiesPropertiesMethodAverageByProperty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AggregationPropertiesPropertiesMethodAverageByProperty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average_of: str,
                 measure_time_by: str,
                 property: str):
        """
        :param str average_of: The time periods to calculate the average by, e.g. hour, day, week, month
        :param str measure_time_by: The property name on which to calculate the the time periods, e.g. $createdAt, $updated_at or any other date property
        :param str property: The property name on which to calculate the average by
        """
        pulumi.set(__self__, "average_of", average_of)
        pulumi.set(__self__, "measure_time_by", measure_time_by)
        pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter(name="averageOf")
    def average_of(self) -> str:
        """
        The time periods to calculate the average by, e.g. hour, day, week, month
        """
        return pulumi.get(self, "average_of")

    @property
    @pulumi.getter(name="measureTimeBy")
    def measure_time_by(self) -> str:
        """
        The property name on which to calculate the the time periods, e.g. $createdAt, $updated_at or any other date property
        """
        return pulumi.get(self, "measure_time_by")

    @property
    @pulumi.getter
    def property(self) -> str:
        """
        The property name on which to calculate the average by
        """
        return pulumi.get(self, "property")


@pulumi.output_type
class AggregationPropertiesPropertiesMethodAverageEntities(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageOf":
            suggest = "average_of"
        elif key == "measureTimeBy":
            suggest = "measure_time_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AggregationPropertiesPropertiesMethodAverageEntities. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AggregationPropertiesPropertiesMethodAverageEntities.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AggregationPropertiesPropertiesMethodAverageEntities.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 average_of: Optional[str] = None,
                 measure_time_by: Optional[str] = None):
        """
        :param str average_of: The time periods to calculate the average of, e.g. hour, day, week, month
        :param str measure_time_by: The property name on which to calculate the the time periods, e.g. $createdAt, $updated_at or any other date property
        """
        if average_of is not None:
            pulumi.set(__self__, "average_of", average_of)
        if measure_time_by is not None:
            pulumi.set(__self__, "measure_time_by", measure_time_by)

    @property
    @pulumi.getter(name="averageOf")
    def average_of(self) -> Optional[str]:
        """
        The time periods to calculate the average of, e.g. hour, day, week, month
        """
        return pulumi.get(self, "average_of")

    @property
    @pulumi.getter(name="measureTimeBy")
    def measure_time_by(self) -> Optional[str]:
        """
        The property name on which to calculate the the time periods, e.g. $createdAt, $updated_at or any other date property
        """
        return pulumi.get(self, "measure_time_by")


@pulumi.output_type
class BlueprintCalculationProperties(dict):
    def __init__(__self__, *,
                 calculation: str,
                 type: str,
                 colorized: Optional[bool] = None,
                 colors: Optional[Mapping[str, str]] = None,
                 description: Optional[str] = None,
                 format: Optional[str] = None,
                 icon: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str calculation: The calculation of the calculation property
        :param str type: The type of the calculation property
        :param bool colorized: The colorized of the calculation property
        :param Mapping[str, str] colors: The colors of the calculation property
        :param str description: The description of the calculation property
        :param str format: The format of the calculation property
        :param str icon: The icon of the calculation property
        :param str title: The title of the calculation property
        """
        pulumi.set(__self__, "calculation", calculation)
        pulumi.set(__self__, "type", type)
        if colorized is not None:
            pulumi.set(__self__, "colorized", colorized)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def calculation(self) -> str:
        """
        The calculation of the calculation property
        """
        return pulumi.get(self, "calculation")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the calculation property
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def colorized(self) -> Optional[bool]:
        """
        The colorized of the calculation property
        """
        return pulumi.get(self, "colorized")

    @property
    @pulumi.getter
    def colors(self) -> Optional[Mapping[str, str]]:
        """
        The colors of the calculation property
        """
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the calculation property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        The format of the calculation property
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the calculation property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the calculation property
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintKafkaChangelogDestination(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class BlueprintMirrorProperties(dict):
    def __init__(__self__, *,
                 path: str,
                 title: Optional[str] = None):
        """
        :param str path: The path of the mirror property
        :param str title: The title of the mirror property
        """
        pulumi.set(__self__, "path", path)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path of the mirror property
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the mirror property
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintOwnership(dict):
    def __init__(__self__, *,
                 type: str,
                 path: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str type: Ownership type: either 'Inherited' or 'Direct'.
        :param str path: Path for the Inherited ownership type. Required when type is 'Inherited'. Must be a valid relation identifiers path.
        :param str title: Optional title for the owning teams property.
        """
        pulumi.set(__self__, "type", type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Ownership type: either 'Inherited' or 'Direct'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path for the Inherited ownership type. Required when type is 'Inherited'. Must be a valid relation identifiers path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Optional title for the owning teams property.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPermissionsEntities(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "updateMetadataProperties":
            suggest = "update_metadata_properties"
        elif key == "updateProperties":
            suggest = "update_properties"
        elif key == "updateRelations":
            suggest = "update_relations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPermissionsEntities. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPermissionsEntities.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPermissionsEntities.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 register: 'outputs.BlueprintPermissionsEntitiesRegister',
                 unregister: 'outputs.BlueprintPermissionsEntitiesUnregister',
                 update: 'outputs.BlueprintPermissionsEntitiesUpdate',
                 update_metadata_properties: 'outputs.BlueprintPermissionsEntitiesUpdateMetadataProperties',
                 update_properties: Optional[Mapping[str, 'outputs.BlueprintPermissionsEntitiesUpdateProperties']] = None,
                 update_relations: Optional[Mapping[str, 'outputs.BlueprintPermissionsEntitiesUpdateRelations']] = None):
        """
        :param 'BlueprintPermissionsEntitiesRegisterArgs' register: Manage permissions to register entities of the blueprint
        :param 'BlueprintPermissionsEntitiesUnregisterArgs' unregister: Manage permissions to unregister entities of the blueprint
        :param 'BlueprintPermissionsEntitiesUpdateArgs' update: Manage permissions to update entities of the blueprint
        :param Mapping[str, 'BlueprintPermissionsEntitiesUpdatePropertiesArgs'] update_properties: Manage permissions to update the entity properties
        :param Mapping[str, 'BlueprintPermissionsEntitiesUpdateRelationsArgs'] update_relations: Manage permissions to update the entity relations
        """
        pulumi.set(__self__, "register", register)
        pulumi.set(__self__, "unregister", unregister)
        pulumi.set(__self__, "update", update)
        pulumi.set(__self__, "update_metadata_properties", update_metadata_properties)
        if update_properties is not None:
            pulumi.set(__self__, "update_properties", update_properties)
        if update_relations is not None:
            pulumi.set(__self__, "update_relations", update_relations)

    @property
    @pulumi.getter
    def register(self) -> 'outputs.BlueprintPermissionsEntitiesRegister':
        """
        Manage permissions to register entities of the blueprint
        """
        return pulumi.get(self, "register")

    @property
    @pulumi.getter
    def unregister(self) -> 'outputs.BlueprintPermissionsEntitiesUnregister':
        """
        Manage permissions to unregister entities of the blueprint
        """
        return pulumi.get(self, "unregister")

    @property
    @pulumi.getter
    def update(self) -> 'outputs.BlueprintPermissionsEntitiesUpdate':
        """
        Manage permissions to update entities of the blueprint
        """
        return pulumi.get(self, "update")

    @property
    @pulumi.getter(name="updateMetadataProperties")
    def update_metadata_properties(self) -> 'outputs.BlueprintPermissionsEntitiesUpdateMetadataProperties':
        return pulumi.get(self, "update_metadata_properties")

    @property
    @pulumi.getter(name="updateProperties")
    def update_properties(self) -> Optional[Mapping[str, 'outputs.BlueprintPermissionsEntitiesUpdateProperties']]:
        """
        Manage permissions to update the entity properties
        """
        return pulumi.get(self, "update_properties")

    @property
    @pulumi.getter(name="updateRelations")
    def update_relations(self) -> Optional[Mapping[str, 'outputs.BlueprintPermissionsEntitiesUpdateRelations']]:
        """
        Manage permissions to update the entity relations
        """
        return pulumi.get(self, "update_relations")


@pulumi.output_type
class BlueprintPermissionsEntitiesRegister(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ownedByTeam":
            suggest = "owned_by_team"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPermissionsEntitiesRegister. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPermissionsEntitiesRegister.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPermissionsEntitiesRegister.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owned_by_team: Optional[bool] = None,
                 roles: Optional[Sequence[str]] = None,
                 teams: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        """
        :param bool owned_by_team: Owned by team
        :param Sequence[str] roles: Roles with register permissions
        :param Sequence[str] teams: Teams with register permissions
        :param Sequence[str] users: Users with register permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[bool]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        Roles with register permissions
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        """
        Teams with register permissions
        """
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        Users with register permissions
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class BlueprintPermissionsEntitiesUnregister(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ownedByTeam":
            suggest = "owned_by_team"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPermissionsEntitiesUnregister. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPermissionsEntitiesUnregister.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPermissionsEntitiesUnregister.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owned_by_team: Optional[bool] = None,
                 roles: Optional[Sequence[str]] = None,
                 teams: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        """
        :param bool owned_by_team: Owned by team
        :param Sequence[str] roles: Roles with unregister permissions
        :param Sequence[str] teams: Teams with unregister permissions
        :param Sequence[str] users: Users with unregister permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[bool]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        Roles with unregister permissions
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        """
        Teams with unregister permissions
        """
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        Users with unregister permissions
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class BlueprintPermissionsEntitiesUpdate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ownedByTeam":
            suggest = "owned_by_team"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPermissionsEntitiesUpdate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPermissionsEntitiesUpdate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPermissionsEntitiesUpdate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owned_by_team: Optional[bool] = None,
                 roles: Optional[Sequence[str]] = None,
                 teams: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        """
        :param bool owned_by_team: Owned by team
        :param Sequence[str] roles: Roles with update permissions
        :param Sequence[str] teams: Teams with update permissions
        :param Sequence[str] users: Users with update permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[bool]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        Roles with update permissions
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        """
        Teams with update permissions
        """
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        Users with update permissions
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class BlueprintPermissionsEntitiesUpdateMetadataProperties(dict):
    def __init__(__self__, *,
                 icon: 'outputs.BlueprintPermissionsEntitiesUpdateMetadataPropertiesIcon',
                 identifier: 'outputs.BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifier',
                 team: 'outputs.BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeam',
                 title: 'outputs.BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitle'):
        """
        :param 'BlueprintPermissionsEntitiesUpdateMetadataPropertiesIconArgs' icon: The entity's icon
        :param 'BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifierArgs' identifier: Unique Entity identifier, used for API calls, programmatic access and distinguishing between different entities
        :param 'BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeamArgs' team: The team this entity belongs to
        :param 'BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitleArgs' title: A human-readable name for the entity
        """
        pulumi.set(__self__, "icon", icon)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "team", team)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def icon(self) -> 'outputs.BlueprintPermissionsEntitiesUpdateMetadataPropertiesIcon':
        """
        The entity's icon
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def identifier(self) -> 'outputs.BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifier':
        """
        Unique Entity identifier, used for API calls, programmatic access and distinguishing between different entities
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def team(self) -> 'outputs.BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeam':
        """
        The team this entity belongs to
        """
        return pulumi.get(self, "team")

    @property
    @pulumi.getter
    def title(self) -> 'outputs.BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitle':
        """
        A human-readable name for the entity
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPermissionsEntitiesUpdateMetadataPropertiesIcon(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ownedByTeam":
            suggest = "owned_by_team"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPermissionsEntitiesUpdateMetadataPropertiesIcon. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPermissionsEntitiesUpdateMetadataPropertiesIcon.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPermissionsEntitiesUpdateMetadataPropertiesIcon.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owned_by_team: Optional[bool] = None,
                 roles: Optional[Sequence[str]] = None,
                 teams: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        """
        :param bool owned_by_team: Owned by team
        :param Sequence[str] roles: Roles with update `$icon` metadata permissions
        :param Sequence[str] teams: Teams with update `$icon` metadata permissions
        :param Sequence[str] users: Users with update `$icon` metadata permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[bool]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        Roles with update `$icon` metadata permissions
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        """
        Teams with update `$icon` metadata permissions
        """
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        Users with update `$icon` metadata permissions
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifier(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ownedByTeam":
            suggest = "owned_by_team"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifier. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifier.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPermissionsEntitiesUpdateMetadataPropertiesIdentifier.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owned_by_team: Optional[bool] = None,
                 roles: Optional[Sequence[str]] = None,
                 teams: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        """
        :param bool owned_by_team: Owned by team
        :param Sequence[str] roles: Roles with update `$identifier` metadata permissions
        :param Sequence[str] teams: Teams with update `$identifier` metadata permissions
        :param Sequence[str] users: Users with update `$identifier` metadata permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[bool]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        Roles with update `$identifier` metadata permissions
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        """
        Teams with update `$identifier` metadata permissions
        """
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        Users with update `$identifier` metadata permissions
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ownedByTeam":
            suggest = "owned_by_team"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPermissionsEntitiesUpdateMetadataPropertiesTeam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owned_by_team: Optional[bool] = None,
                 roles: Optional[Sequence[str]] = None,
                 teams: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        """
        :param bool owned_by_team: Owned by team
        :param Sequence[str] roles: Roles with update `$team` metadata permissions
        :param Sequence[str] teams: Teams with update `$team` metadata permissions
        :param Sequence[str] users: Users with update `$team` metadata permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[bool]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        Roles with update `$team` metadata permissions
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        """
        Teams with update `$team` metadata permissions
        """
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        Users with update `$team` metadata permissions
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ownedByTeam":
            suggest = "owned_by_team"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPermissionsEntitiesUpdateMetadataPropertiesTitle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owned_by_team: Optional[bool] = None,
                 roles: Optional[Sequence[str]] = None,
                 teams: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        """
        :param bool owned_by_team: Owned by team
        :param Sequence[str] roles: Roles with update `$title` metadata permissions
        :param Sequence[str] teams: Teams with update `$title` metadata permissions
        :param Sequence[str] users: Users with update `$title` metadata permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[bool]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        Roles with update `$title` metadata permissions
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        """
        Teams with update `$title` metadata permissions
        """
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        Users with update `$title` metadata permissions
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class BlueprintPermissionsEntitiesUpdateProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ownedByTeam":
            suggest = "owned_by_team"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPermissionsEntitiesUpdateProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPermissionsEntitiesUpdateProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPermissionsEntitiesUpdateProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owned_by_team: Optional[bool] = None,
                 roles: Optional[Sequence[str]] = None,
                 teams: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        """
        :param bool owned_by_team: Owned by team
        :param Sequence[str] roles: Roles with update specific property permissions
        :param Sequence[str] teams: Teams with update specific property permissions
        :param Sequence[str] users: Users with update specific property permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[bool]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        Roles with update specific property permissions
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        """
        Teams with update specific property permissions
        """
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        Users with update specific property permissions
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class BlueprintPermissionsEntitiesUpdateRelations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ownedByTeam":
            suggest = "owned_by_team"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPermissionsEntitiesUpdateRelations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPermissionsEntitiesUpdateRelations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPermissionsEntitiesUpdateRelations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 owned_by_team: Optional[bool] = None,
                 roles: Optional[Sequence[str]] = None,
                 teams: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        """
        :param bool owned_by_team: Owned by team
        :param Sequence[str] roles: Roles with update specific relation permissions
        :param Sequence[str] teams: Teams with update specific relation permissions
        :param Sequence[str] users: Users with update specific relation permissions
        """
        if owned_by_team is not None:
            pulumi.set(__self__, "owned_by_team", owned_by_team)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="ownedByTeam")
    def owned_by_team(self) -> Optional[bool]:
        """
        Owned by team
        """
        return pulumi.get(self, "owned_by_team")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        Roles with update specific relation permissions
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        """
        Teams with update specific relation permissions
        """
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        Users with update specific relation permissions
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class BlueprintProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arrayProps":
            suggest = "array_props"
        elif key == "booleanProps":
            suggest = "boolean_props"
        elif key == "numberProps":
            suggest = "number_props"
        elif key == "objectProps":
            suggest = "object_props"
        elif key == "stringProps":
            suggest = "string_props"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 array_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesArrayProps']] = None,
                 boolean_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesBooleanProps']] = None,
                 number_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesNumberProps']] = None,
                 object_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesObjectProps']] = None,
                 string_props: Optional[Mapping[str, 'outputs.BlueprintPropertiesStringProps']] = None):
        """
        :param Mapping[str, 'BlueprintPropertiesArrayPropsArgs'] array_props: The array property of the blueprint
        :param Mapping[str, 'BlueprintPropertiesBooleanPropsArgs'] boolean_props: The boolean property of the blueprint
        :param Mapping[str, 'BlueprintPropertiesNumberPropsArgs'] number_props: The number property of the blueprint
        :param Mapping[str, 'BlueprintPropertiesObjectPropsArgs'] object_props: The object property of the blueprint
        :param Mapping[str, 'BlueprintPropertiesStringPropsArgs'] string_props: The string property of the blueprint
        """
        if array_props is not None:
            pulumi.set(__self__, "array_props", array_props)
        if boolean_props is not None:
            pulumi.set(__self__, "boolean_props", boolean_props)
        if number_props is not None:
            pulumi.set(__self__, "number_props", number_props)
        if object_props is not None:
            pulumi.set(__self__, "object_props", object_props)
        if string_props is not None:
            pulumi.set(__self__, "string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[Mapping[str, 'outputs.BlueprintPropertiesArrayProps']]:
        """
        The array property of the blueprint
        """
        return pulumi.get(self, "array_props")

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[Mapping[str, 'outputs.BlueprintPropertiesBooleanProps']]:
        """
        The boolean property of the blueprint
        """
        return pulumi.get(self, "boolean_props")

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[Mapping[str, 'outputs.BlueprintPropertiesNumberProps']]:
        """
        The number property of the blueprint
        """
        return pulumi.get(self, "number_props")

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[Mapping[str, 'outputs.BlueprintPropertiesObjectProps']]:
        """
        The object property of the blueprint
        """
        return pulumi.get(self, "object_props")

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[Mapping[str, 'outputs.BlueprintPropertiesStringProps']]:
        """
        The string property of the blueprint
        """
        return pulumi.get(self, "string_props")


@pulumi.output_type
class BlueprintPropertiesArrayProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanItems":
            suggest = "boolean_items"
        elif key == "maxItems":
            suggest = "max_items"
        elif key == "minItems":
            suggest = "min_items"
        elif key == "numberItems":
            suggest = "number_items"
        elif key == "objectItems":
            suggest = "object_items"
        elif key == "stringItems":
            suggest = "string_items"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPropertiesArrayProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPropertiesArrayProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPropertiesArrayProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_items: Optional['outputs.BlueprintPropertiesArrayPropsBooleanItems'] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 max_items: Optional[int] = None,
                 min_items: Optional[int] = None,
                 number_items: Optional['outputs.BlueprintPropertiesArrayPropsNumberItems'] = None,
                 object_items: Optional['outputs.BlueprintPropertiesArrayPropsObjectItems'] = None,
                 required: Optional[bool] = None,
                 string_items: Optional['outputs.BlueprintPropertiesArrayPropsStringItems'] = None,
                 title: Optional[str] = None):
        """
        :param 'BlueprintPropertiesArrayPropsBooleanItemsArgs' boolean_items: The items of the array property
        :param str description: The description of the property
        :param str icon: The icon of the property
        :param int max_items: The max items of the array property
        :param int min_items: The min items of the array property
        :param 'BlueprintPropertiesArrayPropsNumberItemsArgs' number_items: The items of the array property
        :param 'BlueprintPropertiesArrayPropsObjectItemsArgs' object_items: The items of the array property
        :param bool required: Whether the property is required
        :param 'BlueprintPropertiesArrayPropsStringItemsArgs' string_items: The items of the array property
        :param str title: The title of the property
        """
        if boolean_items is not None:
            pulumi.set(__self__, "boolean_items", boolean_items)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_items is not None:
            pulumi.set(__self__, "max_items", max_items)
        if min_items is not None:
            pulumi.set(__self__, "min_items", min_items)
        if number_items is not None:
            pulumi.set(__self__, "number_items", number_items)
        if object_items is not None:
            pulumi.set(__self__, "object_items", object_items)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if string_items is not None:
            pulumi.set(__self__, "string_items", string_items)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional['outputs.BlueprintPropertiesArrayPropsBooleanItems']:
        """
        The items of the array property
        """
        return pulumi.get(self, "boolean_items")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[int]:
        """
        The max items of the array property
        """
        return pulumi.get(self, "max_items")

    @property
    @pulumi.getter(name="minItems")
    def min_items(self) -> Optional[int]:
        """
        The min items of the array property
        """
        return pulumi.get(self, "min_items")

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional['outputs.BlueprintPropertiesArrayPropsNumberItems']:
        """
        The items of the array property
        """
        return pulumi.get(self, "number_items")

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional['outputs.BlueprintPropertiesArrayPropsObjectItems']:
        """
        The items of the array property
        """
        return pulumi.get(self, "object_items")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional['outputs.BlueprintPropertiesArrayPropsStringItems']:
        """
        The items of the array property
        """
        return pulumi.get(self, "string_items")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPropertiesArrayPropsBooleanItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[bool]] = None):
        """
        :param Sequence[bool] defaults: The default of the items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[bool]]:
        """
        The default of the items
        """
        return pulumi.get(self, "defaults")


@pulumi.output_type
class BlueprintPropertiesArrayPropsNumberItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[float]] = None):
        """
        :param Sequence[float] defaults: The default of the items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[float]]:
        """
        The default of the items
        """
        return pulumi.get(self, "defaults")


@pulumi.output_type
class BlueprintPropertiesArrayPropsObjectItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] defaults: The default of the items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[str]]:
        """
        The default of the items
        """
        return pulumi.get(self, "defaults")


@pulumi.output_type
class BlueprintPropertiesArrayPropsStringItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 pattern: Optional[str] = None):
        """
        :param Sequence[str] defaults: The default of the items
        :param str format: The format of the items
        :param str pattern: The pattern of the string array items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[str]]:
        """
        The default of the items
        """
        return pulumi.get(self, "defaults")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        The format of the items
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        The pattern of the string array items
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class BlueprintPropertiesBooleanProps(dict):
    def __init__(__self__, *,
                 default: Optional[bool] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None):
        """
        :param bool default: The default of the boolean property
        :param str description: The description of the property
        :param str icon: The icon of the property
        :param bool required: Whether the property is required
        :param str title: The title of the property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[bool]:
        """
        The default of the boolean property
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPropertiesNumberProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumColors":
            suggest = "enum_colors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPropertiesNumberProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPropertiesNumberProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPropertiesNumberProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default: Optional[float] = None,
                 description: Optional[str] = None,
                 enum_colors: Optional[Mapping[str, str]] = None,
                 enums: Optional[Sequence[float]] = None,
                 icon: Optional[str] = None,
                 maximum: Optional[float] = None,
                 minimum: Optional[float] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None):
        """
        :param float default: The default of the number property
        :param str description: The description of the property
        :param Mapping[str, str] enum_colors: The enum colors of the number property
        :param Sequence[float] enums: The enum of the number property
        :param str icon: The icon of the property
        :param float maximum: The min of the number property
        :param float minimum: The max of the number property
        :param bool required: Whether the property is required
        :param str title: The title of the property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_colors is not None:
            pulumi.set(__self__, "enum_colors", enum_colors)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[float]:
        """
        The default of the number property
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumColors")
    def enum_colors(self) -> Optional[Mapping[str, str]]:
        """
        The enum colors of the number property
        """
        return pulumi.get(self, "enum_colors")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[float]]:
        """
        The enum of the number property
        """
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def maximum(self) -> Optional[float]:
        """
        The min of the number property
        """
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> Optional[float]:
        """
        The max of the number property
        """
        return pulumi.get(self, "minimum")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPropertiesObjectProps(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 required: Optional[bool] = None,
                 spec: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str default: The default of the object property
        :param str description: The description of the property
        :param str icon: The icon of the property
        :param bool required: Whether the property is required
        :param str spec: The spec of the object property
        :param str title: The title of the property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        """
        The default of the object property
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def spec(self) -> Optional[str]:
        """
        The spec of the object property
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPropertiesStringProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumColors":
            suggest = "enum_colors"
        elif key == "maxLength":
            suggest = "max_length"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "specAuthentication":
            suggest = "spec_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPropertiesStringProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPropertiesStringProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPropertiesStringProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 enum_colors: Optional[Mapping[str, str]] = None,
                 enums: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 icon: Optional[str] = None,
                 max_length: Optional[int] = None,
                 min_length: Optional[int] = None,
                 pattern: Optional[str] = None,
                 required: Optional[bool] = None,
                 spec: Optional[str] = None,
                 spec_authentication: Optional['outputs.BlueprintPropertiesStringPropsSpecAuthentication'] = None,
                 title: Optional[str] = None):
        """
        :param str default: The default of the string property
        :param str description: The description of the property
        :param Mapping[str, str] enum_colors: The enum colors of the string property
        :param Sequence[str] enums: The enum of the string property
        :param str format: The format of the string property
        :param str icon: The icon of the property
        :param int max_length: The max length of the string property
        :param int min_length: The min length of the string property
        :param str pattern: The pattern of the string property
        :param bool required: Whether the property is required
        :param str spec: The spec of the string property
        :param 'BlueprintPropertiesStringPropsSpecAuthenticationArgs' spec_authentication: The spec authentication of the string property
        :param str title: The title of the property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_colors is not None:
            pulumi.set(__self__, "enum_colors", enum_colors)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if spec_authentication is not None:
            pulumi.set(__self__, "spec_authentication", spec_authentication)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        """
        The default of the string property
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumColors")
    def enum_colors(self) -> Optional[Mapping[str, str]]:
        """
        The enum colors of the string property
        """
        return pulumi.get(self, "enum_colors")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[str]]:
        """
        The enum of the string property
        """
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        The format of the string property
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[int]:
        """
        The max length of the string property
        """
        return pulumi.get(self, "max_length")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        The min length of the string property
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        The pattern of the string property
        """
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def spec(self) -> Optional[str]:
        """
        The spec of the string property
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter(name="specAuthentication")
    def spec_authentication(self) -> Optional['outputs.BlueprintPropertiesStringPropsSpecAuthentication']:
        """
        The spec authentication of the string property
        """
        return pulumi.get(self, "spec_authentication")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintPropertiesStringPropsSpecAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationUrl":
            suggest = "authorization_url"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "tokenUrl":
            suggest = "token_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BlueprintPropertiesStringPropsSpecAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BlueprintPropertiesStringPropsSpecAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BlueprintPropertiesStringPropsSpecAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization_url: str,
                 client_id: str,
                 token_url: str):
        """
        :param str authorization_url: The authorizationUrl of the spec authentication
        :param str client_id: The clientId of the spec authentication
        :param str token_url: The tokenUrl of the spec authentication
        """
        pulumi.set(__self__, "authorization_url", authorization_url)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="authorizationUrl")
    def authorization_url(self) -> str:
        """
        The authorizationUrl of the spec authentication
        """
        return pulumi.get(self, "authorization_url")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The clientId of the spec authentication
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> str:
        """
        The tokenUrl of the spec authentication
        """
        return pulumi.get(self, "token_url")


@pulumi.output_type
class BlueprintRelations(dict):
    def __init__(__self__, *,
                 target: str,
                 description: Optional[str] = None,
                 many: Optional[bool] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None):
        """
        :param str target: The target of the relation
        :param str description: The description of the relation
        :param bool many: The many of the relation
        :param bool required: The required of the relation
        :param str title: The title of the relation
        """
        pulumi.set(__self__, "target", target)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if many is not None:
            pulumi.set(__self__, "many", many)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The target of the relation
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the relation
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def many(self) -> Optional[bool]:
        """
        The many of the relation
        """
        return pulumi.get(self, "many")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        The required of the relation
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the relation
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class BlueprintTeamInheritance(dict):
    def __init__(__self__, *,
                 path: str):
        """
        :param str path: The path of the team inheritance
        """
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path of the team inheritance
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class BlueprintWebhookChangelogDestination(dict):
    def __init__(__self__, *,
                 url: str,
                 agent: Optional[bool] = None):
        """
        :param str url: The url of the webhook changelog destination
        :param bool agent: The agent of the webhook changelog destination
        """
        pulumi.set(__self__, "url", url)
        if agent is not None:
            pulumi.set(__self__, "agent", agent)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The url of the webhook changelog destination
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def agent(self) -> Optional[bool]:
        """
        The agent of the webhook changelog destination
        """
        return pulumi.get(self, "agent")


@pulumi.output_type
class EntityProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arrayProps":
            suggest = "array_props"
        elif key == "booleanProps":
            suggest = "boolean_props"
        elif key == "numberProps":
            suggest = "number_props"
        elif key == "objectProps":
            suggest = "object_props"
        elif key == "stringProps":
            suggest = "string_props"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EntityProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EntityProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EntityProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 array_props: Optional['outputs.EntityPropertiesArrayProps'] = None,
                 boolean_props: Optional[Mapping[str, bool]] = None,
                 number_props: Optional[Mapping[str, float]] = None,
                 object_props: Optional[Mapping[str, str]] = None,
                 string_props: Optional[Mapping[str, str]] = None):
        """
        :param 'EntityPropertiesArrayPropsArgs' array_props: The array properties of the entity
        :param Mapping[str, bool] boolean_props: The bool properties of the entity
        :param Mapping[str, float] number_props: The number properties of the entity
        :param Mapping[str, str] object_props: The object properties of the entity
        :param Mapping[str, str] string_props: The string properties of the entity
        """
        if array_props is not None:
            pulumi.set(__self__, "array_props", array_props)
        if boolean_props is not None:
            pulumi.set(__self__, "boolean_props", boolean_props)
        if number_props is not None:
            pulumi.set(__self__, "number_props", number_props)
        if object_props is not None:
            pulumi.set(__self__, "object_props", object_props)
        if string_props is not None:
            pulumi.set(__self__, "string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional['outputs.EntityPropertiesArrayProps']:
        """
        The array properties of the entity
        """
        return pulumi.get(self, "array_props")

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[Mapping[str, bool]]:
        """
        The bool properties of the entity
        """
        return pulumi.get(self, "boolean_props")

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[Mapping[str, float]]:
        """
        The number properties of the entity
        """
        return pulumi.get(self, "number_props")

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[Mapping[str, str]]:
        """
        The object properties of the entity
        """
        return pulumi.get(self, "object_props")

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[Mapping[str, str]]:
        """
        The string properties of the entity
        """
        return pulumi.get(self, "string_props")


@pulumi.output_type
class EntityPropertiesArrayProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanItems":
            suggest = "boolean_items"
        elif key == "numberItems":
            suggest = "number_items"
        elif key == "objectItems":
            suggest = "object_items"
        elif key == "stringItems":
            suggest = "string_items"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EntityPropertiesArrayProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EntityPropertiesArrayProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EntityPropertiesArrayProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_items: Optional[Mapping[str, Sequence[bool]]] = None,
                 number_items: Optional[Mapping[str, Sequence[float]]] = None,
                 object_items: Optional[Mapping[str, Sequence[str]]] = None,
                 string_items: Optional[Mapping[str, Sequence[str]]] = None):
        if boolean_items is not None:
            pulumi.set(__self__, "boolean_items", boolean_items)
        if number_items is not None:
            pulumi.set(__self__, "number_items", number_items)
        if object_items is not None:
            pulumi.set(__self__, "object_items", object_items)
        if string_items is not None:
            pulumi.set(__self__, "string_items", string_items)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional[Mapping[str, Sequence[bool]]]:
        return pulumi.get(self, "boolean_items")

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional[Mapping[str, Sequence[float]]]:
        return pulumi.get(self, "number_items")

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional[Mapping[str, Sequence[str]]]:
        return pulumi.get(self, "object_items")

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional[Mapping[str, Sequence[str]]]:
        return pulumi.get(self, "string_items")


@pulumi.output_type
class EntityRelations(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "manyRelations":
            suggest = "many_relations"
        elif key == "singleRelations":
            suggest = "single_relations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EntityRelations. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EntityRelations.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EntityRelations.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 many_relations: Optional[Mapping[str, Sequence[str]]] = None,
                 single_relations: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, Sequence[str]] many_relations: The many relation of the entity
        :param Mapping[str, str] single_relations: The single relation of the entity
        """
        if many_relations is not None:
            pulumi.set(__self__, "many_relations", many_relations)
        if single_relations is not None:
            pulumi.set(__self__, "single_relations", single_relations)

    @property
    @pulumi.getter(name="manyRelations")
    def many_relations(self) -> Optional[Mapping[str, Sequence[str]]]:
        """
        The many relation of the entity
        """
        return pulumi.get(self, "many_relations")

    @property
    @pulumi.getter(name="singleRelations")
    def single_relations(self) -> Optional[Mapping[str, str]]:
        """
        The single relation of the entity
        """
        return pulumi.get(self, "single_relations")


@pulumi.output_type
class IntegrationKafkaChangelogDestination(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class IntegrationWebhookChangelogDestination(dict):
    def __init__(__self__, *,
                 url: str,
                 agent: Optional[bool] = None):
        """
        :param str url: The url of the webhook changelog destination
        :param bool agent: The agent of the webhook changelog destination
        """
        pulumi.set(__self__, "url", url)
        if agent is not None:
            pulumi.set(__self__, "agent", agent)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The url of the webhook changelog destination
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def agent(self) -> Optional[bool]:
        """
        The agent of the webhook changelog destination
        """
        return pulumi.get(self, "agent")


@pulumi.output_type
class PagePermissionsRead(dict):
    def __init__(__self__, *,
                 roles: Optional[Sequence[str]] = None,
                 teams: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] roles: The roles with read permission
        :param Sequence[str] teams: The teams with read permission
        :param Sequence[str] users: The users with read permission
        """
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        The roles with read permission
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def teams(self) -> Optional[Sequence[str]]:
        """
        The teams with read permission
        """
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        The users with read permission
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class ScorecardFilter(dict):
    def __init__(__self__, *,
                 combinator: str,
                 conditions: Sequence[str]):
        """
        :param str combinator: The combinator of the filter
        :param Sequence[str] conditions: The conditions of the filter. Each condition object should be encoded to a string
        """
        pulumi.set(__self__, "combinator", combinator)
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def combinator(self) -> str:
        """
        The combinator of the filter
        """
        return pulumi.get(self, "combinator")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence[str]:
        """
        The conditions of the filter. Each condition object should be encoded to a string
        """
        return pulumi.get(self, "conditions")


@pulumi.output_type
class ScorecardLevel(dict):
    def __init__(__self__, *,
                 color: str,
                 title: str):
        """
        :param str color: The color of the level
        :param str title: The title of the level
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def color(self) -> str:
        """
        The color of the level
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        The title of the level
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class ScorecardRule(dict):
    def __init__(__self__, *,
                 identifier: str,
                 level: str,
                 query: 'outputs.ScorecardRuleQuery',
                 title: str,
                 description: Optional[str] = None):
        """
        :param str identifier: The identifier of the rule
        :param str level: The level of the rule
        :param 'ScorecardRuleQueryArgs' query: The query of the rule
        :param str title: The title of the rule
        :param str description: The description of the rule
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        The identifier of the rule
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def level(self) -> str:
        """
        The level of the rule
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def query(self) -> 'outputs.ScorecardRuleQuery':
        """
        The query of the rule
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        The title of the rule
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the rule
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class ScorecardRuleQuery(dict):
    def __init__(__self__, *,
                 combinator: str,
                 conditions: Sequence[str]):
        """
        :param str combinator: The combinator of the query
        :param Sequence[str] conditions: The conditions of the query. Each condition object should be encoded to a string
        """
        pulumi.set(__self__, "combinator", combinator)
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def combinator(self) -> str:
        """
        The combinator of the query
        """
        return pulumi.get(self, "combinator")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence[str]:
        """
        The conditions of the query. Each condition object should be encoded to a string
        """
        return pulumi.get(self, "conditions")


@pulumi.output_type
class SystemBlueprintCalculationProperties(dict):
    def __init__(__self__, *,
                 calculation: str,
                 type: str,
                 colorized: Optional[bool] = None,
                 colors: Optional[Mapping[str, str]] = None,
                 description: Optional[str] = None,
                 format: Optional[str] = None,
                 icon: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str calculation: The calculation of the calculation property
        :param str type: The type of the calculation property
        :param bool colorized: The colorized of the calculation property
        :param Mapping[str, str] colors: The colors of the calculation property
        :param str description: The description of the calculation property
        :param str format: The format of the calculation property
        :param str icon: The icon of the calculation property
        :param str title: The title of the calculation property
        """
        pulumi.set(__self__, "calculation", calculation)
        pulumi.set(__self__, "type", type)
        if colorized is not None:
            pulumi.set(__self__, "colorized", colorized)
        if colors is not None:
            pulumi.set(__self__, "colors", colors)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def calculation(self) -> str:
        """
        The calculation of the calculation property
        """
        return pulumi.get(self, "calculation")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the calculation property
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def colorized(self) -> Optional[bool]:
        """
        The colorized of the calculation property
        """
        return pulumi.get(self, "colorized")

    @property
    @pulumi.getter
    def colors(self) -> Optional[Mapping[str, str]]:
        """
        The colors of the calculation property
        """
        return pulumi.get(self, "colors")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the calculation property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        The format of the calculation property
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the calculation property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the calculation property
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class SystemBlueprintMirrorProperties(dict):
    def __init__(__self__, *,
                 path: str,
                 title: Optional[str] = None):
        """
        :param str path: The path of the mirror property
        :param str title: The title of the mirror property
        """
        pulumi.set(__self__, "path", path)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path of the mirror property
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the mirror property
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class SystemBlueprintProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "arrayProps":
            suggest = "array_props"
        elif key == "booleanProps":
            suggest = "boolean_props"
        elif key == "numberProps":
            suggest = "number_props"
        elif key == "objectProps":
            suggest = "object_props"
        elif key == "stringProps":
            suggest = "string_props"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemBlueprintProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemBlueprintProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemBlueprintProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 array_props: Optional[Mapping[str, 'outputs.SystemBlueprintPropertiesArrayProps']] = None,
                 boolean_props: Optional[Mapping[str, 'outputs.SystemBlueprintPropertiesBooleanProps']] = None,
                 number_props: Optional[Mapping[str, 'outputs.SystemBlueprintPropertiesNumberProps']] = None,
                 object_props: Optional[Mapping[str, 'outputs.SystemBlueprintPropertiesObjectProps']] = None,
                 string_props: Optional[Mapping[str, 'outputs.SystemBlueprintPropertiesStringProps']] = None):
        """
        :param Mapping[str, 'SystemBlueprintPropertiesArrayPropsArgs'] array_props: The array property of the blueprint
        :param Mapping[str, 'SystemBlueprintPropertiesBooleanPropsArgs'] boolean_props: The boolean property of the blueprint
        :param Mapping[str, 'SystemBlueprintPropertiesNumberPropsArgs'] number_props: The number property of the blueprint
        :param Mapping[str, 'SystemBlueprintPropertiesObjectPropsArgs'] object_props: The object property of the blueprint
        :param Mapping[str, 'SystemBlueprintPropertiesStringPropsArgs'] string_props: The string property of the blueprint
        """
        if array_props is not None:
            pulumi.set(__self__, "array_props", array_props)
        if boolean_props is not None:
            pulumi.set(__self__, "boolean_props", boolean_props)
        if number_props is not None:
            pulumi.set(__self__, "number_props", number_props)
        if object_props is not None:
            pulumi.set(__self__, "object_props", object_props)
        if string_props is not None:
            pulumi.set(__self__, "string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> Optional[Mapping[str, 'outputs.SystemBlueprintPropertiesArrayProps']]:
        """
        The array property of the blueprint
        """
        return pulumi.get(self, "array_props")

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Optional[Mapping[str, 'outputs.SystemBlueprintPropertiesBooleanProps']]:
        """
        The boolean property of the blueprint
        """
        return pulumi.get(self, "boolean_props")

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Optional[Mapping[str, 'outputs.SystemBlueprintPropertiesNumberProps']]:
        """
        The number property of the blueprint
        """
        return pulumi.get(self, "number_props")

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Optional[Mapping[str, 'outputs.SystemBlueprintPropertiesObjectProps']]:
        """
        The object property of the blueprint
        """
        return pulumi.get(self, "object_props")

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Optional[Mapping[str, 'outputs.SystemBlueprintPropertiesStringProps']]:
        """
        The string property of the blueprint
        """
        return pulumi.get(self, "string_props")


@pulumi.output_type
class SystemBlueprintPropertiesArrayProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "booleanItems":
            suggest = "boolean_items"
        elif key == "maxItems":
            suggest = "max_items"
        elif key == "minItems":
            suggest = "min_items"
        elif key == "numberItems":
            suggest = "number_items"
        elif key == "objectItems":
            suggest = "object_items"
        elif key == "stringItems":
            suggest = "string_items"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemBlueprintPropertiesArrayProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemBlueprintPropertiesArrayProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemBlueprintPropertiesArrayProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean_items: Optional['outputs.SystemBlueprintPropertiesArrayPropsBooleanItems'] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 max_items: Optional[int] = None,
                 min_items: Optional[int] = None,
                 number_items: Optional['outputs.SystemBlueprintPropertiesArrayPropsNumberItems'] = None,
                 object_items: Optional['outputs.SystemBlueprintPropertiesArrayPropsObjectItems'] = None,
                 required: Optional[bool] = None,
                 string_items: Optional['outputs.SystemBlueprintPropertiesArrayPropsStringItems'] = None,
                 title: Optional[str] = None):
        """
        :param 'SystemBlueprintPropertiesArrayPropsBooleanItemsArgs' boolean_items: The items of the array property
        :param str description: The description of the property
        :param str icon: The icon of the property
        :param int max_items: The max items of the array property
        :param int min_items: The min items of the array property
        :param 'SystemBlueprintPropertiesArrayPropsNumberItemsArgs' number_items: The items of the array property
        :param 'SystemBlueprintPropertiesArrayPropsObjectItemsArgs' object_items: The items of the array property
        :param bool required: Whether the property is required
        :param 'SystemBlueprintPropertiesArrayPropsStringItemsArgs' string_items: The items of the array property
        :param str title: The title of the property
        """
        if boolean_items is not None:
            pulumi.set(__self__, "boolean_items", boolean_items)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_items is not None:
            pulumi.set(__self__, "max_items", max_items)
        if min_items is not None:
            pulumi.set(__self__, "min_items", min_items)
        if number_items is not None:
            pulumi.set(__self__, "number_items", number_items)
        if object_items is not None:
            pulumi.set(__self__, "object_items", object_items)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if string_items is not None:
            pulumi.set(__self__, "string_items", string_items)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Optional['outputs.SystemBlueprintPropertiesArrayPropsBooleanItems']:
        """
        The items of the array property
        """
        return pulumi.get(self, "boolean_items")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter(name="maxItems")
    def max_items(self) -> Optional[int]:
        """
        The max items of the array property
        """
        return pulumi.get(self, "max_items")

    @property
    @pulumi.getter(name="minItems")
    def min_items(self) -> Optional[int]:
        """
        The min items of the array property
        """
        return pulumi.get(self, "min_items")

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Optional['outputs.SystemBlueprintPropertiesArrayPropsNumberItems']:
        """
        The items of the array property
        """
        return pulumi.get(self, "number_items")

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional['outputs.SystemBlueprintPropertiesArrayPropsObjectItems']:
        """
        The items of the array property
        """
        return pulumi.get(self, "object_items")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Optional['outputs.SystemBlueprintPropertiesArrayPropsStringItems']:
        """
        The items of the array property
        """
        return pulumi.get(self, "string_items")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class SystemBlueprintPropertiesArrayPropsBooleanItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[bool]] = None):
        """
        :param Sequence[bool] defaults: The default of the items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[bool]]:
        """
        The default of the items
        """
        return pulumi.get(self, "defaults")


@pulumi.output_type
class SystemBlueprintPropertiesArrayPropsNumberItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[float]] = None):
        """
        :param Sequence[float] defaults: The default of the items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[float]]:
        """
        The default of the items
        """
        return pulumi.get(self, "defaults")


@pulumi.output_type
class SystemBlueprintPropertiesArrayPropsObjectItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] defaults: The default of the items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[str]]:
        """
        The default of the items
        """
        return pulumi.get(self, "defaults")


@pulumi.output_type
class SystemBlueprintPropertiesArrayPropsStringItems(dict):
    def __init__(__self__, *,
                 defaults: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 pattern: Optional[str] = None):
        """
        :param Sequence[str] defaults: The default of the items
        :param str format: The format of the items
        :param str pattern: The pattern of the string array items
        """
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[Sequence[str]]:
        """
        The default of the items
        """
        return pulumi.get(self, "defaults")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        The format of the items
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        The pattern of the string array items
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class SystemBlueprintPropertiesBooleanProps(dict):
    def __init__(__self__, *,
                 default: Optional[bool] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None):
        """
        :param bool default: The default of the boolean property
        :param str description: The description of the property
        :param str icon: The icon of the property
        :param bool required: Whether the property is required
        :param str title: The title of the property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[bool]:
        """
        The default of the boolean property
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class SystemBlueprintPropertiesNumberProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumColors":
            suggest = "enum_colors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemBlueprintPropertiesNumberProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemBlueprintPropertiesNumberProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemBlueprintPropertiesNumberProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default: Optional[float] = None,
                 description: Optional[str] = None,
                 enum_colors: Optional[Mapping[str, str]] = None,
                 enums: Optional[Sequence[float]] = None,
                 icon: Optional[str] = None,
                 maximum: Optional[float] = None,
                 minimum: Optional[float] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None):
        """
        :param float default: The default of the number property
        :param str description: The description of the property
        :param Mapping[str, str] enum_colors: The enum colors of the number property
        :param Sequence[float] enums: The enum of the number property
        :param str icon: The icon of the property
        :param float maximum: The min of the number property
        :param float minimum: The max of the number property
        :param bool required: Whether the property is required
        :param str title: The title of the property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_colors is not None:
            pulumi.set(__self__, "enum_colors", enum_colors)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[float]:
        """
        The default of the number property
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumColors")
    def enum_colors(self) -> Optional[Mapping[str, str]]:
        """
        The enum colors of the number property
        """
        return pulumi.get(self, "enum_colors")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[float]]:
        """
        The enum of the number property
        """
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def maximum(self) -> Optional[float]:
        """
        The min of the number property
        """
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> Optional[float]:
        """
        The max of the number property
        """
        return pulumi.get(self, "minimum")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class SystemBlueprintPropertiesObjectProps(dict):
    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 icon: Optional[str] = None,
                 required: Optional[bool] = None,
                 spec: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str default: The default of the object property
        :param str description: The description of the property
        :param str icon: The icon of the property
        :param bool required: Whether the property is required
        :param str spec: The spec of the object property
        :param str title: The title of the property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        """
        The default of the object property
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def spec(self) -> Optional[str]:
        """
        The spec of the object property
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class SystemBlueprintPropertiesStringProps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumColors":
            suggest = "enum_colors"
        elif key == "maxLength":
            suggest = "max_length"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "specAuthentication":
            suggest = "spec_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemBlueprintPropertiesStringProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemBlueprintPropertiesStringProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemBlueprintPropertiesStringProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 enum_colors: Optional[Mapping[str, str]] = None,
                 enums: Optional[Sequence[str]] = None,
                 format: Optional[str] = None,
                 icon: Optional[str] = None,
                 max_length: Optional[int] = None,
                 min_length: Optional[int] = None,
                 pattern: Optional[str] = None,
                 required: Optional[bool] = None,
                 spec: Optional[str] = None,
                 spec_authentication: Optional['outputs.SystemBlueprintPropertiesStringPropsSpecAuthentication'] = None,
                 title: Optional[str] = None):
        """
        :param str default: The default of the string property
        :param str description: The description of the property
        :param Mapping[str, str] enum_colors: The enum colors of the string property
        :param Sequence[str] enums: The enum of the string property
        :param str format: The format of the string property
        :param str icon: The icon of the property
        :param int max_length: The max length of the string property
        :param int min_length: The min length of the string property
        :param str pattern: The pattern of the string property
        :param bool required: Whether the property is required
        :param str spec: The spec of the string property
        :param 'SystemBlueprintPropertiesStringPropsSpecAuthenticationArgs' spec_authentication: The spec authentication of the string property
        :param str title: The title of the property
        """
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_colors is not None:
            pulumi.set(__self__, "enum_colors", enum_colors)
        if enums is not None:
            pulumi.set(__self__, "enums", enums)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if spec_authentication is not None:
            pulumi.set(__self__, "spec_authentication", spec_authentication)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        """
        The default of the string property
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the property
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumColors")
    def enum_colors(self) -> Optional[Mapping[str, str]]:
        """
        The enum colors of the string property
        """
        return pulumi.get(self, "enum_colors")

    @property
    @pulumi.getter
    def enums(self) -> Optional[Sequence[str]]:
        """
        The enum of the string property
        """
        return pulumi.get(self, "enums")

    @property
    @pulumi.getter
    def format(self) -> Optional[str]:
        """
        The format of the string property
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the property
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[int]:
        """
        The max length of the string property
        """
        return pulumi.get(self, "max_length")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        """
        The min length of the string property
        """
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        The pattern of the string property
        """
        return pulumi.get(self, "pattern")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Whether the property is required
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def spec(self) -> Optional[str]:
        """
        The spec of the string property
        """
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter(name="specAuthentication")
    def spec_authentication(self) -> Optional['outputs.SystemBlueprintPropertiesStringPropsSpecAuthentication']:
        """
        The spec authentication of the string property
        """
        return pulumi.get(self, "spec_authentication")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the property
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class SystemBlueprintPropertiesStringPropsSpecAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizationUrl":
            suggest = "authorization_url"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "tokenUrl":
            suggest = "token_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemBlueprintPropertiesStringPropsSpecAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemBlueprintPropertiesStringPropsSpecAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemBlueprintPropertiesStringPropsSpecAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorization_url: str,
                 client_id: str,
                 token_url: str):
        """
        :param str authorization_url: The authorizationUrl of the spec authentication
        :param str client_id: The clientId of the spec authentication
        :param str token_url: The tokenUrl of the spec authentication
        """
        pulumi.set(__self__, "authorization_url", authorization_url)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="authorizationUrl")
    def authorization_url(self) -> str:
        """
        The authorizationUrl of the spec authentication
        """
        return pulumi.get(self, "authorization_url")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The clientId of the spec authentication
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> str:
        """
        The tokenUrl of the spec authentication
        """
        return pulumi.get(self, "token_url")


@pulumi.output_type
class SystemBlueprintRelations(dict):
    def __init__(__self__, *,
                 target: str,
                 description: Optional[str] = None,
                 many: Optional[bool] = None,
                 required: Optional[bool] = None,
                 title: Optional[str] = None):
        """
        :param str target: The target of the relation
        :param str description: The description of the relation
        :param bool many: The many of the relation
        :param bool required: The required of the relation
        :param str title: The title of the relation
        """
        pulumi.set(__self__, "target", target)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if many is not None:
            pulumi.set(__self__, "many", many)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        The target of the relation
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the relation
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def many(self) -> Optional[bool]:
        """
        The many of the relation
        """
        return pulumi.get(self, "many")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        The required of the relation
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the relation
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class WebhookMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "itemsToParse":
            suggest = "items_to_parse"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebhookMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebhookMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebhookMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blueprint: str,
                 entity: 'outputs.WebhookMappingEntity',
                 filter: Optional[str] = None,
                 items_to_parse: Optional[str] = None):
        """
        :param str blueprint: The blueprint of the mapping
        :param 'WebhookMappingEntityArgs' entity: The entity of the mapping
        :param str filter: The filter of the mapping
        :param str items_to_parse: The items to parser of the mapping
        """
        pulumi.set(__self__, "blueprint", blueprint)
        pulumi.set(__self__, "entity", entity)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if items_to_parse is not None:
            pulumi.set(__self__, "items_to_parse", items_to_parse)

    @property
    @pulumi.getter
    def blueprint(self) -> str:
        """
        The blueprint of the mapping
        """
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter
    def entity(self) -> 'outputs.WebhookMappingEntity':
        """
        The entity of the mapping
        """
        return pulumi.get(self, "entity")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        """
        The filter of the mapping
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="itemsToParse")
    def items_to_parse(self) -> Optional[str]:
        """
        The items to parser of the mapping
        """
        return pulumi.get(self, "items_to_parse")


@pulumi.output_type
class WebhookMappingEntity(dict):
    def __init__(__self__, *,
                 identifier: str,
                 icon: Optional[str] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 relations: Optional[Mapping[str, str]] = None,
                 team: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str identifier: The identifier of the entity
        :param str icon: The icon of the entity
        :param Mapping[str, str] properties: The properties of the entity
        :param Mapping[str, str] relations: The relations of the entity
        :param str team: The team of the entity
        :param str title: The title of the entity
        """
        pulumi.set(__self__, "identifier", identifier)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if relations is not None:
            pulumi.set(__self__, "relations", relations)
        if team is not None:
            pulumi.set(__self__, "team", team)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        The identifier of the entity
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def icon(self) -> Optional[str]:
        """
        The icon of the entity
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        The properties of the entity
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def relations(self) -> Optional[Mapping[str, str]]:
        """
        The relations of the entity
        """
        return pulumi.get(self, "relations")

    @property
    @pulumi.getter
    def team(self) -> Optional[str]:
        """
        The team of the entity
        """
        return pulumi.get(self, "team")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The title of the entity
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class WebhookSecurity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestIdentifierPath":
            suggest = "request_identifier_path"
        elif key == "signatureAlgorithm":
            suggest = "signature_algorithm"
        elif key == "signatureHeaderName":
            suggest = "signature_header_name"
        elif key == "signaturePrefix":
            suggest = "signature_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebhookSecurity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebhookSecurity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebhookSecurity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 request_identifier_path: Optional[str] = None,
                 secret: Optional[str] = None,
                 signature_algorithm: Optional[str] = None,
                 signature_header_name: Optional[str] = None,
                 signature_prefix: Optional[str] = None):
        """
        :param str request_identifier_path: The request identifier path of the webhook
        :param str secret: The secret of the webhook
        :param str signature_algorithm: The signature algorithm of the webhook
        :param str signature_header_name: The signature header name of the webhook
        :param str signature_prefix: The signature prefix of the webhook
        """
        if request_identifier_path is not None:
            pulumi.set(__self__, "request_identifier_path", request_identifier_path)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if signature_header_name is not None:
            pulumi.set(__self__, "signature_header_name", signature_header_name)
        if signature_prefix is not None:
            pulumi.set(__self__, "signature_prefix", signature_prefix)

    @property
    @pulumi.getter(name="requestIdentifierPath")
    def request_identifier_path(self) -> Optional[str]:
        """
        The request identifier path of the webhook
        """
        return pulumi.get(self, "request_identifier_path")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        """
        The secret of the webhook
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[str]:
        """
        The signature algorithm of the webhook
        """
        return pulumi.get(self, "signature_algorithm")

    @property
    @pulumi.getter(name="signatureHeaderName")
    def signature_header_name(self) -> Optional[str]:
        """
        The signature header name of the webhook
        """
        return pulumi.get(self, "signature_header_name")

    @property
    @pulumi.getter(name="signaturePrefix")
    def signature_prefix(self) -> Optional[str]:
        """
        The signature prefix of the webhook
        """
        return pulumi.get(self, "signature_prefix")


@pulumi.output_type
class GetSearchEntityResult(dict):
    def __init__(__self__, *,
                 blueprint: str,
                 created_at: str,
                 created_by: str,
                 icon: str,
                 identifier: str,
                 properties: 'outputs.GetSearchEntityPropertiesResult',
                 relations: 'outputs.GetSearchEntityRelationsResult',
                 run_id: str,
                 scorecards: Mapping[str, 'outputs.GetSearchEntityScorecardsResult'],
                 teams: Sequence[str],
                 title: str,
                 updated_at: str,
                 updated_by: str):
        """
        :param str blueprint: The blueprint identifier the entity relates to
        :param str created_at: The creation date of the entity
        :param str created_by: The creator of the entity
        :param str icon: The icon of the entity
        :param str identifier: The identifier of the entity
        :param 'GetSearchEntityPropertiesArgs' properties: The properties of the entity
        :param 'GetSearchEntityRelationsArgs' relations: The relations of the entity
        :param str run_id: The runID of the action run that created the entity
        :param Mapping[str, 'GetSearchEntityScorecardsArgs'] scorecards: The scorecards of the entity
        :param Sequence[str] teams: The teams the entity belongs to
        :param str title: The title of the entity
        :param str updated_at: The last update date of the entity
        :param str updated_by: The last updater of the entity
        """
        pulumi.set(__self__, "blueprint", blueprint)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "icon", icon)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "relations", relations)
        pulumi.set(__self__, "run_id", run_id)
        pulumi.set(__self__, "scorecards", scorecards)
        pulumi.set(__self__, "teams", teams)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "updated_by", updated_by)

    @property
    @pulumi.getter
    def blueprint(self) -> str:
        """
        The blueprint identifier the entity relates to
        """
        return pulumi.get(self, "blueprint")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The creation date of the entity
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The creator of the entity
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def icon(self) -> str:
        """
        The icon of the entity
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        The identifier of the entity
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def properties(self) -> 'outputs.GetSearchEntityPropertiesResult':
        """
        The properties of the entity
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def relations(self) -> 'outputs.GetSearchEntityRelationsResult':
        """
        The relations of the entity
        """
        return pulumi.get(self, "relations")

    @property
    @pulumi.getter(name="runId")
    def run_id(self) -> str:
        """
        The runID of the action run that created the entity
        """
        return pulumi.get(self, "run_id")

    @property
    @pulumi.getter
    def scorecards(self) -> Mapping[str, 'outputs.GetSearchEntityScorecardsResult']:
        """
        The scorecards of the entity
        """
        return pulumi.get(self, "scorecards")

    @property
    @pulumi.getter
    def teams(self) -> Sequence[str]:
        """
        The teams the entity belongs to
        """
        return pulumi.get(self, "teams")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        The title of the entity
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        The last update date of the entity
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The last updater of the entity
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class GetSearchEntityPropertiesResult(dict):
    def __init__(__self__, *,
                 array_props: 'outputs.GetSearchEntityPropertiesArrayPropsResult',
                 boolean_props: Mapping[str, bool],
                 number_props: Mapping[str, float],
                 object_props: Mapping[str, str],
                 string_props: Mapping[str, str]):
        """
        :param 'GetSearchEntityPropertiesArrayPropsArgs' array_props: The array properties of the entity
        :param Mapping[str, bool] boolean_props: The bool properties of the entity
        :param Mapping[str, float] number_props: The number properties of the entity
        :param Mapping[str, str] object_props: The object properties of the entity
        :param Mapping[str, str] string_props: The string properties of the entity
        """
        pulumi.set(__self__, "array_props", array_props)
        pulumi.set(__self__, "boolean_props", boolean_props)
        pulumi.set(__self__, "number_props", number_props)
        pulumi.set(__self__, "object_props", object_props)
        pulumi.set(__self__, "string_props", string_props)

    @property
    @pulumi.getter(name="arrayProps")
    def array_props(self) -> 'outputs.GetSearchEntityPropertiesArrayPropsResult':
        """
        The array properties of the entity
        """
        return pulumi.get(self, "array_props")

    @property
    @pulumi.getter(name="booleanProps")
    def boolean_props(self) -> Mapping[str, bool]:
        """
        The bool properties of the entity
        """
        return pulumi.get(self, "boolean_props")

    @property
    @pulumi.getter(name="numberProps")
    def number_props(self) -> Mapping[str, float]:
        """
        The number properties of the entity
        """
        return pulumi.get(self, "number_props")

    @property
    @pulumi.getter(name="objectProps")
    def object_props(self) -> Mapping[str, str]:
        """
        The object properties of the entity
        """
        return pulumi.get(self, "object_props")

    @property
    @pulumi.getter(name="stringProps")
    def string_props(self) -> Mapping[str, str]:
        """
        The string properties of the entity
        """
        return pulumi.get(self, "string_props")


@pulumi.output_type
class GetSearchEntityPropertiesArrayPropsResult(dict):
    def __init__(__self__, *,
                 boolean_items: Mapping[str, Sequence[bool]],
                 number_items: Mapping[str, Sequence[float]],
                 object_items: Mapping[str, Sequence[str]],
                 string_items: Mapping[str, Sequence[str]]):
        pulumi.set(__self__, "boolean_items", boolean_items)
        pulumi.set(__self__, "number_items", number_items)
        pulumi.set(__self__, "object_items", object_items)
        pulumi.set(__self__, "string_items", string_items)

    @property
    @pulumi.getter(name="booleanItems")
    def boolean_items(self) -> Mapping[str, Sequence[bool]]:
        return pulumi.get(self, "boolean_items")

    @property
    @pulumi.getter(name="numberItems")
    def number_items(self) -> Mapping[str, Sequence[float]]:
        return pulumi.get(self, "number_items")

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Mapping[str, Sequence[str]]:
        return pulumi.get(self, "object_items")

    @property
    @pulumi.getter(name="stringItems")
    def string_items(self) -> Mapping[str, Sequence[str]]:
        return pulumi.get(self, "string_items")


@pulumi.output_type
class GetSearchEntityRelationsResult(dict):
    def __init__(__self__, *,
                 many_relations: Mapping[str, Sequence[str]],
                 single_relations: Mapping[str, str]):
        """
        :param Mapping[str, Sequence[str]] many_relations: The many relation of the entity
        :param Mapping[str, str] single_relations: The single relation of the entity
        """
        pulumi.set(__self__, "many_relations", many_relations)
        pulumi.set(__self__, "single_relations", single_relations)

    @property
    @pulumi.getter(name="manyRelations")
    def many_relations(self) -> Mapping[str, Sequence[str]]:
        """
        The many relation of the entity
        """
        return pulumi.get(self, "many_relations")

    @property
    @pulumi.getter(name="singleRelations")
    def single_relations(self) -> Mapping[str, str]:
        """
        The single relation of the entity
        """
        return pulumi.get(self, "single_relations")


@pulumi.output_type
class GetSearchEntityScorecardsResult(dict):
    def __init__(__self__, *,
                 level: str,
                 rules: Sequence['outputs.GetSearchEntityScorecardsRuleResult']):
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetSearchEntityScorecardsRuleResult']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetSearchEntityScorecardsRuleResult(dict):
    def __init__(__self__, *,
                 identifier: str,
                 level: str,
                 status: str):
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


