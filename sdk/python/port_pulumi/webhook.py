# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WebhookArgs', 'Webhook']

@pulumi.input_type
class WebhookArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input['WebhookMappingArgs']]]] = None,
                 security: Optional[pulumi.Input['WebhookSecurityArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Webhook resource.
        :param pulumi.Input[str] description: The description of the webhook
        :param pulumi.Input[bool] enabled: Whether the webhook is enabled
        :param pulumi.Input[str] icon: The icon of the webhook
        :param pulumi.Input[str] identifier: The identifier of the webhook
        :param pulumi.Input[Sequence[pulumi.Input['WebhookMappingArgs']]] mappings: The mappings of the webhook
        :param pulumi.Input['WebhookSecurityArgs'] security: The security of the webhook
        :param pulumi.Input[str] title: The title of the webhook
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the webhook
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the webhook is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the webhook
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the webhook
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebhookMappingArgs']]]]:
        """
        The mappings of the webhook
        """
        return pulumi.get(self, "mappings")

    @mappings.setter
    def mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebhookMappingArgs']]]]):
        pulumi.set(self, "mappings", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input['WebhookSecurityArgs']]:
        """
        The security of the webhook
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input['WebhookSecurityArgs']]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the webhook
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class _WebhookState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input['WebhookMappingArgs']]]] = None,
                 security: Optional[pulumi.Input['WebhookSecurityArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 webhook_key: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Webhook resources.
        :param pulumi.Input[str] created_at: The creation date of the webhook
        :param pulumi.Input[str] created_by: The creator of the webhook
        :param pulumi.Input[str] description: The description of the webhook
        :param pulumi.Input[bool] enabled: Whether the webhook is enabled
        :param pulumi.Input[str] icon: The icon of the webhook
        :param pulumi.Input[str] identifier: The identifier of the webhook
        :param pulumi.Input[Sequence[pulumi.Input['WebhookMappingArgs']]] mappings: The mappings of the webhook
        :param pulumi.Input['WebhookSecurityArgs'] security: The security of the webhook
        :param pulumi.Input[str] title: The title of the webhook
        :param pulumi.Input[str] updated_at: The last update date of the webhook
        :param pulumi.Input[str] updated_by: The last updater of the webhook
        :param pulumi.Input[str] url: The url of the webhook
        :param pulumi.Input[str] webhook_key: The webhook key of the webhook
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if webhook_key is not None:
            pulumi.set(__self__, "webhook_key", webhook_key)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The creation date of the webhook
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The creator of the webhook
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the webhook
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the webhook is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        The icon of the webhook
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the webhook
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebhookMappingArgs']]]]:
        """
        The mappings of the webhook
        """
        return pulumi.get(self, "mappings")

    @mappings.setter
    def mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebhookMappingArgs']]]]):
        pulumi.set(self, "mappings", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input['WebhookSecurityArgs']]:
        """
        The security of the webhook
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input['WebhookSecurityArgs']]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the webhook
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        The last update date of the webhook
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        The last updater of the webhook
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The url of the webhook
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="webhookKey")
    def webhook_key(self) -> Optional[pulumi.Input[str]]:
        """
        The webhook key of the webhook
        """
        return pulumi.get(self, "webhook_key")

    @webhook_key.setter
    def webhook_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webhook_key", value)


class Webhook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WebhookMappingArgs', 'WebhookMappingArgsDict']]]]] = None,
                 security: Optional[pulumi.Input[Union['WebhookSecurityArgs', 'WebhookSecurityArgsDict']]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Webhook resource can be used to create webhooks integrations in Port.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_port as port

        author = port.index.Port_blueprint("author",
            title=Author,
            icon=User,
            identifier=author,
            properties={
                stringProps: {
                    name: {
                        type: string,
                        title: Name,
                    },
                },
            })
        team = port.index.Port_blueprint("team",
            title=Team,
            icon=Team,
            identifier=team,
            properties={
                stringProps: {
                    name: {
                        type: string,
                        title: Team Name,
                    },
                },
            })
        microservice = port.index.Port_blueprint("microservice",
            title=TF test microservice,
            icon=Terraform,
            identifier=microservice,
            properties={
                stringProps: {
                    url: {
                        type: string,
                        title: URL,
                    },
                },
            },
            relations={
                author: {
                    title: Author,
                    target: author.identifier,
                },
                team: {
                    title: Team,
                    target: team.identifier,
                },
            })
        create_pr = port.index.Port_webhook("createPr",
            identifier=pr_webhook,
            title=Webhook with mixed relations,
            icon=Terraform,
            enabled=True,
            mappings=[{
                blueprint: microservice.identifier,
                operation: {
                    type: create,
                },
                filter: .headers."x-github-event" == "pull_request",
                entity: {
                    identifier: .body.pull_request.id | tostring,
                    title: .body.pull_request.title,
                    properties: {
                        url: .body.pull_request.html_url,
                    },
                    relations: {
                        author: json.dumps({
                            combinator: 'and',
                            rules: [{
                                property: '$identifier',
                                operator: '=',
                                value: .body.pull_request.user.login | tostring,
                            }],
                        }),
                        team: .body.repository.owner.login | tostring,
                    },
                },
            }],
            opts = pulumi.ResourceOptions(depends_on=[
                    microservice,
                    author,
                    team,
                ]))
        ```

        ## Notes

        - When using object format for relations, `combinator`, `property` and `operator` fields should be enclosed in single quotes, while `value` should not have quotes as it's a JQ expression. The single quotes are required because these fields contain literal string values that must be passed as-is to the Port API, whereas `value` contains a JQ expression that should be evaluated dynamically.
        - For all available operators, see the [Port comparison operators documentation](https://docs.port.io/search-and-query/comparison-operators).

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the webhook
        :param pulumi.Input[bool] enabled: Whether the webhook is enabled
        :param pulumi.Input[str] icon: The icon of the webhook
        :param pulumi.Input[str] identifier: The identifier of the webhook
        :param pulumi.Input[Sequence[pulumi.Input[Union['WebhookMappingArgs', 'WebhookMappingArgsDict']]]] mappings: The mappings of the webhook
        :param pulumi.Input[Union['WebhookSecurityArgs', 'WebhookSecurityArgsDict']] security: The security of the webhook
        :param pulumi.Input[str] title: The title of the webhook
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WebhookArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Webhook resource can be used to create webhooks integrations in Port.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_port as port

        author = port.index.Port_blueprint("author",
            title=Author,
            icon=User,
            identifier=author,
            properties={
                stringProps: {
                    name: {
                        type: string,
                        title: Name,
                    },
                },
            })
        team = port.index.Port_blueprint("team",
            title=Team,
            icon=Team,
            identifier=team,
            properties={
                stringProps: {
                    name: {
                        type: string,
                        title: Team Name,
                    },
                },
            })
        microservice = port.index.Port_blueprint("microservice",
            title=TF test microservice,
            icon=Terraform,
            identifier=microservice,
            properties={
                stringProps: {
                    url: {
                        type: string,
                        title: URL,
                    },
                },
            },
            relations={
                author: {
                    title: Author,
                    target: author.identifier,
                },
                team: {
                    title: Team,
                    target: team.identifier,
                },
            })
        create_pr = port.index.Port_webhook("createPr",
            identifier=pr_webhook,
            title=Webhook with mixed relations,
            icon=Terraform,
            enabled=True,
            mappings=[{
                blueprint: microservice.identifier,
                operation: {
                    type: create,
                },
                filter: .headers."x-github-event" == "pull_request",
                entity: {
                    identifier: .body.pull_request.id | tostring,
                    title: .body.pull_request.title,
                    properties: {
                        url: .body.pull_request.html_url,
                    },
                    relations: {
                        author: json.dumps({
                            combinator: 'and',
                            rules: [{
                                property: '$identifier',
                                operator: '=',
                                value: .body.pull_request.user.login | tostring,
                            }],
                        }),
                        team: .body.repository.owner.login | tostring,
                    },
                },
            }],
            opts = pulumi.ResourceOptions(depends_on=[
                    microservice,
                    author,
                    team,
                ]))
        ```

        ## Notes

        - When using object format for relations, `combinator`, `property` and `operator` fields should be enclosed in single quotes, while `value` should not have quotes as it's a JQ expression. The single quotes are required because these fields contain literal string values that must be passed as-is to the Port API, whereas `value` contains a JQ expression that should be evaluated dynamically.
        - For all available operators, see the [Port comparison operators documentation](https://docs.port.io/search-and-query/comparison-operators).

        :param str resource_name: The name of the resource.
        :param WebhookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebhookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WebhookMappingArgs', 'WebhookMappingArgsDict']]]]] = None,
                 security: Optional[pulumi.Input[Union['WebhookSecurityArgs', 'WebhookSecurityArgsDict']]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebhookArgs.__new__(WebhookArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["icon"] = icon
            __props__.__dict__["identifier"] = identifier
            __props__.__dict__["mappings"] = mappings
            __props__.__dict__["security"] = security
            __props__.__dict__["title"] = title
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["updated_by"] = None
            __props__.__dict__["url"] = None
            __props__.__dict__["webhook_key"] = None
        super(Webhook, __self__).__init__(
            'port:index/webhook:Webhook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            created_by: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            icon: Optional[pulumi.Input[str]] = None,
            identifier: Optional[pulumi.Input[str]] = None,
            mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['WebhookMappingArgs', 'WebhookMappingArgsDict']]]]] = None,
            security: Optional[pulumi.Input[Union['WebhookSecurityArgs', 'WebhookSecurityArgsDict']]] = None,
            title: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            updated_by: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None,
            webhook_key: Optional[pulumi.Input[str]] = None) -> 'Webhook':
        """
        Get an existing Webhook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: The creation date of the webhook
        :param pulumi.Input[str] created_by: The creator of the webhook
        :param pulumi.Input[str] description: The description of the webhook
        :param pulumi.Input[bool] enabled: Whether the webhook is enabled
        :param pulumi.Input[str] icon: The icon of the webhook
        :param pulumi.Input[str] identifier: The identifier of the webhook
        :param pulumi.Input[Sequence[pulumi.Input[Union['WebhookMappingArgs', 'WebhookMappingArgsDict']]]] mappings: The mappings of the webhook
        :param pulumi.Input[Union['WebhookSecurityArgs', 'WebhookSecurityArgsDict']] security: The security of the webhook
        :param pulumi.Input[str] title: The title of the webhook
        :param pulumi.Input[str] updated_at: The last update date of the webhook
        :param pulumi.Input[str] updated_by: The last updater of the webhook
        :param pulumi.Input[str] url: The url of the webhook
        :param pulumi.Input[str] webhook_key: The webhook key of the webhook
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WebhookState.__new__(_WebhookState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["icon"] = icon
        __props__.__dict__["identifier"] = identifier
        __props__.__dict__["mappings"] = mappings
        __props__.__dict__["security"] = security
        __props__.__dict__["title"] = title
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["updated_by"] = updated_by
        __props__.__dict__["url"] = url
        __props__.__dict__["webhook_key"] = webhook_key
        return Webhook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The creation date of the webhook
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[str]:
        """
        The creator of the webhook
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the webhook
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Whether the webhook is enabled
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def icon(self) -> pulumi.Output[Optional[str]]:
        """
        The icon of the webhook
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Output[str]:
        """
        The identifier of the webhook
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def mappings(self) -> pulumi.Output[Optional[Sequence['outputs.WebhookMapping']]]:
        """
        The mappings of the webhook
        """
        return pulumi.get(self, "mappings")

    @property
    @pulumi.getter
    def security(self) -> pulumi.Output[Optional['outputs.WebhookSecurity']]:
        """
        The security of the webhook
        """
        return pulumi.get(self, "security")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[Optional[str]]:
        """
        The title of the webhook
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        The last update date of the webhook
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Output[str]:
        """
        The last updater of the webhook
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The url of the webhook
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="webhookKey")
    def webhook_key(self) -> pulumi.Output[str]:
        """
        The webhook key of the webhook
        """
        return pulumi.get(self, "webhook_key")

